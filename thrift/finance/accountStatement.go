// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package finance

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - StartTime
//  - EndTime
type TAccountStatementParams struct {
  StartTime string `thrift:"startTime,1" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,2" db:"endTime" json:"endTime"`
}

func NewTAccountStatementParams() *TAccountStatementParams {
  return &TAccountStatementParams{}
}


func (p *TAccountStatementParams) GetStartTime() string {
  return p.StartTime
}

func (p *TAccountStatementParams) GetEndTime() string {
  return p.EndTime
}
func (p *TAccountStatementParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountStatementParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TAccountStatementParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TAccountStatementParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAccountStatementParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountStatementParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startTime: ", p), err) }
  return err
}

func (p *TAccountStatementParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endTime: ", p), err) }
  return err
}

func (p *TAccountStatementParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountStatementParams(%+v)", *p)
}

// Attributes:
//  - Currency
//  - Deposit
//  - Withdraw
//  - NetworkFee
type TAccountStatementItem struct {
  Currency string `thrift:"currency,1" db:"currency" json:"currency"`
  Deposit string `thrift:"deposit,2" db:"deposit" json:"deposit"`
  Withdraw string `thrift:"withdraw,3" db:"withdraw" json:"withdraw"`
  NetworkFee string `thrift:"networkFee,4" db:"networkFee" json:"networkFee"`
}

func NewTAccountStatementItem() *TAccountStatementItem {
  return &TAccountStatementItem{}
}


func (p *TAccountStatementItem) GetCurrency() string {
  return p.Currency
}

func (p *TAccountStatementItem) GetDeposit() string {
  return p.Deposit
}

func (p *TAccountStatementItem) GetWithdraw() string {
  return p.Withdraw
}

func (p *TAccountStatementItem) GetNetworkFee() string {
  return p.NetworkFee
}
func (p *TAccountStatementItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountStatementItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TAccountStatementItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Deposit = v
}
  return nil
}

func (p *TAccountStatementItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Withdraw = v
}
  return nil
}

func (p *TAccountStatementItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NetworkFee = v
}
  return nil
}

func (p *TAccountStatementItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAccountStatementItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountStatementItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currency: ", p), err) }
  return err
}

func (p *TAccountStatementItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deposit", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deposit: ", p), err) }
  if err := oprot.WriteString(string(p.Deposit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deposit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deposit: ", p), err) }
  return err
}

func (p *TAccountStatementItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdraw", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withdraw: ", p), err) }
  if err := oprot.WriteString(string(p.Withdraw)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdraw (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withdraw: ", p), err) }
  return err
}

func (p *TAccountStatementItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkFee", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:networkFee: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkFee (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:networkFee: ", p), err) }
  return err
}

func (p *TAccountStatementItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountStatementItem(%+v)", *p)
}

// Attributes:
//  - Currency
//  - BlockChain
//  - Wallet
//  - Transfer
//  - Engine
type TAccountStatement struct {
  Currency string `thrift:"currency,1" db:"currency" json:"currency"`
  BlockChain *TAccountStatementItem `thrift:"blockChain,2" db:"blockChain" json:"blockChain"`
  Wallet *TAccountStatementItem `thrift:"wallet,3" db:"wallet" json:"wallet"`
  Transfer *TAccountStatementItem `thrift:"transfer,4" db:"transfer" json:"transfer"`
  Engine *TAccountStatementItem `thrift:"engine,5" db:"engine" json:"engine"`
}

func NewTAccountStatement() *TAccountStatement {
  return &TAccountStatement{}
}


func (p *TAccountStatement) GetCurrency() string {
  return p.Currency
}
var TAccountStatement_BlockChain_DEFAULT *TAccountStatementItem
func (p *TAccountStatement) GetBlockChain() *TAccountStatementItem {
  if !p.IsSetBlockChain() {
    return TAccountStatement_BlockChain_DEFAULT
  }
return p.BlockChain
}
var TAccountStatement_Wallet_DEFAULT *TAccountStatementItem
func (p *TAccountStatement) GetWallet() *TAccountStatementItem {
  if !p.IsSetWallet() {
    return TAccountStatement_Wallet_DEFAULT
  }
return p.Wallet
}
var TAccountStatement_Transfer_DEFAULT *TAccountStatementItem
func (p *TAccountStatement) GetTransfer() *TAccountStatementItem {
  if !p.IsSetTransfer() {
    return TAccountStatement_Transfer_DEFAULT
  }
return p.Transfer
}
var TAccountStatement_Engine_DEFAULT *TAccountStatementItem
func (p *TAccountStatement) GetEngine() *TAccountStatementItem {
  if !p.IsSetEngine() {
    return TAccountStatement_Engine_DEFAULT
  }
return p.Engine
}
func (p *TAccountStatement) IsSetBlockChain() bool {
  return p.BlockChain != nil
}

func (p *TAccountStatement) IsSetWallet() bool {
  return p.Wallet != nil
}

func (p *TAccountStatement) IsSetTransfer() bool {
  return p.Transfer != nil
}

func (p *TAccountStatement) IsSetEngine() bool {
  return p.Engine != nil
}

func (p *TAccountStatement) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountStatement)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TAccountStatement)  ReadField2(iprot thrift.TProtocol) error {
  p.BlockChain = &TAccountStatementItem{}
  if err := p.BlockChain.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BlockChain), err)
  }
  return nil
}

func (p *TAccountStatement)  ReadField3(iprot thrift.TProtocol) error {
  p.Wallet = &TAccountStatementItem{}
  if err := p.Wallet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Wallet), err)
  }
  return nil
}

func (p *TAccountStatement)  ReadField4(iprot thrift.TProtocol) error {
  p.Transfer = &TAccountStatementItem{}
  if err := p.Transfer.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transfer), err)
  }
  return nil
}

func (p *TAccountStatement)  ReadField5(iprot thrift.TProtocol) error {
  p.Engine = &TAccountStatementItem{}
  if err := p.Engine.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Engine), err)
  }
  return nil
}

func (p *TAccountStatement) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAccountStatement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountStatement) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currency: ", p), err) }
  return err
}

func (p *TAccountStatement) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blockChain", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockChain: ", p), err) }
  if err := p.BlockChain.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BlockChain), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockChain: ", p), err) }
  return err
}

func (p *TAccountStatement) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wallet", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wallet: ", p), err) }
  if err := p.Wallet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Wallet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wallet: ", p), err) }
  return err
}

func (p *TAccountStatement) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transfer", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transfer: ", p), err) }
  if err := p.Transfer.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transfer), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transfer: ", p), err) }
  return err
}

func (p *TAccountStatement) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("engine", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:engine: ", p), err) }
  if err := p.Engine.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Engine), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:engine: ", p), err) }
  return err
}

func (p *TAccountStatement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountStatement(%+v)", *p)
}

type TAccountStatementService interface {
  // Parameters:
  //  - Param
  SelectAccountStatement(ctx context.Context, param *TAccountStatementParams) (r []*TAccountStatement, err error)
}

type TAccountStatementServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTAccountStatementService instead
func NewTAccountStatementServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TAccountStatementServiceClient {
  return &TAccountStatementServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTAccountStatementService instead
func NewTAccountStatementServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TAccountStatementServiceClient {
  return &TAccountStatementServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTAccountStatementServiceClient(c thrift.TClient) *TAccountStatementServiceClient {
  return &TAccountStatementServiceClient{
    c: c,
  }
}

// Parameters:
//  - Param
func (p *TAccountStatementServiceClient) SelectAccountStatement(ctx context.Context, param *TAccountStatementParams) (r []*TAccountStatement, err error) {
  var _args0 TAccountStatementServiceSelectAccountStatementArgs
  _args0.Param = param
  var _result1 TAccountStatementServiceSelectAccountStatementResult
  if err = p.c.Call(ctx, "selectAccountStatement", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

type TAccountStatementServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TAccountStatementService
}

func (p *TAccountStatementServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TAccountStatementServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TAccountStatementServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTAccountStatementServiceProcessor(handler TAccountStatementService) *TAccountStatementServiceProcessor {

  self2 := &TAccountStatementServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["selectAccountStatement"] = &tAccountStatementServiceProcessorSelectAccountStatement{handler:handler}
return self2
}

func (p *TAccountStatementServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x3

}

type tAccountStatementServiceProcessorSelectAccountStatement struct {
  handler TAccountStatementService
}

func (p *tAccountStatementServiceProcessorSelectAccountStatement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountStatementServiceSelectAccountStatementArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectAccountStatement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountStatementServiceSelectAccountStatementResult{}
var retval []*TAccountStatement
  var err2 error
  if retval, err2 = p.handler.SelectAccountStatement(ctx, args.Param); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectAccountStatement: " + err2.Error())
    oprot.WriteMessageBegin("selectAccountStatement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectAccountStatement", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Param
type TAccountStatementServiceSelectAccountStatementArgs struct {
  Param *TAccountStatementParams `thrift:"param,1" db:"param" json:"param"`
}

func NewTAccountStatementServiceSelectAccountStatementArgs() *TAccountStatementServiceSelectAccountStatementArgs {
  return &TAccountStatementServiceSelectAccountStatementArgs{}
}

var TAccountStatementServiceSelectAccountStatementArgs_Param_DEFAULT *TAccountStatementParams
func (p *TAccountStatementServiceSelectAccountStatementArgs) GetParam() *TAccountStatementParams {
  if !p.IsSetParam() {
    return TAccountStatementServiceSelectAccountStatementArgs_Param_DEFAULT
  }
return p.Param
}
func (p *TAccountStatementServiceSelectAccountStatementArgs) IsSetParam() bool {
  return p.Param != nil
}

func (p *TAccountStatementServiceSelectAccountStatementArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountStatementServiceSelectAccountStatementArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Param = &TAccountStatementParams{}
  if err := p.Param.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Param), err)
  }
  return nil
}

func (p *TAccountStatementServiceSelectAccountStatementArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectAccountStatement_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountStatementServiceSelectAccountStatementArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:param: ", p), err) }
  if err := p.Param.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Param), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:param: ", p), err) }
  return err
}

func (p *TAccountStatementServiceSelectAccountStatementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountStatementServiceSelectAccountStatementArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountStatementServiceSelectAccountStatementResult struct {
  Success []*TAccountStatement `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountStatementServiceSelectAccountStatementResult() *TAccountStatementServiceSelectAccountStatementResult {
  return &TAccountStatementServiceSelectAccountStatementResult{}
}

var TAccountStatementServiceSelectAccountStatementResult_Success_DEFAULT []*TAccountStatement

func (p *TAccountStatementServiceSelectAccountStatementResult) GetSuccess() []*TAccountStatement {
  return p.Success
}
func (p *TAccountStatementServiceSelectAccountStatementResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountStatementServiceSelectAccountStatementResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountStatementServiceSelectAccountStatementResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAccountStatement, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &TAccountStatement{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Success = append(p.Success, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAccountStatementServiceSelectAccountStatementResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectAccountStatement_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountStatementServiceSelectAccountStatementResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountStatementServiceSelectAccountStatementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountStatementServiceSelectAccountStatementResult(%+v)", *p)
}


