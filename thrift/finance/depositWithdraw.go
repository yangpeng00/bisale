// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package finance

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - UserId
//  - Type
//  - Currency
//  - Amount
//  - Status
//  - SourceAddress
//  - Address
//  - TxId
//  - Confirmations
//  - OutputIndex
//  - Fee
//  - NetworkFee
//  - DestinationTag
//  - Mark
//  - CreatedAt
//  - UpdatedAt
//  - Empty
type TDepositWithdraw struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Type string `thrift:"type,3" db:"type" json:"type"`
  Currency string `thrift:"currency,4" db:"currency" json:"currency"`
  Amount string `thrift:"amount,5" db:"amount" json:"amount"`
  Status string `thrift:"status,6" db:"status" json:"status"`
  SourceAddress string `thrift:"sourceAddress,7" db:"sourceAddress" json:"sourceAddress"`
  Address string `thrift:"address,8" db:"address" json:"address"`
  TxId string `thrift:"txId,9" db:"txId" json:"txId"`
  Confirmations int32 `thrift:"confirmations,10" db:"confirmations" json:"confirmations"`
  OutputIndex int32 `thrift:"outputIndex,11" db:"outputIndex" json:"outputIndex"`
  Fee string `thrift:"fee,12" db:"fee" json:"fee"`
  NetworkFee string `thrift:"networkFee,13" db:"networkFee" json:"networkFee"`
  DestinationTag int32 `thrift:"destinationTag,14" db:"destinationTag" json:"destinationTag"`
  Mark string `thrift:"mark,15" db:"mark" json:"mark"`
  CreatedAt string `thrift:"createdAt,16" db:"createdAt" json:"createdAt"`
  UpdatedAt string `thrift:"updatedAt,17" db:"updatedAt" json:"updatedAt"`
  Empty bool `thrift:"empty,18" db:"empty" json:"empty,omitempty"`
}

func NewTDepositWithdraw() *TDepositWithdraw {
  return &TDepositWithdraw{}
}


func (p *TDepositWithdraw) GetID() int32 {
  return p.ID
}

func (p *TDepositWithdraw) GetUserId() int32 {
  return p.UserId
}

func (p *TDepositWithdraw) GetType() string {
  return p.Type
}

func (p *TDepositWithdraw) GetCurrency() string {
  return p.Currency
}

func (p *TDepositWithdraw) GetAmount() string {
  return p.Amount
}

func (p *TDepositWithdraw) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdraw) GetSourceAddress() string {
  return p.SourceAddress
}

func (p *TDepositWithdraw) GetAddress() string {
  return p.Address
}

func (p *TDepositWithdraw) GetTxId() string {
  return p.TxId
}

func (p *TDepositWithdraw) GetConfirmations() int32 {
  return p.Confirmations
}

func (p *TDepositWithdraw) GetOutputIndex() int32 {
  return p.OutputIndex
}

func (p *TDepositWithdraw) GetFee() string {
  return p.Fee
}

func (p *TDepositWithdraw) GetNetworkFee() string {
  return p.NetworkFee
}

func (p *TDepositWithdraw) GetDestinationTag() int32 {
  return p.DestinationTag
}

func (p *TDepositWithdraw) GetMark() string {
  return p.Mark
}

func (p *TDepositWithdraw) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TDepositWithdraw) GetUpdatedAt() string {
  return p.UpdatedAt
}
var TDepositWithdraw_Empty_DEFAULT bool = false

func (p *TDepositWithdraw) GetEmpty() bool {
  return p.Empty
}
func (p *TDepositWithdraw) IsSetEmpty() bool {
  return p.Empty != TDepositWithdraw_Empty_DEFAULT
}

func (p *TDepositWithdraw) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdraw)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SourceAddress = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TxId = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Confirmations = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OutputIndex = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NetworkFee = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.DestinationTag = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TDepositWithdraw) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDepositWithdraw"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdraw) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:currency: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sourceAddress", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sourceAddress: ", p), err) }
  if err := oprot.WriteString(string(p.SourceAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sourceAddress (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sourceAddress: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:address: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txId", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:txId: ", p), err) }
  if err := oprot.WriteString(string(p.TxId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:txId: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("confirmations", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:confirmations: ", p), err) }
  if err := oprot.WriteI32(int32(p.Confirmations)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.confirmations (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:confirmations: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outputIndex", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:outputIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.OutputIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outputIndex (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:outputIndex: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fee: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkFee", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:networkFee: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkFee (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:networkFee: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destinationTag", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:destinationTag: ", p), err) }
  if err := oprot.WriteI32(int32(p.DestinationTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destinationTag (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:destinationTag: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:mark: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:createdAt: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:updatedAt: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:updatedAt: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:empty: ", p), err) }
  }
  return err
}

func (p *TDepositWithdraw) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdraw(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserName
//  - Status
//  - StartTime
//  - EndTime
//  - UserId
//  - Email
//  - Currency
//  - StartPage
//  - PageSize
//  - Type
type TDepositWithdrawParams struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserName string `thrift:"userName,2" db:"userName" json:"userName"`
  Status string `thrift:"status,3" db:"status" json:"status"`
  StartTime string `thrift:"startTime,4" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,5" db:"endTime" json:"endTime"`
  UserId int32 `thrift:"userId,6" db:"userId" json:"userId"`
  Email string `thrift:"email,7" db:"email" json:"email"`
  Currency string `thrift:"currency,8" db:"currency" json:"currency"`
  StartPage int32 `thrift:"startPage,9" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,10" db:"pageSize" json:"pageSize"`
  Type int32 `thrift:"type,11" db:"type" json:"type"`
}

func NewTDepositWithdrawParams() *TDepositWithdrawParams {
  return &TDepositWithdrawParams{}
}


func (p *TDepositWithdrawParams) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositWithdrawParams) GetUserName() string {
  return p.UserName
}

func (p *TDepositWithdrawParams) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdrawParams) GetStartTime() string {
  return p.StartTime
}

func (p *TDepositWithdrawParams) GetEndTime() string {
  return p.EndTime
}

func (p *TDepositWithdrawParams) GetUserId() int32 {
  return p.UserId
}

func (p *TDepositWithdrawParams) GetEmail() string {
  return p.Email
}

func (p *TDepositWithdrawParams) GetCurrency() string {
  return p.Currency
}

func (p *TDepositWithdrawParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TDepositWithdrawParams) GetPageSize() int32 {
  return p.PageSize
}

func (p *TDepositWithdrawParams) GetType() int32 {
  return p.Type
}
func (p *TDepositWithdrawParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TDepositWithdrawParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDepositWithdrawParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startTime: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:endTime: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userId: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:email: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:currency: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startPage: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pageSize: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:type: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawParams(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserId
//  - Email
//  - Currency
//  - Amount
//  - Address
//  - CreatedAt
//  - Status
//  - Mark
//  - TxId
//  - Empty
//  - TotalAmount
//  - NetworkFee
//  - Fee
//  - SourceAddress
//  - DestinationTag
//  - Confirmations
type TDepositWithdrawResult_ struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Currency string `thrift:"currency,4" db:"currency" json:"currency"`
  Amount string `thrift:"amount,5" db:"amount" json:"amount"`
  Address string `thrift:"address,6" db:"address" json:"address"`
  CreatedAt string `thrift:"createdAt,7" db:"createdAt" json:"createdAt"`
  Status string `thrift:"status,8" db:"status" json:"status"`
  Mark string `thrift:"mark,9" db:"mark" json:"mark"`
  TxId string `thrift:"txId,10" db:"txId" json:"txId"`
  Empty bool `thrift:"empty,11" db:"empty" json:"empty,omitempty"`
  TotalAmount string `thrift:"totalAmount,12" db:"totalAmount" json:"totalAmount"`
  NetworkFee string `thrift:"networkFee,13" db:"networkFee" json:"networkFee"`
  Fee string `thrift:"fee,14" db:"fee" json:"fee"`
  SourceAddress string `thrift:"sourceAddress,15" db:"sourceAddress" json:"sourceAddress"`
  DestinationTag string `thrift:"destinationTag,16" db:"destinationTag" json:"destinationTag"`
  Confirmations int32 `thrift:"confirmations,17" db:"confirmations" json:"confirmations"`
}

func NewTDepositWithdrawResult_() *TDepositWithdrawResult_ {
  return &TDepositWithdrawResult_{}
}


func (p *TDepositWithdrawResult_) GetID() int32 {
  return p.ID
}

func (p *TDepositWithdrawResult_) GetUserId() int32 {
  return p.UserId
}

func (p *TDepositWithdrawResult_) GetEmail() string {
  return p.Email
}

func (p *TDepositWithdrawResult_) GetCurrency() string {
  return p.Currency
}

func (p *TDepositWithdrawResult_) GetAmount() string {
  return p.Amount
}

func (p *TDepositWithdrawResult_) GetAddress() string {
  return p.Address
}

func (p *TDepositWithdrawResult_) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TDepositWithdrawResult_) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdrawResult_) GetMark() string {
  return p.Mark
}

func (p *TDepositWithdrawResult_) GetTxId() string {
  return p.TxId
}
var TDepositWithdrawResult__Empty_DEFAULT bool = false

func (p *TDepositWithdrawResult_) GetEmpty() bool {
  return p.Empty
}

func (p *TDepositWithdrawResult_) GetTotalAmount() string {
  return p.TotalAmount
}

func (p *TDepositWithdrawResult_) GetNetworkFee() string {
  return p.NetworkFee
}

func (p *TDepositWithdrawResult_) GetFee() string {
  return p.Fee
}

func (p *TDepositWithdrawResult_) GetSourceAddress() string {
  return p.SourceAddress
}

func (p *TDepositWithdrawResult_) GetDestinationTag() string {
  return p.DestinationTag
}

func (p *TDepositWithdrawResult_) GetConfirmations() int32 {
  return p.Confirmations
}
func (p *TDepositWithdrawResult_) IsSetEmpty() bool {
  return p.Empty != TDepositWithdrawResult__Empty_DEFAULT
}

func (p *TDepositWithdrawResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TxId = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TotalAmount = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NetworkFee = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.SourceAddress = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.DestinationTag = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Confirmations = v
}
  return nil
}

func (p *TDepositWithdrawResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDepositWithdrawResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:currency: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:address: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createdAt: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:mark: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txId", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:txId: ", p), err) }
  if err := oprot.WriteString(string(p.TxId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:txId: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:empty: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawResult_) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalAmount", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:totalAmount: ", p), err) }
  if err := oprot.WriteString(string(p.TotalAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalAmount (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:totalAmount: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkFee", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:networkFee: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkFee (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:networkFee: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:fee: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sourceAddress", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:sourceAddress: ", p), err) }
  if err := oprot.WriteString(string(p.SourceAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sourceAddress (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:sourceAddress: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destinationTag", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:destinationTag: ", p), err) }
  if err := oprot.WriteString(string(p.DestinationTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destinationTag (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:destinationTag: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("confirmations", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:confirmations: ", p), err) }
  if err := oprot.WriteI32(int32(p.Confirmations)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.confirmations (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:confirmations: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawResult_(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - StartDate
//  - EndDate
//  - UserId
//  - Email
//  - StartPage
//  - PageSize
//  - Sort
//  - CurrentDate
type TTradeAwardParams struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  StartDate string `thrift:"startDate,2" db:"startDate" json:"startDate"`
  EndDate string `thrift:"endDate,3" db:"endDate" json:"endDate"`
  UserId int32 `thrift:"userId,4" db:"userId" json:"userId"`
  Email string `thrift:"email,5" db:"email" json:"email"`
  StartPage int32 `thrift:"startPage,6" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,7" db:"pageSize" json:"pageSize"`
  Sort string `thrift:"sort,8" db:"sort" json:"sort"`
  CurrentDate string `thrift:"currentDate,9" db:"currentDate" json:"currentDate"`
}

func NewTTradeAwardParams() *TTradeAwardParams {
  return &TTradeAwardParams{}
}


func (p *TTradeAwardParams) GetTraceId() string {
  return p.TraceId
}

func (p *TTradeAwardParams) GetStartDate() string {
  return p.StartDate
}

func (p *TTradeAwardParams) GetEndDate() string {
  return p.EndDate
}

func (p *TTradeAwardParams) GetUserId() int32 {
  return p.UserId
}

func (p *TTradeAwardParams) GetEmail() string {
  return p.Email
}

func (p *TTradeAwardParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TTradeAwardParams) GetPageSize() int32 {
  return p.PageSize
}

func (p *TTradeAwardParams) GetSort() string {
  return p.Sort
}

func (p *TTradeAwardParams) GetCurrentDate() string {
  return p.CurrentDate
}
func (p *TTradeAwardParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeAwardParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TTradeAwardParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartDate = v
}
  return nil
}

func (p *TTradeAwardParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndDate = v
}
  return nil
}

func (p *TTradeAwardParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TTradeAwardParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TTradeAwardParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TTradeAwardParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TTradeAwardParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Sort = v
}
  return nil
}

func (p *TTradeAwardParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CurrentDate = v
}
  return nil
}

func (p *TTradeAwardParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTradeAwardParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeAwardParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TTradeAwardParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startDate", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startDate: ", p), err) }
  if err := oprot.WriteString(string(p.StartDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startDate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startDate: ", p), err) }
  return err
}

func (p *TTradeAwardParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endDate", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endDate: ", p), err) }
  if err := oprot.WriteString(string(p.EndDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endDate (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endDate: ", p), err) }
  return err
}

func (p *TTradeAwardParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userId: ", p), err) }
  return err
}

func (p *TTradeAwardParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:email: ", p), err) }
  return err
}

func (p *TTradeAwardParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:startPage: ", p), err) }
  return err
}

func (p *TTradeAwardParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pageSize: ", p), err) }
  return err
}

func (p *TTradeAwardParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sort", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sort: ", p), err) }
  if err := oprot.WriteString(string(p.Sort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sort (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sort: ", p), err) }
  return err
}

func (p *TTradeAwardParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currentDate", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:currentDate: ", p), err) }
  if err := oprot.WriteString(string(p.CurrentDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currentDate (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:currentDate: ", p), err) }
  return err
}

func (p *TTradeAwardParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeAwardParams(%+v)", *p)
}

// Attributes:
//  - GetDate
//  - TotalAward
//  - PartNumber
//  - Status
type TTradeAwardDaysListResult_ struct {
  GetDate string `thrift:"getDate,1" db:"getDate" json:"getDate"`
  TotalAward string `thrift:"totalAward,2" db:"totalAward" json:"totalAward"`
  PartNumber int32 `thrift:"partNumber,3" db:"partNumber" json:"partNumber"`
  Status int32 `thrift:"status,4" db:"status" json:"status"`
}

func NewTTradeAwardDaysListResult_() *TTradeAwardDaysListResult_ {
  return &TTradeAwardDaysListResult_{}
}


func (p *TTradeAwardDaysListResult_) GetGetDate() string {
  return p.GetDate
}

func (p *TTradeAwardDaysListResult_) GetTotalAward() string {
  return p.TotalAward
}

func (p *TTradeAwardDaysListResult_) GetPartNumber() int32 {
  return p.PartNumber
}

func (p *TTradeAwardDaysListResult_) GetStatus() int32 {
  return p.Status
}
func (p *TTradeAwardDaysListResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeAwardDaysListResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GetDate = v
}
  return nil
}

func (p *TTradeAwardDaysListResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalAward = v
}
  return nil
}

func (p *TTradeAwardDaysListResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartNumber = v
}
  return nil
}

func (p *TTradeAwardDaysListResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TTradeAwardDaysListResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTradeAwardDaysListResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeAwardDaysListResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getDate", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getDate: ", p), err) }
  if err := oprot.WriteString(string(p.GetDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getDate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getDate: ", p), err) }
  return err
}

func (p *TTradeAwardDaysListResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalAward", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalAward: ", p), err) }
  if err := oprot.WriteString(string(p.TotalAward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalAward (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalAward: ", p), err) }
  return err
}

func (p *TTradeAwardDaysListResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partNumber", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partNumber: ", p), err) }
  return err
}

func (p *TTradeAwardDaysListResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *TTradeAwardDaysListResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeAwardDaysListResult_(%+v)", *p)
}

// Attributes:
//  - TotalNumber
//  - RecordNumber
type TTradeAwardDaysCountResult_ struct {
  TotalNumber string `thrift:"totalNumber,1" db:"totalNumber" json:"totalNumber"`
  RecordNumber int32 `thrift:"recordNumber,2" db:"recordNumber" json:"recordNumber"`
}

func NewTTradeAwardDaysCountResult_() *TTradeAwardDaysCountResult_ {
  return &TTradeAwardDaysCountResult_{}
}


func (p *TTradeAwardDaysCountResult_) GetTotalNumber() string {
  return p.TotalNumber
}

func (p *TTradeAwardDaysCountResult_) GetRecordNumber() int32 {
  return p.RecordNumber
}
func (p *TTradeAwardDaysCountResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeAwardDaysCountResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalNumber = v
}
  return nil
}

func (p *TTradeAwardDaysCountResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RecordNumber = v
}
  return nil
}

func (p *TTradeAwardDaysCountResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTradeAwardDaysCountResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeAwardDaysCountResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalNumber", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalNumber: ", p), err) }
  if err := oprot.WriteString(string(p.TotalNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalNumber: ", p), err) }
  return err
}

func (p *TTradeAwardDaysCountResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recordNumber", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recordNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.RecordNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recordNumber (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recordNumber: ", p), err) }
  return err
}

func (p *TTradeAwardDaysCountResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeAwardDaysCountResult_(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Email
//  - AwardNumber
type TTradeAwardDetailListResult_ struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  AwardNumber string `thrift:"awardNumber,3" db:"awardNumber" json:"awardNumber"`
}

func NewTTradeAwardDetailListResult_() *TTradeAwardDetailListResult_ {
  return &TTradeAwardDetailListResult_{}
}


func (p *TTradeAwardDetailListResult_) GetUserId() int32 {
  return p.UserId
}

func (p *TTradeAwardDetailListResult_) GetEmail() string {
  return p.Email
}

func (p *TTradeAwardDetailListResult_) GetAwardNumber() string {
  return p.AwardNumber
}
func (p *TTradeAwardDetailListResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeAwardDetailListResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TTradeAwardDetailListResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TTradeAwardDetailListResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AwardNumber = v
}
  return nil
}

func (p *TTradeAwardDetailListResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTradeAwardDetailListResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeAwardDetailListResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TTradeAwardDetailListResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *TTradeAwardDetailListResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("awardNumber", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:awardNumber: ", p), err) }
  if err := oprot.WriteString(string(p.AwardNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.awardNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:awardNumber: ", p), err) }
  return err
}

func (p *TTradeAwardDetailListResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeAwardDetailListResult_(%+v)", *p)
}

// Attributes:
//  - TotalAward
//  - CurrentDate
//  - RecordNumber
type TTradeAwardDetailCountResult_ struct {
  TotalAward string `thrift:"totalAward,1" db:"totalAward" json:"totalAward"`
  CurrentDate string `thrift:"currentDate,2" db:"currentDate" json:"currentDate"`
  RecordNumber int32 `thrift:"recordNumber,3" db:"recordNumber" json:"recordNumber"`
}

func NewTTradeAwardDetailCountResult_() *TTradeAwardDetailCountResult_ {
  return &TTradeAwardDetailCountResult_{}
}


func (p *TTradeAwardDetailCountResult_) GetTotalAward() string {
  return p.TotalAward
}

func (p *TTradeAwardDetailCountResult_) GetCurrentDate() string {
  return p.CurrentDate
}

func (p *TTradeAwardDetailCountResult_) GetRecordNumber() int32 {
  return p.RecordNumber
}
func (p *TTradeAwardDetailCountResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeAwardDetailCountResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalAward = v
}
  return nil
}

func (p *TTradeAwardDetailCountResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CurrentDate = v
}
  return nil
}

func (p *TTradeAwardDetailCountResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecordNumber = v
}
  return nil
}

func (p *TTradeAwardDetailCountResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTradeAwardDetailCountResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeAwardDetailCountResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalAward", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalAward: ", p), err) }
  if err := oprot.WriteString(string(p.TotalAward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalAward (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalAward: ", p), err) }
  return err
}

func (p *TTradeAwardDetailCountResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currentDate", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currentDate: ", p), err) }
  if err := oprot.WriteString(string(p.CurrentDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currentDate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currentDate: ", p), err) }
  return err
}

func (p *TTradeAwardDetailCountResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recordNumber", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recordNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.RecordNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recordNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recordNumber: ", p), err) }
  return err
}

func (p *TTradeAwardDetailCountResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeAwardDetailCountResult_(%+v)", *p)
}

// Attributes:
//  - Currency
//  - TotalAmount
type TDividedCurrencyResult_ struct {
  Currency string `thrift:"currency,1" db:"currency" json:"currency"`
  TotalAmount string `thrift:"totalAmount,2" db:"totalAmount" json:"totalAmount"`
}

func NewTDividedCurrencyResult_() *TDividedCurrencyResult_ {
  return &TDividedCurrencyResult_{}
}


func (p *TDividedCurrencyResult_) GetCurrency() string {
  return p.Currency
}

func (p *TDividedCurrencyResult_) GetTotalAmount() string {
  return p.TotalAmount
}
func (p *TDividedCurrencyResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDividedCurrencyResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDividedCurrencyResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalAmount = v
}
  return nil
}

func (p *TDividedCurrencyResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDividedCurrencyResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDividedCurrencyResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currency: ", p), err) }
  return err
}

func (p *TDividedCurrencyResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalAmount", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalAmount: ", p), err) }
  if err := oprot.WriteString(string(p.TotalAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalAmount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalAmount: ", p), err) }
  return err
}

func (p *TDividedCurrencyResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDividedCurrencyResult_(%+v)", *p)
}

// Attributes:
//  - GetDate
//  - CurrencyList
//  - PartNumber
type TDividedDaysListResult_ struct {
  GetDate string `thrift:"getDate,1" db:"getDate" json:"getDate"`
  CurrencyList []*TDividedCurrencyResult_ `thrift:"currencyList,2" db:"currencyList" json:"currencyList"`
  PartNumber int32 `thrift:"partNumber,3" db:"partNumber" json:"partNumber"`
}

func NewTDividedDaysListResult_() *TDividedDaysListResult_ {
  return &TDividedDaysListResult_{}
}


func (p *TDividedDaysListResult_) GetGetDate() string {
  return p.GetDate
}

func (p *TDividedDaysListResult_) GetCurrencyList() []*TDividedCurrencyResult_ {
  return p.CurrencyList
}

func (p *TDividedDaysListResult_) GetPartNumber() int32 {
  return p.PartNumber
}
func (p *TDividedDaysListResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDividedDaysListResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GetDate = v
}
  return nil
}

func (p *TDividedDaysListResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDividedCurrencyResult_, 0, size)
  p.CurrencyList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TDividedCurrencyResult_{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.CurrencyList = append(p.CurrencyList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDividedDaysListResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartNumber = v
}
  return nil
}

func (p *TDividedDaysListResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDividedDaysListResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDividedDaysListResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getDate", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getDate: ", p), err) }
  if err := oprot.WriteString(string(p.GetDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getDate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getDate: ", p), err) }
  return err
}

func (p *TDividedDaysListResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currencyList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CurrencyList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CurrencyList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currencyList: ", p), err) }
  return err
}

func (p *TDividedDaysListResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partNumber", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partNumber: ", p), err) }
  return err
}

func (p *TDividedDaysListResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDividedDaysListResult_(%+v)", *p)
}

// Attributes:
//  - RecordNumber
//  - CurrencyList
type TDividedDaysCountResult_ struct {
  RecordNumber int32 `thrift:"recordNumber,1" db:"recordNumber" json:"recordNumber"`
  CurrencyList []*TDividedCurrencyResult_ `thrift:"currencyList,2" db:"currencyList" json:"currencyList"`
}

func NewTDividedDaysCountResult_() *TDividedDaysCountResult_ {
  return &TDividedDaysCountResult_{}
}


func (p *TDividedDaysCountResult_) GetRecordNumber() int32 {
  return p.RecordNumber
}

func (p *TDividedDaysCountResult_) GetCurrencyList() []*TDividedCurrencyResult_ {
  return p.CurrencyList
}
func (p *TDividedDaysCountResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDividedDaysCountResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RecordNumber = v
}
  return nil
}

func (p *TDividedDaysCountResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDividedCurrencyResult_, 0, size)
  p.CurrencyList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TDividedCurrencyResult_{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.CurrencyList = append(p.CurrencyList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDividedDaysCountResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDividedDaysCountResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDividedDaysCountResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recordNumber", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:recordNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.RecordNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recordNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:recordNumber: ", p), err) }
  return err
}

func (p *TDividedDaysCountResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currencyList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CurrencyList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CurrencyList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currencyList: ", p), err) }
  return err
}

func (p *TDividedDaysCountResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDividedDaysCountResult_(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Email
//  - CurrencyList
type TDividedDaysDetailListResult_ struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  CurrencyList []*TDividedCurrencyResult_ `thrift:"currencyList,3" db:"currencyList" json:"currencyList"`
}

func NewTDividedDaysDetailListResult_() *TDividedDaysDetailListResult_ {
  return &TDividedDaysDetailListResult_{}
}


func (p *TDividedDaysDetailListResult_) GetUserId() int32 {
  return p.UserId
}

func (p *TDividedDaysDetailListResult_) GetEmail() string {
  return p.Email
}

func (p *TDividedDaysDetailListResult_) GetCurrencyList() []*TDividedCurrencyResult_ {
  return p.CurrencyList
}
func (p *TDividedDaysDetailListResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDividedDaysDetailListResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TDividedDaysDetailListResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TDividedDaysDetailListResult_)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDividedCurrencyResult_, 0, size)
  p.CurrencyList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TDividedCurrencyResult_{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.CurrencyList = append(p.CurrencyList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDividedDaysDetailListResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDividedDaysDetailListResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDividedDaysDetailListResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TDividedDaysDetailListResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *TDividedDaysDetailListResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currencyList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CurrencyList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CurrencyList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currencyList: ", p), err) }
  return err
}

func (p *TDividedDaysDetailListResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDividedDaysDetailListResult_(%+v)", *p)
}

// Attributes:
//  - CurrentDate
//  - PartNumber
//  - RecordNumber
type TDividedDaysDetailCountResult_ struct {
  CurrentDate string `thrift:"currentDate,1" db:"currentDate" json:"currentDate"`
  PartNumber int32 `thrift:"partNumber,2" db:"partNumber" json:"partNumber"`
  RecordNumber int32 `thrift:"recordNumber,3" db:"recordNumber" json:"recordNumber"`
}

func NewTDividedDaysDetailCountResult_() *TDividedDaysDetailCountResult_ {
  return &TDividedDaysDetailCountResult_{}
}


func (p *TDividedDaysDetailCountResult_) GetCurrentDate() string {
  return p.CurrentDate
}

func (p *TDividedDaysDetailCountResult_) GetPartNumber() int32 {
  return p.PartNumber
}

func (p *TDividedDaysDetailCountResult_) GetRecordNumber() int32 {
  return p.RecordNumber
}
func (p *TDividedDaysDetailCountResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDividedDaysDetailCountResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CurrentDate = v
}
  return nil
}

func (p *TDividedDaysDetailCountResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PartNumber = v
}
  return nil
}

func (p *TDividedDaysDetailCountResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecordNumber = v
}
  return nil
}

func (p *TDividedDaysDetailCountResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDividedDaysDetailCountResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDividedDaysDetailCountResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currentDate", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentDate: ", p), err) }
  if err := oprot.WriteString(string(p.CurrentDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currentDate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentDate: ", p), err) }
  return err
}

func (p *TDividedDaysDetailCountResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partNumber", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.PartNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partNumber (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partNumber: ", p), err) }
  return err
}

func (p *TDividedDaysDetailCountResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recordNumber", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recordNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.RecordNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recordNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recordNumber: ", p), err) }
  return err
}

func (p *TDividedDaysDetailCountResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDividedDaysDetailCountResult_(%+v)", *p)
}

type TDepositWithdrawService interface {
  // Parameters:
  //  - TraceId
  //  - ID
  SelectDepositWithdrawByPrimaryKey(ctx context.Context, traceId string, id int32) (r *TDepositWithdraw, err error)
  // Parameters:
  //  - TraceId
  //  - Status
  //  - Mark
  //  - WithdrawId
  AuditDepositWithdraw(ctx context.Context, traceId string, status string, mark string, withdrawId int32) (r bool, err error)
  // Parameters:
  //  - Params
  SelectDepositWithdrawByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error)
  // Parameters:
  //  - Params
  SelectDepositWithdrawCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error)
  // Parameters:
  //  - Params
  SelectSlaveDepositListByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error)
  // Parameters:
  //  - Params
  SelectSlaveDepositCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error)
  // Parameters:
  //  - Params
  SelectSlaveWithdrawListByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error)
  // Parameters:
  //  - Params
  SelectSlaveWithdrawLCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error)
  // Parameters:
  //  - Params
  SelectTradeAwardDaysList(ctx context.Context, params *TTradeAwardParams) (r []*TTradeAwardDaysListResult_, err error)
  // Parameters:
  //  - Params
  SelectTradeAwardDaysCount(ctx context.Context, params *TTradeAwardParams) (r *TTradeAwardDaysCountResult_, err error)
  // Parameters:
  //  - Params
  SelectTradeAwardDaysDetailList(ctx context.Context, params *TTradeAwardParams) (r []*TTradeAwardDetailListResult_, err error)
  // Parameters:
  //  - Params
  SelectTradeAwardDaysDetailCount(ctx context.Context, params *TTradeAwardParams) (r *TTradeAwardDetailCountResult_, err error)
  // Parameters:
  //  - Params
  SelectDividedDaysList(ctx context.Context, params *TTradeAwardParams) (r []*TDividedDaysListResult_, err error)
  // Parameters:
  //  - Params
  SelectDividedDaysCount(ctx context.Context, params *TTradeAwardParams) (r *TDividedDaysCountResult_, err error)
  // Parameters:
  //  - Params
  SelectDividedDaysDetailList(ctx context.Context, params *TTradeAwardParams) (r []*TDividedDaysDetailListResult_, err error)
  // Parameters:
  //  - Params
  SelectDividedDaysDetailCount(ctx context.Context, params *TTradeAwardParams) (r *TDividedDaysDetailCountResult_, err error)
}

type TDepositWithdrawServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTDepositWithdrawService instead
func NewTDepositWithdrawServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDepositWithdrawServiceClient {
  return &TDepositWithdrawServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTDepositWithdrawService instead
func NewTDepositWithdrawServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDepositWithdrawServiceClient {
  return &TDepositWithdrawServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDepositWithdrawServiceClient(c thrift.TClient) *TDepositWithdrawServiceClient {
  return &TDepositWithdrawServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - ID
func (p *TDepositWithdrawServiceClient) SelectDepositWithdrawByPrimaryKey(ctx context.Context, traceId string, id int32) (r *TDepositWithdraw, err error) {
  var _args3 TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs
  _args3.TraceId = traceId
  _args3.ID = id
  var _result4 TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult
  if err = p.c.Call(ctx, "selectDepositWithdrawByPrimaryKey", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Status
//  - Mark
//  - WithdrawId
func (p *TDepositWithdrawServiceClient) AuditDepositWithdraw(ctx context.Context, traceId string, status string, mark string, withdrawId int32) (r bool, err error) {
  var _args5 TDepositWithdrawServiceAuditDepositWithdrawArgs
  _args5.TraceId = traceId
  _args5.Status = status
  _args5.Mark = mark
  _args5.WithdrawId = withdrawId
  var _result6 TDepositWithdrawServiceAuditDepositWithdrawResult
  if err = p.c.Call(ctx, "auditDepositWithdraw", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectDepositWithdrawByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error) {
  var _args7 TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs
  _args7.Params = params
  var _result8 TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult
  if err = p.c.Call(ctx, "selectDepositWithdrawByConditions", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectDepositWithdrawCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error) {
  var _args9 TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs
  _args9.Params = params
  var _result10 TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult
  if err = p.c.Call(ctx, "selectDepositWithdrawCountByConditions", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectSlaveDepositListByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error) {
  var _args11 TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs
  _args11.Params = params
  var _result12 TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult
  if err = p.c.Call(ctx, "selectSlaveDepositListByConditions", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectSlaveDepositCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error) {
  var _args13 TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs
  _args13.Params = params
  var _result14 TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult
  if err = p.c.Call(ctx, "selectSlaveDepositCountByConditions", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectSlaveWithdrawListByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error) {
  var _args15 TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs
  _args15.Params = params
  var _result16 TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult
  if err = p.c.Call(ctx, "selectSlaveWithdrawListByConditions", &_args15, &_result16); err != nil {
    return
  }
  return _result16.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectSlaveWithdrawLCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error) {
  var _args17 TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs
  _args17.Params = params
  var _result18 TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult
  if err = p.c.Call(ctx, "selectSlaveWithdrawLCountByConditions", &_args17, &_result18); err != nil {
    return
  }
  return _result18.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectTradeAwardDaysList(ctx context.Context, params *TTradeAwardParams) (r []*TTradeAwardDaysListResult_, err error) {
  var _args19 TDepositWithdrawServiceSelectTradeAwardDaysListArgs
  _args19.Params = params
  var _result20 TDepositWithdrawServiceSelectTradeAwardDaysListResult
  if err = p.c.Call(ctx, "selectTradeAwardDaysList", &_args19, &_result20); err != nil {
    return
  }
  return _result20.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectTradeAwardDaysCount(ctx context.Context, params *TTradeAwardParams) (r *TTradeAwardDaysCountResult_, err error) {
  var _args21 TDepositWithdrawServiceSelectTradeAwardDaysCountArgs
  _args21.Params = params
  var _result22 TDepositWithdrawServiceSelectTradeAwardDaysCountResult
  if err = p.c.Call(ctx, "selectTradeAwardDaysCount", &_args21, &_result22); err != nil {
    return
  }
  return _result22.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectTradeAwardDaysDetailList(ctx context.Context, params *TTradeAwardParams) (r []*TTradeAwardDetailListResult_, err error) {
  var _args23 TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs
  _args23.Params = params
  var _result24 TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult
  if err = p.c.Call(ctx, "selectTradeAwardDaysDetailList", &_args23, &_result24); err != nil {
    return
  }
  return _result24.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectTradeAwardDaysDetailCount(ctx context.Context, params *TTradeAwardParams) (r *TTradeAwardDetailCountResult_, err error) {
  var _args25 TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs
  _args25.Params = params
  var _result26 TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult
  if err = p.c.Call(ctx, "selectTradeAwardDaysDetailCount", &_args25, &_result26); err != nil {
    return
  }
  return _result26.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectDividedDaysList(ctx context.Context, params *TTradeAwardParams) (r []*TDividedDaysListResult_, err error) {
  var _args27 TDepositWithdrawServiceSelectDividedDaysListArgs
  _args27.Params = params
  var _result28 TDepositWithdrawServiceSelectDividedDaysListResult
  if err = p.c.Call(ctx, "selectDividedDaysList", &_args27, &_result28); err != nil {
    return
  }
  return _result28.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectDividedDaysCount(ctx context.Context, params *TTradeAwardParams) (r *TDividedDaysCountResult_, err error) {
  var _args29 TDepositWithdrawServiceSelectDividedDaysCountArgs
  _args29.Params = params
  var _result30 TDepositWithdrawServiceSelectDividedDaysCountResult
  if err = p.c.Call(ctx, "selectDividedDaysCount", &_args29, &_result30); err != nil {
    return
  }
  return _result30.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectDividedDaysDetailList(ctx context.Context, params *TTradeAwardParams) (r []*TDividedDaysDetailListResult_, err error) {
  var _args31 TDepositWithdrawServiceSelectDividedDaysDetailListArgs
  _args31.Params = params
  var _result32 TDepositWithdrawServiceSelectDividedDaysDetailListResult
  if err = p.c.Call(ctx, "selectDividedDaysDetailList", &_args31, &_result32); err != nil {
    return
  }
  return _result32.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectDividedDaysDetailCount(ctx context.Context, params *TTradeAwardParams) (r *TDividedDaysDetailCountResult_, err error) {
  var _args33 TDepositWithdrawServiceSelectDividedDaysDetailCountArgs
  _args33.Params = params
  var _result34 TDepositWithdrawServiceSelectDividedDaysDetailCountResult
  if err = p.c.Call(ctx, "selectDividedDaysDetailCount", &_args33, &_result34); err != nil {
    return
  }
  return _result34.GetSuccess(), nil
}

type TDepositWithdrawServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDepositWithdrawService
}

func (p *TDepositWithdrawServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDepositWithdrawServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDepositWithdrawServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDepositWithdrawServiceProcessor(handler TDepositWithdrawService) *TDepositWithdrawServiceProcessor {

  self35 := &TDepositWithdrawServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self35.processorMap["selectDepositWithdrawByPrimaryKey"] = &tDepositWithdrawServiceProcessorSelectDepositWithdrawByPrimaryKey{handler:handler}
  self35.processorMap["auditDepositWithdraw"] = &tDepositWithdrawServiceProcessorAuditDepositWithdraw{handler:handler}
  self35.processorMap["selectDepositWithdrawByConditions"] = &tDepositWithdrawServiceProcessorSelectDepositWithdrawByConditions{handler:handler}
  self35.processorMap["selectDepositWithdrawCountByConditions"] = &tDepositWithdrawServiceProcessorSelectDepositWithdrawCountByConditions{handler:handler}
  self35.processorMap["selectSlaveDepositListByConditions"] = &tDepositWithdrawServiceProcessorSelectSlaveDepositListByConditions{handler:handler}
  self35.processorMap["selectSlaveDepositCountByConditions"] = &tDepositWithdrawServiceProcessorSelectSlaveDepositCountByConditions{handler:handler}
  self35.processorMap["selectSlaveWithdrawListByConditions"] = &tDepositWithdrawServiceProcessorSelectSlaveWithdrawListByConditions{handler:handler}
  self35.processorMap["selectSlaveWithdrawLCountByConditions"] = &tDepositWithdrawServiceProcessorSelectSlaveWithdrawLCountByConditions{handler:handler}
  self35.processorMap["selectTradeAwardDaysList"] = &tDepositWithdrawServiceProcessorSelectTradeAwardDaysList{handler:handler}
  self35.processorMap["selectTradeAwardDaysCount"] = &tDepositWithdrawServiceProcessorSelectTradeAwardDaysCount{handler:handler}
  self35.processorMap["selectTradeAwardDaysDetailList"] = &tDepositWithdrawServiceProcessorSelectTradeAwardDaysDetailList{handler:handler}
  self35.processorMap["selectTradeAwardDaysDetailCount"] = &tDepositWithdrawServiceProcessorSelectTradeAwardDaysDetailCount{handler:handler}
  self35.processorMap["selectDividedDaysList"] = &tDepositWithdrawServiceProcessorSelectDividedDaysList{handler:handler}
  self35.processorMap["selectDividedDaysCount"] = &tDepositWithdrawServiceProcessorSelectDividedDaysCount{handler:handler}
  self35.processorMap["selectDividedDaysDetailList"] = &tDepositWithdrawServiceProcessorSelectDividedDaysDetailList{handler:handler}
  self35.processorMap["selectDividedDaysDetailCount"] = &tDepositWithdrawServiceProcessorSelectDividedDaysDetailCount{handler:handler}
return self35
}

func (p *TDepositWithdrawServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x36 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x36.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x36

}

type tDepositWithdrawServiceProcessorSelectDepositWithdrawByPrimaryKey struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDepositWithdrawByPrimaryKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawByPrimaryKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult{}
var retval *TDepositWithdraw
  var err2 error
  if retval, err2 = p.handler.SelectDepositWithdrawByPrimaryKey(ctx, args.TraceId, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDepositWithdrawByPrimaryKey: " + err2.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawByPrimaryKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectDepositWithdrawByPrimaryKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorAuditDepositWithdraw struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorAuditDepositWithdraw) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceAuditDepositWithdrawArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("auditDepositWithdraw", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceAuditDepositWithdrawResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AuditDepositWithdraw(ctx, args.TraceId, args.Status, args.Mark, args.WithdrawId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing auditDepositWithdraw: " + err2.Error())
    oprot.WriteMessageBegin("auditDepositWithdraw", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("auditDepositWithdraw", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectDepositWithdrawByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDepositWithdrawByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult{}
var retval []*TDepositWithdrawResult_
  var err2 error
  if retval, err2 = p.handler.SelectDepositWithdrawByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDepositWithdrawByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectDepositWithdrawByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectDepositWithdrawCountByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDepositWithdrawCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectDepositWithdrawCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDepositWithdrawCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectDepositWithdrawCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectSlaveDepositListByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectSlaveDepositListByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveDepositListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult{}
var retval []*TDepositWithdrawResult_
  var err2 error
  if retval, err2 = p.handler.SelectSlaveDepositListByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveDepositListByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveDepositListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveDepositListByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectSlaveDepositCountByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectSlaveDepositCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveDepositCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectSlaveDepositCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveDepositCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveDepositCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveDepositCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectSlaveWithdrawListByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectSlaveWithdrawListByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveWithdrawListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult{}
var retval []*TDepositWithdrawResult_
  var err2 error
  if retval, err2 = p.handler.SelectSlaveWithdrawListByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveWithdrawListByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveWithdrawListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveWithdrawListByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectSlaveWithdrawLCountByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectSlaveWithdrawLCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveWithdrawLCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectSlaveWithdrawLCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveWithdrawLCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveWithdrawLCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveWithdrawLCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectTradeAwardDaysList struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectTradeAwardDaysList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectTradeAwardDaysListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectTradeAwardDaysList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectTradeAwardDaysListResult{}
var retval []*TTradeAwardDaysListResult_
  var err2 error
  if retval, err2 = p.handler.SelectTradeAwardDaysList(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectTradeAwardDaysList: " + err2.Error())
    oprot.WriteMessageBegin("selectTradeAwardDaysList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectTradeAwardDaysList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectTradeAwardDaysCount struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectTradeAwardDaysCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectTradeAwardDaysCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectTradeAwardDaysCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectTradeAwardDaysCountResult{}
var retval *TTradeAwardDaysCountResult_
  var err2 error
  if retval, err2 = p.handler.SelectTradeAwardDaysCount(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectTradeAwardDaysCount: " + err2.Error())
    oprot.WriteMessageBegin("selectTradeAwardDaysCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectTradeAwardDaysCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectTradeAwardDaysDetailList struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectTradeAwardDaysDetailList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectTradeAwardDaysDetailList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult{}
var retval []*TTradeAwardDetailListResult_
  var err2 error
  if retval, err2 = p.handler.SelectTradeAwardDaysDetailList(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectTradeAwardDaysDetailList: " + err2.Error())
    oprot.WriteMessageBegin("selectTradeAwardDaysDetailList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectTradeAwardDaysDetailList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectTradeAwardDaysDetailCount struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectTradeAwardDaysDetailCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectTradeAwardDaysDetailCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult{}
var retval *TTradeAwardDetailCountResult_
  var err2 error
  if retval, err2 = p.handler.SelectTradeAwardDaysDetailCount(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectTradeAwardDaysDetailCount: " + err2.Error())
    oprot.WriteMessageBegin("selectTradeAwardDaysDetailCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectTradeAwardDaysDetailCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectDividedDaysList struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDividedDaysList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDividedDaysListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDividedDaysList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDividedDaysListResult{}
var retval []*TDividedDaysListResult_
  var err2 error
  if retval, err2 = p.handler.SelectDividedDaysList(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDividedDaysList: " + err2.Error())
    oprot.WriteMessageBegin("selectDividedDaysList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectDividedDaysList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectDividedDaysCount struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDividedDaysCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDividedDaysCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDividedDaysCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDividedDaysCountResult{}
var retval *TDividedDaysCountResult_
  var err2 error
  if retval, err2 = p.handler.SelectDividedDaysCount(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDividedDaysCount: " + err2.Error())
    oprot.WriteMessageBegin("selectDividedDaysCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectDividedDaysCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectDividedDaysDetailList struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDividedDaysDetailList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDividedDaysDetailListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDividedDaysDetailList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDividedDaysDetailListResult{}
var retval []*TDividedDaysDetailListResult_
  var err2 error
  if retval, err2 = p.handler.SelectDividedDaysDetailList(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDividedDaysDetailList: " + err2.Error())
    oprot.WriteMessageBegin("selectDividedDaysDetailList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectDividedDaysDetailList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectDividedDaysDetailCount struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDividedDaysDetailCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDividedDaysDetailCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDividedDaysDetailCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDividedDaysDetailCountResult{}
var retval *TDividedDaysDetailCountResult_
  var err2 error
  if retval, err2 = p.handler.SelectDividedDaysDetailCount(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDividedDaysDetailCount: " + err2.Error())
    oprot.WriteMessageBegin("selectDividedDaysDetailCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectDividedDaysDetailCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - ID
type TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs() *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs {
  return &TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs{}
}


func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) GetID() int32 {
  return p.ID
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawByPrimaryKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult struct {
  Success *TDepositWithdraw `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult() *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult {
  return &TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult{}
}

var TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult_Success_DEFAULT *TDepositWithdraw
func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) GetSuccess() *TDepositWithdraw {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDepositWithdraw{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawByPrimaryKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Status
//  - Mark
//  - WithdrawId
type TDepositWithdrawServiceAuditDepositWithdrawArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Status string `thrift:"status,2" db:"status" json:"status"`
  Mark string `thrift:"mark,3" db:"mark" json:"mark"`
  WithdrawId int32 `thrift:"withdrawId,4" db:"withdrawId" json:"withdrawId"`
}

func NewTDepositWithdrawServiceAuditDepositWithdrawArgs() *TDepositWithdrawServiceAuditDepositWithdrawArgs {
  return &TDepositWithdrawServiceAuditDepositWithdrawArgs{}
}


func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) GetMark() string {
  return p.Mark
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) GetWithdrawId() int32 {
  return p.WithdrawId
}
func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.WithdrawId = v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("auditDepositWithdraw_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mark: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:withdrawId: ", p), err) }
  if err := oprot.WriteI32(int32(p.WithdrawId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:withdrawId: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceAuditDepositWithdrawArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceAuditDepositWithdrawResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceAuditDepositWithdrawResult() *TDepositWithdrawServiceAuditDepositWithdrawResult {
  return &TDepositWithdrawServiceAuditDepositWithdrawResult{}
}

var TDepositWithdrawServiceAuditDepositWithdrawResult_Success_DEFAULT bool
func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceAuditDepositWithdrawResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("auditDepositWithdraw_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceAuditDepositWithdrawResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs() *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs {
  return &TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs{}
}

var TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult struct {
  Success []*TDepositWithdrawResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawByConditionsResult() *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult {
  return &TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult{}
}

var TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult_Success_DEFAULT []*TDepositWithdrawResult_

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) GetSuccess() []*TDepositWithdrawResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdrawResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem37 := &TDepositWithdrawResult_{}
    if err := _elem37.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
    }
    p.Success = append(p.Success, _elem37)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs() *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs {
  return &TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs{}
}

var TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult() *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult {
  return &TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult{}
}

var TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult_Success_DEFAULT int32
func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs() *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs {
  return &TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs{}
}

var TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveDepositListByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult struct {
  Success []*TDepositWithdrawResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectSlaveDepositListByConditionsResult() *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult {
  return &TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult{}
}

var TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult_Success_DEFAULT []*TDepositWithdrawResult_

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) GetSuccess() []*TDepositWithdrawResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdrawResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem38 := &TDepositWithdrawResult_{}
    if err := _elem38.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
    }
    p.Success = append(p.Success, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveDepositListByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs() *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs {
  return &TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs{}
}

var TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveDepositCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult() *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult {
  return &TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult{}
}

var TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult_Success_DEFAULT int32
func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveDepositCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs() *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs {
  return &TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs{}
}

var TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveWithdrawListByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult struct {
  Success []*TDepositWithdrawResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult() *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult {
  return &TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult{}
}

var TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult_Success_DEFAULT []*TDepositWithdrawResult_

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) GetSuccess() []*TDepositWithdrawResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdrawResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem39 := &TDepositWithdrawResult_{}
    if err := _elem39.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
    }
    p.Success = append(p.Success, _elem39)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveWithdrawListByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs() *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs {
  return &TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs{}
}

var TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveWithdrawLCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult() *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult {
  return &TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult{}
}

var TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult_Success_DEFAULT int32
func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveWithdrawLCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectTradeAwardDaysListArgs struct {
  Params *TTradeAwardParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectTradeAwardDaysListArgs() *TDepositWithdrawServiceSelectTradeAwardDaysListArgs {
  return &TDepositWithdrawServiceSelectTradeAwardDaysListArgs{}
}

var TDepositWithdrawServiceSelectTradeAwardDaysListArgs_Params_DEFAULT *TTradeAwardParams
func (p *TDepositWithdrawServiceSelectTradeAwardDaysListArgs) GetParams() *TTradeAwardParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectTradeAwardDaysListArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectTradeAwardDaysListArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeAwardParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeAwardDaysList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectTradeAwardDaysListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectTradeAwardDaysListResult struct {
  Success []*TTradeAwardDaysListResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectTradeAwardDaysListResult() *TDepositWithdrawServiceSelectTradeAwardDaysListResult {
  return &TDepositWithdrawServiceSelectTradeAwardDaysListResult{}
}

var TDepositWithdrawServiceSelectTradeAwardDaysListResult_Success_DEFAULT []*TTradeAwardDaysListResult_

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListResult) GetSuccess() []*TTradeAwardDaysListResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectTradeAwardDaysListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTradeAwardDaysListResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem40 := &TTradeAwardDaysListResult_{}
    if err := _elem40.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
    }
    p.Success = append(p.Success, _elem40)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeAwardDaysList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectTradeAwardDaysListResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectTradeAwardDaysCountArgs struct {
  Params *TTradeAwardParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectTradeAwardDaysCountArgs() *TDepositWithdrawServiceSelectTradeAwardDaysCountArgs {
  return &TDepositWithdrawServiceSelectTradeAwardDaysCountArgs{}
}

var TDepositWithdrawServiceSelectTradeAwardDaysCountArgs_Params_DEFAULT *TTradeAwardParams
func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountArgs) GetParams() *TTradeAwardParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectTradeAwardDaysCountArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeAwardParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeAwardDaysCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectTradeAwardDaysCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectTradeAwardDaysCountResult struct {
  Success *TTradeAwardDaysCountResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectTradeAwardDaysCountResult() *TDepositWithdrawServiceSelectTradeAwardDaysCountResult {
  return &TDepositWithdrawServiceSelectTradeAwardDaysCountResult{}
}

var TDepositWithdrawServiceSelectTradeAwardDaysCountResult_Success_DEFAULT *TTradeAwardDaysCountResult_
func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountResult) GetSuccess() *TTradeAwardDaysCountResult_ {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectTradeAwardDaysCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTradeAwardDaysCountResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeAwardDaysCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectTradeAwardDaysCountResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs struct {
  Params *TTradeAwardParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs() *TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs {
  return &TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs{}
}

var TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs_Params_DEFAULT *TTradeAwardParams
func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs) GetParams() *TTradeAwardParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeAwardParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeAwardDaysDetailList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectTradeAwardDaysDetailListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult struct {
  Success []*TTradeAwardDetailListResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectTradeAwardDaysDetailListResult() *TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult {
  return &TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult{}
}

var TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult_Success_DEFAULT []*TTradeAwardDetailListResult_

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult) GetSuccess() []*TTradeAwardDetailListResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTradeAwardDetailListResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem41 := &TTradeAwardDetailListResult_{}
    if err := _elem41.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
    }
    p.Success = append(p.Success, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeAwardDaysDetailList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectTradeAwardDaysDetailListResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs struct {
  Params *TTradeAwardParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs() *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs {
  return &TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs{}
}

var TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs_Params_DEFAULT *TTradeAwardParams
func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs) GetParams() *TTradeAwardParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeAwardParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeAwardDaysDetailCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectTradeAwardDaysDetailCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult struct {
  Success *TTradeAwardDetailCountResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult() *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult {
  return &TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult{}
}

var TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult_Success_DEFAULT *TTradeAwardDetailCountResult_
func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult) GetSuccess() *TTradeAwardDetailCountResult_ {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTradeAwardDetailCountResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeAwardDaysDetailCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectTradeAwardDaysDetailCountResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectDividedDaysListArgs struct {
  Params *TTradeAwardParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectDividedDaysListArgs() *TDepositWithdrawServiceSelectDividedDaysListArgs {
  return &TDepositWithdrawServiceSelectDividedDaysListArgs{}
}

var TDepositWithdrawServiceSelectDividedDaysListArgs_Params_DEFAULT *TTradeAwardParams
func (p *TDepositWithdrawServiceSelectDividedDaysListArgs) GetParams() *TTradeAwardParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectDividedDaysListArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectDividedDaysListArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeAwardParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDividedDaysList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDividedDaysListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDividedDaysListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDividedDaysListResult struct {
  Success []*TDividedDaysListResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDividedDaysListResult() *TDepositWithdrawServiceSelectDividedDaysListResult {
  return &TDepositWithdrawServiceSelectDividedDaysListResult{}
}

var TDepositWithdrawServiceSelectDividedDaysListResult_Success_DEFAULT []*TDividedDaysListResult_

func (p *TDepositWithdrawServiceSelectDividedDaysListResult) GetSuccess() []*TDividedDaysListResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectDividedDaysListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDividedDaysListResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem42 := &TDividedDaysListResult_{}
    if err := _elem42.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
    }
    p.Success = append(p.Success, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDividedDaysList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDividedDaysListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDividedDaysListResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectDividedDaysCountArgs struct {
  Params *TTradeAwardParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectDividedDaysCountArgs() *TDepositWithdrawServiceSelectDividedDaysCountArgs {
  return &TDepositWithdrawServiceSelectDividedDaysCountArgs{}
}

var TDepositWithdrawServiceSelectDividedDaysCountArgs_Params_DEFAULT *TTradeAwardParams
func (p *TDepositWithdrawServiceSelectDividedDaysCountArgs) GetParams() *TTradeAwardParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectDividedDaysCountArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectDividedDaysCountArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeAwardParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDividedDaysCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDividedDaysCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDividedDaysCountResult struct {
  Success *TDividedDaysCountResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDividedDaysCountResult() *TDepositWithdrawServiceSelectDividedDaysCountResult {
  return &TDepositWithdrawServiceSelectDividedDaysCountResult{}
}

var TDepositWithdrawServiceSelectDividedDaysCountResult_Success_DEFAULT *TDividedDaysCountResult_
func (p *TDepositWithdrawServiceSelectDividedDaysCountResult) GetSuccess() *TDividedDaysCountResult_ {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectDividedDaysCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositWithdrawServiceSelectDividedDaysCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDividedDaysCountResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDividedDaysCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDividedDaysCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDividedDaysCountResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectDividedDaysDetailListArgs struct {
  Params *TTradeAwardParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectDividedDaysDetailListArgs() *TDepositWithdrawServiceSelectDividedDaysDetailListArgs {
  return &TDepositWithdrawServiceSelectDividedDaysDetailListArgs{}
}

var TDepositWithdrawServiceSelectDividedDaysDetailListArgs_Params_DEFAULT *TTradeAwardParams
func (p *TDepositWithdrawServiceSelectDividedDaysDetailListArgs) GetParams() *TTradeAwardParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectDividedDaysDetailListArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectDividedDaysDetailListArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeAwardParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDividedDaysDetailList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDividedDaysDetailListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDividedDaysDetailListResult struct {
  Success []*TDividedDaysDetailListResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDividedDaysDetailListResult() *TDepositWithdrawServiceSelectDividedDaysDetailListResult {
  return &TDepositWithdrawServiceSelectDividedDaysDetailListResult{}
}

var TDepositWithdrawServiceSelectDividedDaysDetailListResult_Success_DEFAULT []*TDividedDaysDetailListResult_

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListResult) GetSuccess() []*TDividedDaysDetailListResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectDividedDaysDetailListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDividedDaysDetailListResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem43 := &TDividedDaysDetailListResult_{}
    if err := _elem43.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
    }
    p.Success = append(p.Success, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDividedDaysDetailList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDividedDaysDetailListResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectDividedDaysDetailCountArgs struct {
  Params *TTradeAwardParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectDividedDaysDetailCountArgs() *TDepositWithdrawServiceSelectDividedDaysDetailCountArgs {
  return &TDepositWithdrawServiceSelectDividedDaysDetailCountArgs{}
}

var TDepositWithdrawServiceSelectDividedDaysDetailCountArgs_Params_DEFAULT *TTradeAwardParams
func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountArgs) GetParams() *TTradeAwardParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectDividedDaysDetailCountArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeAwardParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDividedDaysDetailCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDividedDaysDetailCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDividedDaysDetailCountResult struct {
  Success *TDividedDaysDetailCountResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDividedDaysDetailCountResult() *TDepositWithdrawServiceSelectDividedDaysDetailCountResult {
  return &TDepositWithdrawServiceSelectDividedDaysDetailCountResult{}
}

var TDepositWithdrawServiceSelectDividedDaysDetailCountResult_Success_DEFAULT *TDividedDaysDetailCountResult_
func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountResult) GetSuccess() *TDividedDaysDetailCountResult_ {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectDividedDaysDetailCountResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDividedDaysDetailCountResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDividedDaysDetailCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDividedDaysDetailCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDividedDaysDetailCountResult(%+v)", *p)
}


