// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package finance

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - UserId
//  - Type
//  - Currency
//  - Amount
//  - Status
//  - SourceAddress
//  - Address
//  - TxId
//  - Confirmations
//  - OutputIndex
//  - Fee
//  - NetworkFee
//  - DestinationTag
//  - Mark
//  - CreatedAt
//  - UpdatedAt
//  - Empty
type TDepositWithdraw struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Type string `thrift:"type,3" db:"type" json:"type"`
  Currency string `thrift:"currency,4" db:"currency" json:"currency"`
  Amount string `thrift:"amount,5" db:"amount" json:"amount"`
  Status string `thrift:"status,6" db:"status" json:"status"`
  SourceAddress string `thrift:"sourceAddress,7" db:"sourceAddress" json:"sourceAddress"`
  Address string `thrift:"address,8" db:"address" json:"address"`
  TxId string `thrift:"txId,9" db:"txId" json:"txId"`
  Confirmations int32 `thrift:"confirmations,10" db:"confirmations" json:"confirmations"`
  OutputIndex int32 `thrift:"outputIndex,11" db:"outputIndex" json:"outputIndex"`
  Fee string `thrift:"fee,12" db:"fee" json:"fee"`
  NetworkFee string `thrift:"networkFee,13" db:"networkFee" json:"networkFee"`
  DestinationTag int32 `thrift:"destinationTag,14" db:"destinationTag" json:"destinationTag"`
  Mark string `thrift:"mark,15" db:"mark" json:"mark"`
  CreatedAt string `thrift:"createdAt,16" db:"createdAt" json:"createdAt"`
  UpdatedAt string `thrift:"updatedAt,17" db:"updatedAt" json:"updatedAt"`
  Empty bool `thrift:"empty,18" db:"empty" json:"empty,omitempty"`
}

func NewTDepositWithdraw() *TDepositWithdraw {
  return &TDepositWithdraw{}
}


func (p *TDepositWithdraw) GetID() int32 {
  return p.ID
}

func (p *TDepositWithdraw) GetUserId() int32 {
  return p.UserId
}

func (p *TDepositWithdraw) GetType() string {
  return p.Type
}

func (p *TDepositWithdraw) GetCurrency() string {
  return p.Currency
}

func (p *TDepositWithdraw) GetAmount() string {
  return p.Amount
}

func (p *TDepositWithdraw) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdraw) GetSourceAddress() string {
  return p.SourceAddress
}

func (p *TDepositWithdraw) GetAddress() string {
  return p.Address
}

func (p *TDepositWithdraw) GetTxId() string {
  return p.TxId
}

func (p *TDepositWithdraw) GetConfirmations() int32 {
  return p.Confirmations
}

func (p *TDepositWithdraw) GetOutputIndex() int32 {
  return p.OutputIndex
}

func (p *TDepositWithdraw) GetFee() string {
  return p.Fee
}

func (p *TDepositWithdraw) GetNetworkFee() string {
  return p.NetworkFee
}

func (p *TDepositWithdraw) GetDestinationTag() int32 {
  return p.DestinationTag
}

func (p *TDepositWithdraw) GetMark() string {
  return p.Mark
}

func (p *TDepositWithdraw) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TDepositWithdraw) GetUpdatedAt() string {
  return p.UpdatedAt
}
var TDepositWithdraw_Empty_DEFAULT bool = false

func (p *TDepositWithdraw) GetEmpty() bool {
  return p.Empty
}
func (p *TDepositWithdraw) IsSetEmpty() bool {
  return p.Empty != TDepositWithdraw_Empty_DEFAULT
}

func (p *TDepositWithdraw) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdraw)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SourceAddress = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TxId = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Confirmations = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OutputIndex = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NetworkFee = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.DestinationTag = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TDepositWithdraw) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDepositWithdraw"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdraw) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:currency: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sourceAddress", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sourceAddress: ", p), err) }
  if err := oprot.WriteString(string(p.SourceAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sourceAddress (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sourceAddress: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:address: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txId", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:txId: ", p), err) }
  if err := oprot.WriteString(string(p.TxId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:txId: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("confirmations", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:confirmations: ", p), err) }
  if err := oprot.WriteI32(int32(p.Confirmations)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.confirmations (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:confirmations: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outputIndex", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:outputIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.OutputIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outputIndex (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:outputIndex: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fee: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkFee", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:networkFee: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkFee (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:networkFee: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destinationTag", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:destinationTag: ", p), err) }
  if err := oprot.WriteI32(int32(p.DestinationTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destinationTag (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:destinationTag: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:mark: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:createdAt: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:updatedAt: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:updatedAt: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField18(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:empty: ", p), err) }
  }
  return err
}

func (p *TDepositWithdraw) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdraw(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserName
//  - Status
//  - StartTime
//  - EndTime
//  - UserId
//  - Email
//  - Currency
//  - StartPage
//  - PageSize
type TDepositWithdrawParams struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserName string `thrift:"userName,2" db:"userName" json:"userName"`
  Status string `thrift:"status,3" db:"status" json:"status"`
  StartTime string `thrift:"startTime,4" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,5" db:"endTime" json:"endTime"`
  UserId int32 `thrift:"userId,6" db:"userId" json:"userId"`
  Email string `thrift:"email,7" db:"email" json:"email"`
  Currency string `thrift:"currency,8" db:"currency" json:"currency"`
  StartPage int32 `thrift:"startPage,9" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,10" db:"pageSize" json:"pageSize"`
}

func NewTDepositWithdrawParams() *TDepositWithdrawParams {
  return &TDepositWithdrawParams{}
}


func (p *TDepositWithdrawParams) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositWithdrawParams) GetUserName() string {
  return p.UserName
}

func (p *TDepositWithdrawParams) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdrawParams) GetStartTime() string {
  return p.StartTime
}

func (p *TDepositWithdrawParams) GetEndTime() string {
  return p.EndTime
}

func (p *TDepositWithdrawParams) GetUserId() int32 {
  return p.UserId
}

func (p *TDepositWithdrawParams) GetEmail() string {
  return p.Email
}

func (p *TDepositWithdrawParams) GetCurrency() string {
  return p.Currency
}

func (p *TDepositWithdrawParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TDepositWithdrawParams) GetPageSize() int32 {
  return p.PageSize
}
func (p *TDepositWithdrawParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TDepositWithdrawParams)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TDepositWithdrawParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDepositWithdrawParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startTime: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:endTime: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:userId: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:email: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:currency: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startPage: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pageSize: ", p), err) }
  return err
}

func (p *TDepositWithdrawParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawParams(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserId
//  - Email
//  - Currency
//  - Amount
//  - Address
//  - CreatedAt
//  - Status
//  - Mark
//  - TxId
//  - Empty
//  - TotalAmount
//  - NetworkFee
//  - Fee
type TDepositWithdrawResult_ struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Currency string `thrift:"currency,4" db:"currency" json:"currency"`
  Amount string `thrift:"amount,5" db:"amount" json:"amount"`
  Address string `thrift:"address,6" db:"address" json:"address"`
  CreatedAt string `thrift:"createdAt,7" db:"createdAt" json:"createdAt"`
  Status string `thrift:"status,8" db:"status" json:"status"`
  Mark string `thrift:"mark,9" db:"mark" json:"mark"`
  TxId string `thrift:"txId,10" db:"txId" json:"txId"`
  Empty bool `thrift:"empty,11" db:"empty" json:"empty,omitempty"`
  TotalAmount string `thrift:"totalAmount,12" db:"totalAmount" json:"totalAmount"`
  NetworkFee string `thrift:"networkFee,13" db:"networkFee" json:"networkFee"`
  Fee string `thrift:"fee,14" db:"fee" json:"fee"`
}

func NewTDepositWithdrawResult_() *TDepositWithdrawResult_ {
  return &TDepositWithdrawResult_{}
}


func (p *TDepositWithdrawResult_) GetID() int32 {
  return p.ID
}

func (p *TDepositWithdrawResult_) GetUserId() int32 {
  return p.UserId
}

func (p *TDepositWithdrawResult_) GetEmail() string {
  return p.Email
}

func (p *TDepositWithdrawResult_) GetCurrency() string {
  return p.Currency
}

func (p *TDepositWithdrawResult_) GetAmount() string {
  return p.Amount
}

func (p *TDepositWithdrawResult_) GetAddress() string {
  return p.Address
}

func (p *TDepositWithdrawResult_) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TDepositWithdrawResult_) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdrawResult_) GetMark() string {
  return p.Mark
}

func (p *TDepositWithdrawResult_) GetTxId() string {
  return p.TxId
}
var TDepositWithdrawResult__Empty_DEFAULT bool = false

func (p *TDepositWithdrawResult_) GetEmpty() bool {
  return p.Empty
}

func (p *TDepositWithdrawResult_) GetTotalAmount() string {
  return p.TotalAmount
}

func (p *TDepositWithdrawResult_) GetNetworkFee() string {
  return p.NetworkFee
}

func (p *TDepositWithdrawResult_) GetFee() string {
  return p.Fee
}
func (p *TDepositWithdrawResult_) IsSetEmpty() bool {
  return p.Empty != TDepositWithdrawResult__Empty_DEFAULT
}

func (p *TDepositWithdrawResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TxId = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.TotalAmount = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NetworkFee = v
}
  return nil
}

func (p *TDepositWithdrawResult_)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *TDepositWithdrawResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDepositWithdrawResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:currency: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:address: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createdAt: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:mark: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txId", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:txId: ", p), err) }
  if err := oprot.WriteString(string(p.TxId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:txId: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:empty: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawResult_) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalAmount", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:totalAmount: ", p), err) }
  if err := oprot.WriteString(string(p.TotalAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalAmount (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:totalAmount: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkFee", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:networkFee: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkFee (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:networkFee: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:fee: ", p), err) }
  return err
}

func (p *TDepositWithdrawResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawResult_(%+v)", *p)
}

type TDepositWithdrawService interface {
  // Parameters:
  //  - TraceId
  //  - ID
  SelectDepositWithdrawByPrimaryKey(ctx context.Context, traceId string, id int32) (r *TDepositWithdraw, err error)
  // Parameters:
  //  - TraceId
  //  - Status
  //  - Mark
  //  - WithdrawId
  AuditDepositWithdraw(ctx context.Context, traceId string, status string, mark string, withdrawId int32) (r bool, err error)
  // Parameters:
  //  - Params
  SelectDepositWithdrawByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error)
  // Parameters:
  //  - Params
  SelectDepositWithdrawCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error)
  // Parameters:
  //  - Params
  SelectSlaveDepositListByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error)
  // Parameters:
  //  - Params
  SelectSlaveDepositCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error)
  // Parameters:
  //  - Params
  SelectSlaveWithdrawListByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error)
  // Parameters:
  //  - Params
  SelectSlaveWithdrawLCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error)
}

type TDepositWithdrawServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTDepositWithdrawService instead
func NewTDepositWithdrawServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDepositWithdrawServiceClient {
  return &TDepositWithdrawServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTDepositWithdrawService instead
func NewTDepositWithdrawServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDepositWithdrawServiceClient {
  return &TDepositWithdrawServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDepositWithdrawServiceClient(c thrift.TClient) *TDepositWithdrawServiceClient {
  return &TDepositWithdrawServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - ID
func (p *TDepositWithdrawServiceClient) SelectDepositWithdrawByPrimaryKey(ctx context.Context, traceId string, id int32) (r *TDepositWithdraw, err error) {
  var _args0 TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs
  _args0.TraceId = traceId
  _args0.ID = id
  var _result1 TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult
  if err = p.c.Call(ctx, "selectDepositWithdrawByPrimaryKey", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Status
//  - Mark
//  - WithdrawId
func (p *TDepositWithdrawServiceClient) AuditDepositWithdraw(ctx context.Context, traceId string, status string, mark string, withdrawId int32) (r bool, err error) {
  var _args2 TDepositWithdrawServiceAuditDepositWithdrawArgs
  _args2.TraceId = traceId
  _args2.Status = status
  _args2.Mark = mark
  _args2.WithdrawId = withdrawId
  var _result3 TDepositWithdrawServiceAuditDepositWithdrawResult
  if err = p.c.Call(ctx, "auditDepositWithdraw", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectDepositWithdrawByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error) {
  var _args4 TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs
  _args4.Params = params
  var _result5 TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult
  if err = p.c.Call(ctx, "selectDepositWithdrawByConditions", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectDepositWithdrawCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error) {
  var _args6 TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs
  _args6.Params = params
  var _result7 TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult
  if err = p.c.Call(ctx, "selectDepositWithdrawCountByConditions", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectSlaveDepositListByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error) {
  var _args8 TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs
  _args8.Params = params
  var _result9 TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult
  if err = p.c.Call(ctx, "selectSlaveDepositListByConditions", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectSlaveDepositCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error) {
  var _args10 TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs
  _args10.Params = params
  var _result11 TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult
  if err = p.c.Call(ctx, "selectSlaveDepositCountByConditions", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectSlaveWithdrawListByConditions(ctx context.Context, params *TDepositWithdrawParams) (r []*TDepositWithdrawResult_, err error) {
  var _args12 TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs
  _args12.Params = params
  var _result13 TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult
  if err = p.c.Call(ctx, "selectSlaveWithdrawListByConditions", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TDepositWithdrawServiceClient) SelectSlaveWithdrawLCountByConditions(ctx context.Context, params *TDepositWithdrawParams) (r int32, err error) {
  var _args14 TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs
  _args14.Params = params
  var _result15 TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult
  if err = p.c.Call(ctx, "selectSlaveWithdrawLCountByConditions", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

type TDepositWithdrawServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDepositWithdrawService
}

func (p *TDepositWithdrawServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDepositWithdrawServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDepositWithdrawServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDepositWithdrawServiceProcessor(handler TDepositWithdrawService) *TDepositWithdrawServiceProcessor {

  self16 := &TDepositWithdrawServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["selectDepositWithdrawByPrimaryKey"] = &tDepositWithdrawServiceProcessorSelectDepositWithdrawByPrimaryKey{handler:handler}
  self16.processorMap["auditDepositWithdraw"] = &tDepositWithdrawServiceProcessorAuditDepositWithdraw{handler:handler}
  self16.processorMap["selectDepositWithdrawByConditions"] = &tDepositWithdrawServiceProcessorSelectDepositWithdrawByConditions{handler:handler}
  self16.processorMap["selectDepositWithdrawCountByConditions"] = &tDepositWithdrawServiceProcessorSelectDepositWithdrawCountByConditions{handler:handler}
  self16.processorMap["selectSlaveDepositListByConditions"] = &tDepositWithdrawServiceProcessorSelectSlaveDepositListByConditions{handler:handler}
  self16.processorMap["selectSlaveDepositCountByConditions"] = &tDepositWithdrawServiceProcessorSelectSlaveDepositCountByConditions{handler:handler}
  self16.processorMap["selectSlaveWithdrawListByConditions"] = &tDepositWithdrawServiceProcessorSelectSlaveWithdrawListByConditions{handler:handler}
  self16.processorMap["selectSlaveWithdrawLCountByConditions"] = &tDepositWithdrawServiceProcessorSelectSlaveWithdrawLCountByConditions{handler:handler}
return self16
}

func (p *TDepositWithdrawServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x17.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x17

}

type tDepositWithdrawServiceProcessorSelectDepositWithdrawByPrimaryKey struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDepositWithdrawByPrimaryKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawByPrimaryKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult{}
var retval *TDepositWithdraw
  var err2 error
  if retval, err2 = p.handler.SelectDepositWithdrawByPrimaryKey(ctx, args.TraceId, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDepositWithdrawByPrimaryKey: " + err2.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawByPrimaryKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectDepositWithdrawByPrimaryKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorAuditDepositWithdraw struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorAuditDepositWithdraw) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceAuditDepositWithdrawArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("auditDepositWithdraw", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceAuditDepositWithdrawResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AuditDepositWithdraw(ctx, args.TraceId, args.Status, args.Mark, args.WithdrawId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing auditDepositWithdraw: " + err2.Error())
    oprot.WriteMessageBegin("auditDepositWithdraw", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("auditDepositWithdraw", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectDepositWithdrawByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDepositWithdrawByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult{}
var retval []*TDepositWithdrawResult_
  var err2 error
  if retval, err2 = p.handler.SelectDepositWithdrawByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDepositWithdrawByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectDepositWithdrawByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectDepositWithdrawCountByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectDepositWithdrawCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectDepositWithdrawCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectDepositWithdrawCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectDepositWithdrawCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectDepositWithdrawCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectSlaveDepositListByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectSlaveDepositListByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveDepositListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult{}
var retval []*TDepositWithdrawResult_
  var err2 error
  if retval, err2 = p.handler.SelectSlaveDepositListByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveDepositListByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveDepositListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveDepositListByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectSlaveDepositCountByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectSlaveDepositCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveDepositCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectSlaveDepositCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveDepositCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveDepositCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveDepositCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectSlaveWithdrawListByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectSlaveWithdrawListByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveWithdrawListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult{}
var retval []*TDepositWithdrawResult_
  var err2 error
  if retval, err2 = p.handler.SelectSlaveWithdrawListByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveWithdrawListByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveWithdrawListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveWithdrawListByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositWithdrawServiceProcessorSelectSlaveWithdrawLCountByConditions struct {
  handler TDepositWithdrawService
}

func (p *tDepositWithdrawServiceProcessorSelectSlaveWithdrawLCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveWithdrawLCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectSlaveWithdrawLCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveWithdrawLCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveWithdrawLCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveWithdrawLCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - ID
type TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs() *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs {
  return &TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs{}
}


func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) GetID() int32 {
  return p.ID
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawByPrimaryKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult struct {
  Success *TDepositWithdraw `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult() *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult {
  return &TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult{}
}

var TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult_Success_DEFAULT *TDepositWithdraw
func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) GetSuccess() *TDepositWithdraw {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDepositWithdraw{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawByPrimaryKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawByPrimaryKeyResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Status
//  - Mark
//  - WithdrawId
type TDepositWithdrawServiceAuditDepositWithdrawArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Status string `thrift:"status,2" db:"status" json:"status"`
  Mark string `thrift:"mark,3" db:"mark" json:"mark"`
  WithdrawId int32 `thrift:"withdrawId,4" db:"withdrawId" json:"withdrawId"`
}

func NewTDepositWithdrawServiceAuditDepositWithdrawArgs() *TDepositWithdrawServiceAuditDepositWithdrawArgs {
  return &TDepositWithdrawServiceAuditDepositWithdrawArgs{}
}


func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) GetMark() string {
  return p.Mark
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) GetWithdrawId() int32 {
  return p.WithdrawId
}
func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.WithdrawId = v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("auditDepositWithdraw_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mark: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:withdrawId: ", p), err) }
  if err := oprot.WriteI32(int32(p.WithdrawId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:withdrawId: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceAuditDepositWithdrawArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceAuditDepositWithdrawResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceAuditDepositWithdrawResult() *TDepositWithdrawServiceAuditDepositWithdrawResult {
  return &TDepositWithdrawServiceAuditDepositWithdrawResult{}
}

var TDepositWithdrawServiceAuditDepositWithdrawResult_Success_DEFAULT bool
func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceAuditDepositWithdrawResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("auditDepositWithdraw_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceAuditDepositWithdrawResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceAuditDepositWithdrawResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs() *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs {
  return &TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs{}
}

var TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult struct {
  Success []*TDepositWithdrawResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawByConditionsResult() *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult {
  return &TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult{}
}

var TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult_Success_DEFAULT []*TDepositWithdrawResult_

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) GetSuccess() []*TDepositWithdrawResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdrawResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &TDepositWithdrawResult_{}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.Success = append(p.Success, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs() *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs {
  return &TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs{}
}

var TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult() *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult {
  return &TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult{}
}

var TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult_Success_DEFAULT int32
func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectDepositWithdrawCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectDepositWithdrawCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs() *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs {
  return &TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs{}
}

var TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveDepositListByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveDepositListByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult struct {
  Success []*TDepositWithdrawResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectSlaveDepositListByConditionsResult() *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult {
  return &TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult{}
}

var TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult_Success_DEFAULT []*TDepositWithdrawResult_

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) GetSuccess() []*TDepositWithdrawResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdrawResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &TDepositWithdrawResult_{}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Success = append(p.Success, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveDepositListByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveDepositListByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs() *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs {
  return &TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs{}
}

var TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveDepositCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveDepositCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult() *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult {
  return &TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult{}
}

var TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult_Success_DEFAULT int32
func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveDepositCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveDepositCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs() *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs {
  return &TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs{}
}

var TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveWithdrawListByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult struct {
  Success []*TDepositWithdrawResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult() *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult {
  return &TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult{}
}

var TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult_Success_DEFAULT []*TDepositWithdrawResult_

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) GetSuccess() []*TDepositWithdrawResult_ {
  return p.Success
}
func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdrawResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := &TDepositWithdrawResult_{}
    if err := _elem20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.Success = append(p.Success, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveWithdrawListByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveWithdrawListByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs struct {
  Params *TDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs() *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs {
  return &TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs{}
}

var TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs_Params_DEFAULT *TDepositWithdrawParams
func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) GetParams() *TDepositWithdrawParams {
  if !p.IsSetParams() {
    return TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveWithdrawLCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult() *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult {
  return &TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult{}
}

var TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult_Success_DEFAULT int32
func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveWithdrawLCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdrawServiceSelectSlaveWithdrawLCountByConditionsResult(%+v)", *p)
}


