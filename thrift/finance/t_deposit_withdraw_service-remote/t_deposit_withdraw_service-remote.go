// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "finance"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  TDepositWithdraw selectDepositWithdrawByPrimaryKey(string traceId, i32 id)")
  fmt.Fprintln(os.Stderr, "  bool auditDepositWithdraw(string traceId, string status, string mark, i32 withdrawId)")
  fmt.Fprintln(os.Stderr, "   selectDepositWithdrawByConditions(TDepositWithdrawParams params)")
  fmt.Fprintln(os.Stderr, "  i32 selectDepositWithdrawCountByConditions(TDepositWithdrawParams params)")
  fmt.Fprintln(os.Stderr, "   selectSlaveDepositListByConditions(TDepositWithdrawParams params)")
  fmt.Fprintln(os.Stderr, "  i32 selectSlaveDepositCountByConditions(TDepositWithdrawParams params)")
  fmt.Fprintln(os.Stderr, "   selectSlaveWithdrawListByConditions(TDepositWithdrawParams params)")
  fmt.Fprintln(os.Stderr, "  i32 selectSlaveWithdrawLCountByConditions(TDepositWithdrawParams params)")
  fmt.Fprintln(os.Stderr, "   selectTradeAwardDaysList(TTradeAwardParams params)")
  fmt.Fprintln(os.Stderr, "  TTradeAwardDaysCountResult selectTradeAwardDaysCount(TTradeAwardParams params)")
  fmt.Fprintln(os.Stderr, "   selectTradeAwardDaysDetailList(TTradeAwardParams params)")
  fmt.Fprintln(os.Stderr, "  TTradeAwardDetailCountResult selectTradeAwardDaysDetailCount(TTradeAwardParams params)")
  fmt.Fprintln(os.Stderr, "   selectDividedDaysList(TTradeAwardParams params)")
  fmt.Fprintln(os.Stderr, "  TDividedDaysCountResult selectDividedDaysCount(TTradeAwardParams params)")
  fmt.Fprintln(os.Stderr, "   selectDividedDaysDetailList(TTradeAwardParams params)")
  fmt.Fprintln(os.Stderr, "  TDividedDaysDetailCountResult selectDividedDaysDetailCount(TTradeAwardParams params)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := finance.NewTDepositWithdrawServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "selectDepositWithdrawByPrimaryKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SelectDepositWithdrawByPrimaryKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err45 := (strconv.Atoi(flag.Arg(2)))
    if err45 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SelectDepositWithdrawByPrimaryKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "auditDepositWithdraw":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AuditDepositWithdraw requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err49 := (strconv.Atoi(flag.Arg(4)))
    if err49 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.AuditDepositWithdraw(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "selectDepositWithdrawByConditions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectDepositWithdrawByConditions requires 1 args")
      flag.Usage()
    }
    arg50 := flag.Arg(1)
    mbTrans51 := thrift.NewTMemoryBufferLen(len(arg50))
    defer mbTrans51.Close()
    _, err52 := mbTrans51.WriteString(arg50)
    if err52 != nil {
      Usage()
      return
    }
    factory53 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt54 := factory53.GetProtocol(mbTrans51)
    argvalue0 := finance.NewTDepositWithdrawParams()
    err55 := argvalue0.Read(jsProt54)
    if err55 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectDepositWithdrawByConditions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectDepositWithdrawCountByConditions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectDepositWithdrawCountByConditions requires 1 args")
      flag.Usage()
    }
    arg56 := flag.Arg(1)
    mbTrans57 := thrift.NewTMemoryBufferLen(len(arg56))
    defer mbTrans57.Close()
    _, err58 := mbTrans57.WriteString(arg56)
    if err58 != nil {
      Usage()
      return
    }
    factory59 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt60 := factory59.GetProtocol(mbTrans57)
    argvalue0 := finance.NewTDepositWithdrawParams()
    err61 := argvalue0.Read(jsProt60)
    if err61 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectDepositWithdrawCountByConditions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectSlaveDepositListByConditions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectSlaveDepositListByConditions requires 1 args")
      flag.Usage()
    }
    arg62 := flag.Arg(1)
    mbTrans63 := thrift.NewTMemoryBufferLen(len(arg62))
    defer mbTrans63.Close()
    _, err64 := mbTrans63.WriteString(arg62)
    if err64 != nil {
      Usage()
      return
    }
    factory65 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt66 := factory65.GetProtocol(mbTrans63)
    argvalue0 := finance.NewTDepositWithdrawParams()
    err67 := argvalue0.Read(jsProt66)
    if err67 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectSlaveDepositListByConditions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectSlaveDepositCountByConditions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectSlaveDepositCountByConditions requires 1 args")
      flag.Usage()
    }
    arg68 := flag.Arg(1)
    mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
    defer mbTrans69.Close()
    _, err70 := mbTrans69.WriteString(arg68)
    if err70 != nil {
      Usage()
      return
    }
    factory71 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt72 := factory71.GetProtocol(mbTrans69)
    argvalue0 := finance.NewTDepositWithdrawParams()
    err73 := argvalue0.Read(jsProt72)
    if err73 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectSlaveDepositCountByConditions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectSlaveWithdrawListByConditions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectSlaveWithdrawListByConditions requires 1 args")
      flag.Usage()
    }
    arg74 := flag.Arg(1)
    mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
    defer mbTrans75.Close()
    _, err76 := mbTrans75.WriteString(arg74)
    if err76 != nil {
      Usage()
      return
    }
    factory77 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt78 := factory77.GetProtocol(mbTrans75)
    argvalue0 := finance.NewTDepositWithdrawParams()
    err79 := argvalue0.Read(jsProt78)
    if err79 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectSlaveWithdrawListByConditions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectSlaveWithdrawLCountByConditions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectSlaveWithdrawLCountByConditions requires 1 args")
      flag.Usage()
    }
    arg80 := flag.Arg(1)
    mbTrans81 := thrift.NewTMemoryBufferLen(len(arg80))
    defer mbTrans81.Close()
    _, err82 := mbTrans81.WriteString(arg80)
    if err82 != nil {
      Usage()
      return
    }
    factory83 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt84 := factory83.GetProtocol(mbTrans81)
    argvalue0 := finance.NewTDepositWithdrawParams()
    err85 := argvalue0.Read(jsProt84)
    if err85 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectSlaveWithdrawLCountByConditions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectTradeAwardDaysList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectTradeAwardDaysList requires 1 args")
      flag.Usage()
    }
    arg86 := flag.Arg(1)
    mbTrans87 := thrift.NewTMemoryBufferLen(len(arg86))
    defer mbTrans87.Close()
    _, err88 := mbTrans87.WriteString(arg86)
    if err88 != nil {
      Usage()
      return
    }
    factory89 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt90 := factory89.GetProtocol(mbTrans87)
    argvalue0 := finance.NewTTradeAwardParams()
    err91 := argvalue0.Read(jsProt90)
    if err91 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectTradeAwardDaysList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectTradeAwardDaysCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectTradeAwardDaysCount requires 1 args")
      flag.Usage()
    }
    arg92 := flag.Arg(1)
    mbTrans93 := thrift.NewTMemoryBufferLen(len(arg92))
    defer mbTrans93.Close()
    _, err94 := mbTrans93.WriteString(arg92)
    if err94 != nil {
      Usage()
      return
    }
    factory95 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt96 := factory95.GetProtocol(mbTrans93)
    argvalue0 := finance.NewTTradeAwardParams()
    err97 := argvalue0.Read(jsProt96)
    if err97 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectTradeAwardDaysCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectTradeAwardDaysDetailList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectTradeAwardDaysDetailList requires 1 args")
      flag.Usage()
    }
    arg98 := flag.Arg(1)
    mbTrans99 := thrift.NewTMemoryBufferLen(len(arg98))
    defer mbTrans99.Close()
    _, err100 := mbTrans99.WriteString(arg98)
    if err100 != nil {
      Usage()
      return
    }
    factory101 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt102 := factory101.GetProtocol(mbTrans99)
    argvalue0 := finance.NewTTradeAwardParams()
    err103 := argvalue0.Read(jsProt102)
    if err103 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectTradeAwardDaysDetailList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectTradeAwardDaysDetailCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectTradeAwardDaysDetailCount requires 1 args")
      flag.Usage()
    }
    arg104 := flag.Arg(1)
    mbTrans105 := thrift.NewTMemoryBufferLen(len(arg104))
    defer mbTrans105.Close()
    _, err106 := mbTrans105.WriteString(arg104)
    if err106 != nil {
      Usage()
      return
    }
    factory107 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt108 := factory107.GetProtocol(mbTrans105)
    argvalue0 := finance.NewTTradeAwardParams()
    err109 := argvalue0.Read(jsProt108)
    if err109 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectTradeAwardDaysDetailCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectDividedDaysList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectDividedDaysList requires 1 args")
      flag.Usage()
    }
    arg110 := flag.Arg(1)
    mbTrans111 := thrift.NewTMemoryBufferLen(len(arg110))
    defer mbTrans111.Close()
    _, err112 := mbTrans111.WriteString(arg110)
    if err112 != nil {
      Usage()
      return
    }
    factory113 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt114 := factory113.GetProtocol(mbTrans111)
    argvalue0 := finance.NewTTradeAwardParams()
    err115 := argvalue0.Read(jsProt114)
    if err115 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectDividedDaysList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectDividedDaysCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectDividedDaysCount requires 1 args")
      flag.Usage()
    }
    arg116 := flag.Arg(1)
    mbTrans117 := thrift.NewTMemoryBufferLen(len(arg116))
    defer mbTrans117.Close()
    _, err118 := mbTrans117.WriteString(arg116)
    if err118 != nil {
      Usage()
      return
    }
    factory119 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt120 := factory119.GetProtocol(mbTrans117)
    argvalue0 := finance.NewTTradeAwardParams()
    err121 := argvalue0.Read(jsProt120)
    if err121 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectDividedDaysCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectDividedDaysDetailList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectDividedDaysDetailList requires 1 args")
      flag.Usage()
    }
    arg122 := flag.Arg(1)
    mbTrans123 := thrift.NewTMemoryBufferLen(len(arg122))
    defer mbTrans123.Close()
    _, err124 := mbTrans123.WriteString(arg122)
    if err124 != nil {
      Usage()
      return
    }
    factory125 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt126 := factory125.GetProtocol(mbTrans123)
    argvalue0 := finance.NewTTradeAwardParams()
    err127 := argvalue0.Read(jsProt126)
    if err127 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectDividedDaysDetailList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "selectDividedDaysDetailCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectDividedDaysDetailCount requires 1 args")
      flag.Usage()
    }
    arg128 := flag.Arg(1)
    mbTrans129 := thrift.NewTMemoryBufferLen(len(arg128))
    defer mbTrans129.Close()
    _, err130 := mbTrans129.WriteString(arg128)
    if err130 != nil {
      Usage()
      return
    }
    factory131 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt132 := factory131.GetProtocol(mbTrans129)
    argvalue0 := finance.NewTTradeAwardParams()
    err133 := argvalue0.Read(jsProt132)
    if err133 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SelectDividedDaysDetailCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
