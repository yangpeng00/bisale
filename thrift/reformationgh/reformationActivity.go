// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package reformationgh

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - InviterName
//  - InviteeName
//  - Activity
type TParticipantRelation struct {
  InviterName string `thrift:"inviterName,1" db:"inviterName" json:"inviterName"`
  InviteeName string `thrift:"inviteeName,2" db:"inviteeName" json:"inviteeName"`
  Activity string `thrift:"activity,3" db:"activity" json:"activity"`
}

func NewTParticipantRelation() *TParticipantRelation {
  return &TParticipantRelation{}
}


func (p *TParticipantRelation) GetInviterName() string {
  return p.InviterName
}

func (p *TParticipantRelation) GetInviteeName() string {
  return p.InviteeName
}

func (p *TParticipantRelation) GetActivity() string {
  return p.Activity
}
func (p *TParticipantRelation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TParticipantRelation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.InviterName = v
}
  return nil
}

func (p *TParticipantRelation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.InviteeName = v
}
  return nil
}

func (p *TParticipantRelation)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Activity = v
}
  return nil
}

func (p *TParticipantRelation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TParticipantRelation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TParticipantRelation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inviterName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inviterName: ", p), err) }
  if err := oprot.WriteString(string(p.InviterName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inviterName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inviterName: ", p), err) }
  return err
}

func (p *TParticipantRelation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inviteeName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inviteeName: ", p), err) }
  if err := oprot.WriteString(string(p.InviteeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inviteeName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inviteeName: ", p), err) }
  return err
}

func (p *TParticipantRelation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("activity", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:activity: ", p), err) }
  if err := oprot.WriteString(string(p.Activity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.activity (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:activity: ", p), err) }
  return err
}

func (p *TParticipantRelation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TParticipantRelation(%+v)", *p)
}

// Attributes:
//  - Username
//  - TotalReward
type TTopParticipant struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  TotalReward int32 `thrift:"totalReward,2" db:"totalReward" json:"totalReward"`
}

func NewTTopParticipant() *TTopParticipant {
  return &TTopParticipant{}
}


func (p *TTopParticipant) GetUsername() string {
  return p.Username
}

func (p *TTopParticipant) GetTotalReward() int32 {
  return p.TotalReward
}
func (p *TTopParticipant) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTopParticipant)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TTopParticipant)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalReward = v
}
  return nil
}

func (p *TTopParticipant) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTopParticipant"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTopParticipant) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *TTopParticipant) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalReward", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalReward: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalReward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalReward (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalReward: ", p), err) }
  return err
}

func (p *TTopParticipant) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTopParticipant(%+v)", *p)
}

// Attributes:
//  - Username
//  - Level
//  - Reward
//  - Enabled
//  - CreatedAt
//  - UpdatedAt
type TInvitee struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  Level int32 `thrift:"level,2" db:"level" json:"level"`
  Reward int32 `thrift:"reward,3" db:"reward" json:"reward"`
  Enabled bool `thrift:"enabled,4" db:"enabled" json:"enabled"`
  CreatedAt int64 `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  UpdatedAt int64 `thrift:"updatedAt,6" db:"updatedAt" json:"updatedAt"`
}

func NewTInvitee() *TInvitee {
  return &TInvitee{}
}


func (p *TInvitee) GetUsername() string {
  return p.Username
}

func (p *TInvitee) GetLevel() int32 {
  return p.Level
}

func (p *TInvitee) GetReward() int32 {
  return p.Reward
}

func (p *TInvitee) GetEnabled() bool {
  return p.Enabled
}

func (p *TInvitee) GetCreatedAt() int64 {
  return p.CreatedAt
}

func (p *TInvitee) GetUpdatedAt() int64 {
  return p.UpdatedAt
}
func (p *TInvitee) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInvitee)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TInvitee)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *TInvitee)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reward = v
}
  return nil
}

func (p *TInvitee)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Enabled = v
}
  return nil
}

func (p *TInvitee)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TInvitee)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TInvitee) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInvitee"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInvitee) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *TInvitee) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *TInvitee) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reward", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reward: ", p), err) }
  if err := oprot.WriteI32(int32(p.Reward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reward (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reward: ", p), err) }
  return err
}

func (p *TInvitee) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:enabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enabled (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:enabled: ", p), err) }
  return err
}

func (p *TInvitee) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TInvitee) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updatedAt: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updatedAt: ", p), err) }
  return err
}

func (p *TInvitee) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInvitee(%+v)", *p)
}

// Attributes:
//  - Username
//  - Empty
type TUsername struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  Empty bool `thrift:"empty,2" db:"empty" json:"empty,omitempty"`
}

func NewTUsername() *TUsername {
  return &TUsername{}
}


func (p *TUsername) GetUsername() string {
  return p.Username
}
var TUsername_Empty_DEFAULT bool = false

func (p *TUsername) GetEmpty() bool {
  return p.Empty
}
func (p *TUsername) IsSetEmpty() bool {
  return p.Empty != TUsername_Empty_DEFAULT
}

func (p *TUsername) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUsername)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TUsername)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TUsername) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUsername"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUsername) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *TUsername) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:empty: ", p), err) }
  }
  return err
}

func (p *TUsername) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUsername(%+v)", *p)
}

// Attributes:
//  - Email
//  - Level
//  - CreatedAt
//  - Status
//  - Mobile
//  - PrefixMobile
type InviteRecord struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  Level string `thrift:"level,2" db:"level" json:"level"`
  CreatedAt string `thrift:"created_at,3" db:"created_at" json:"created_at"`
  Status int32 `thrift:"status,4" db:"status" json:"status"`
  Mobile string `thrift:"mobile,5" db:"mobile" json:"mobile"`
  PrefixMobile string `thrift:"prefix_mobile,6" db:"prefix_mobile" json:"prefix_mobile"`
}

func NewInviteRecord() *InviteRecord {
  return &InviteRecord{}
}


func (p *InviteRecord) GetEmail() string {
  return p.Email
}

func (p *InviteRecord) GetLevel() string {
  return p.Level
}

func (p *InviteRecord) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *InviteRecord) GetStatus() int32 {
  return p.Status
}

func (p *InviteRecord) GetMobile() string {
  return p.Mobile
}

func (p *InviteRecord) GetPrefixMobile() string {
  return p.PrefixMobile
}
func (p *InviteRecord) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteRecord)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *InviteRecord)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *InviteRecord)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *InviteRecord)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *InviteRecord)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *InviteRecord)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PrefixMobile = v
}
  return nil
}

func (p *InviteRecord) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InviteRecord"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteRecord) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *InviteRecord) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteString(string(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *InviteRecord) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:created_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:created_at: ", p), err) }
  return err
}

func (p *InviteRecord) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *InviteRecord) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:mobile: ", p), err) }
  return err
}

func (p *InviteRecord) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prefix_mobile", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:prefix_mobile: ", p), err) }
  if err := oprot.WriteString(string(p.PrefixMobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prefix_mobile (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:prefix_mobile: ", p), err) }
  return err
}

func (p *InviteRecord) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteRecord(%+v)", *p)
}

// Attributes:
//  - M1
//  - M2
//  - FirstLevelAmount
//  - SecondLevelAmount
//  - AllMember
//  - AllAmount
type InviteNum struct {
  M1 int32 `thrift:"m1,1" db:"m1" json:"m1"`
  M2 int32 `thrift:"m2,2" db:"m2" json:"m2"`
  FirstLevelAmount int32 `thrift:"firstLevelAmount,3" db:"firstLevelAmount" json:"firstLevelAmount"`
  SecondLevelAmount int32 `thrift:"secondLevelAmount,4" db:"secondLevelAmount" json:"secondLevelAmount"`
  AllMember int32 `thrift:"allMember,5" db:"allMember" json:"allMember"`
  AllAmount int32 `thrift:"allAmount,6" db:"allAmount" json:"allAmount"`
}

func NewInviteNum() *InviteNum {
  return &InviteNum{}
}


func (p *InviteNum) GetM1() int32 {
  return p.M1
}

func (p *InviteNum) GetM2() int32 {
  return p.M2
}

func (p *InviteNum) GetFirstLevelAmount() int32 {
  return p.FirstLevelAmount
}

func (p *InviteNum) GetSecondLevelAmount() int32 {
  return p.SecondLevelAmount
}

func (p *InviteNum) GetAllMember() int32 {
  return p.AllMember
}

func (p *InviteNum) GetAllAmount() int32 {
  return p.AllAmount
}
func (p *InviteNum) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteNum)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.M1 = v
}
  return nil
}

func (p *InviteNum)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.M2 = v
}
  return nil
}

func (p *InviteNum)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FirstLevelAmount = v
}
  return nil
}

func (p *InviteNum)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SecondLevelAmount = v
}
  return nil
}

func (p *InviteNum)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllMember = v
}
  return nil
}

func (p *InviteNum)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AllAmount = v
}
  return nil
}

func (p *InviteNum) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InviteNum"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteNum) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:m1: ", p), err) }
  if err := oprot.WriteI32(int32(p.M1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.m1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:m1: ", p), err) }
  return err
}

func (p *InviteNum) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("m2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:m2: ", p), err) }
  if err := oprot.WriteI32(int32(p.M2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.m2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:m2: ", p), err) }
  return err
}

func (p *InviteNum) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("firstLevelAmount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:firstLevelAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.FirstLevelAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.firstLevelAmount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:firstLevelAmount: ", p), err) }
  return err
}

func (p *InviteNum) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secondLevelAmount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:secondLevelAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.SecondLevelAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secondLevelAmount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:secondLevelAmount: ", p), err) }
  return err
}

func (p *InviteNum) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allMember", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:allMember: ", p), err) }
  if err := oprot.WriteI32(int32(p.AllMember)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allMember (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:allMember: ", p), err) }
  return err
}

func (p *InviteNum) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allAmount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:allAmount: ", p), err) }
  if err := oprot.WriteI32(int32(p.AllAmount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allAmount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:allAmount: ", p), err) }
  return err
}

func (p *InviteNum) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteNum(%+v)", *p)
}

// Attributes:
//  - UpdatedAt
//  - Type
//  - Level
//  - Amount
//  - Currency
type RewardRecord struct {
  UpdatedAt string `thrift:"updated_at,1" db:"updated_at" json:"updated_at"`
  Type int32 `thrift:"type,2" db:"type" json:"type"`
  Level int32 `thrift:"level,3" db:"level" json:"level"`
  Amount string `thrift:"amount,4" db:"amount" json:"amount"`
  Currency string `thrift:"currency,5" db:"currency" json:"currency"`
}

func NewRewardRecord() *RewardRecord {
  return &RewardRecord{}
}


func (p *RewardRecord) GetUpdatedAt() string {
  return p.UpdatedAt
}

func (p *RewardRecord) GetType() int32 {
  return p.Type
}

func (p *RewardRecord) GetLevel() int32 {
  return p.Level
}

func (p *RewardRecord) GetAmount() string {
  return p.Amount
}

func (p *RewardRecord) GetCurrency() string {
  return p.Currency
}
func (p *RewardRecord) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RewardRecord)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *RewardRecord)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *RewardRecord)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *RewardRecord)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *RewardRecord)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *RewardRecord) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RewardRecord"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RewardRecord) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updated_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updated_at: ", p), err) }
  return err
}

func (p *RewardRecord) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *RewardRecord) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err) }
  return err
}

func (p *RewardRecord) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *RewardRecord) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currency: ", p), err) }
  return err
}

func (p *RewardRecord) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RewardRecord(%+v)", *p)
}

// Attributes:
//  - Username
//  - Level
//  - InviteeID
//  - PrefixMobile
type Inviter struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  Level int32 `thrift:"level,2" db:"level" json:"level"`
  InviteeID int32 `thrift:"invitee_id,3" db:"invitee_id" json:"invitee_id"`
  PrefixMobile string `thrift:"prefix_mobile,4" db:"prefix_mobile" json:"prefix_mobile"`
}

func NewInviter() *Inviter {
  return &Inviter{}
}


func (p *Inviter) GetUsername() string {
  return p.Username
}

func (p *Inviter) GetLevel() int32 {
  return p.Level
}

func (p *Inviter) GetInviteeID() int32 {
  return p.InviteeID
}

func (p *Inviter) GetPrefixMobile() string {
  return p.PrefixMobile
}
func (p *Inviter) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Inviter)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *Inviter)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *Inviter)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InviteeID = v
}
  return nil
}

func (p *Inviter)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PrefixMobile = v
}
  return nil
}

func (p *Inviter) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Inviter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Inviter) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *Inviter) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *Inviter) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invitee_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitee_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.InviteeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitee_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitee_id: ", p), err) }
  return err
}

func (p *Inviter) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prefix_mobile", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:prefix_mobile: ", p), err) }
  if err := oprot.WriteString(string(p.PrefixMobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prefix_mobile (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:prefix_mobile: ", p), err) }
  return err
}

func (p *Inviter) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Inviter(%+v)", *p)
}

// Attributes:
//  - MO_AMOUNT
//  - M1_AMOUNT
//  - M2_AMOUNT
//  - SOURCE_TYPE
//  - StartTime
//  - EndTime
//  - Symbol
type TCandyParameter struct {
  MO_AMOUNT int32 `thrift:"MO_AMOUNT,1" db:"MO_AMOUNT" json:"MO_AMOUNT"`
  M1_AMOUNT int32 `thrift:"M1_AMOUNT,2" db:"M1_AMOUNT" json:"M1_AMOUNT"`
  M2_AMOUNT int32 `thrift:"M2_AMOUNT,3" db:"M2_AMOUNT" json:"M2_AMOUNT"`
  SOURCE_TYPE int32 `thrift:"SOURCE_TYPE,4" db:"SOURCE_TYPE" json:"SOURCE_TYPE"`
  StartTime int64 `thrift:"start_time,5" db:"start_time" json:"start_time"`
  EndTime int64 `thrift:"end_time,6" db:"end_time" json:"end_time"`
  Symbol string `thrift:"symbol,7" db:"symbol" json:"symbol"`
}

func NewTCandyParameter() *TCandyParameter {
  return &TCandyParameter{}
}


func (p *TCandyParameter) GetMO_AMOUNT() int32 {
  return p.MO_AMOUNT
}

func (p *TCandyParameter) GetM1_AMOUNT() int32 {
  return p.M1_AMOUNT
}

func (p *TCandyParameter) GetM2_AMOUNT() int32 {
  return p.M2_AMOUNT
}

func (p *TCandyParameter) GetSOURCE_TYPE() int32 {
  return p.SOURCE_TYPE
}

func (p *TCandyParameter) GetStartTime() int64 {
  return p.StartTime
}

func (p *TCandyParameter) GetEndTime() int64 {
  return p.EndTime
}

func (p *TCandyParameter) GetSymbol() string {
  return p.Symbol
}
func (p *TCandyParameter) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCandyParameter)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MO_AMOUNT = v
}
  return nil
}

func (p *TCandyParameter)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.M1_AMOUNT = v
}
  return nil
}

func (p *TCandyParameter)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.M2_AMOUNT = v
}
  return nil
}

func (p *TCandyParameter)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SOURCE_TYPE = v
}
  return nil
}

func (p *TCandyParameter)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TCandyParameter)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TCandyParameter)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TCandyParameter) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCandyParameter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCandyParameter) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MO_AMOUNT", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MO_AMOUNT: ", p), err) }
  if err := oprot.WriteI32(int32(p.MO_AMOUNT)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MO_AMOUNT (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MO_AMOUNT: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("M1_AMOUNT", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:M1_AMOUNT: ", p), err) }
  if err := oprot.WriteI32(int32(p.M1_AMOUNT)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.M1_AMOUNT (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:M1_AMOUNT: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("M2_AMOUNT", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:M2_AMOUNT: ", p), err) }
  if err := oprot.WriteI32(int32(p.M2_AMOUNT)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.M2_AMOUNT (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:M2_AMOUNT: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SOURCE_TYPE", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SOURCE_TYPE: ", p), err) }
  if err := oprot.WriteI32(int32(p.SOURCE_TYPE)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SOURCE_TYPE (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SOURCE_TYPE: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_time: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("end_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:end_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:end_time: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:symbol: ", p), err) }
  return err
}

func (p *TCandyParameter) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCandyParameter(%+v)", *p)
}

type TReformationActivityService interface {
  // Parameters:
  //  - TraceId
  //  - ParticipantRelation
  InsertRelation(ctx context.Context, traceId string, participantRelation *TParticipantRelation) (err error)
  // Parameters:
  //  - TraceId
  SelectTop10Account(ctx context.Context, traceId string) (r []*TTopParticipant, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectInviteeListByUserId(ctx context.Context, traceId string, userId int32) (r []*TInvitee, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  EnableParticipant(ctx context.Context, traceId string, userId int32) (err error)
  // Parameters:
  //  - TraceId
  //  - Username
  SelectRealNameByUsername(ctx context.Context, traceId string, username string) (r *TUsername, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  //  - Page
  //  - PageSize
  SelectInviteRecordByUserId(ctx context.Context, traceId string, userId int32, page int32, pageSize int32) (r []*InviteRecord, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectInviteNumByUserId(ctx context.Context, traceId string, userId int32) (r *InviteNum, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  //  - Page
  //  - PageSize
  SelectRewardRecordByUserId(ctx context.Context, traceId string, userId int32, page int32, pageSize int32) (r []*RewardRecord, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectRewardAmountByUserId(ctx context.Context, traceId string, userId int32) (r []*RewardRecord, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectTotalRewardRecords(ctx context.Context, traceId string, userId int32) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectTotalInviteRecords(ctx context.Context, traceId string, userId int32) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - InviteeID
  SelectInviters(ctx context.Context, traceId string, invitee_id int32) (r []*Inviter, err error)
  // Parameters:
  //  - TraceId
  GetCandyParameter(ctx context.Context, traceId string) (r *TCandyParameter, err error)
}

type TReformationActivityServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTReformationActivityService instead
func NewTReformationActivityServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TReformationActivityServiceClient {
  return &TReformationActivityServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTReformationActivityService instead
func NewTReformationActivityServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TReformationActivityServiceClient {
  return &TReformationActivityServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTReformationActivityServiceClient(c thrift.TClient) *TReformationActivityServiceClient {
  return &TReformationActivityServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - ParticipantRelation
func (p *TReformationActivityServiceClient) InsertRelation(ctx context.Context, traceId string, participantRelation *TParticipantRelation) (err error) {
  var _args0 TReformationActivityServiceInsertRelationArgs
  _args0.TraceId = traceId
  _args0.ParticipantRelation = participantRelation
  var _result1 TReformationActivityServiceInsertRelationResult
  if err = p.c.Call(ctx, "InsertRelation", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
func (p *TReformationActivityServiceClient) SelectTop10Account(ctx context.Context, traceId string) (r []*TTopParticipant, err error) {
  var _args2 TReformationActivityServiceSelectTop10AccountArgs
  _args2.TraceId = traceId
  var _result3 TReformationActivityServiceSelectTop10AccountResult
  if err = p.c.Call(ctx, "SelectTop10Account", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TReformationActivityServiceClient) SelectInviteeListByUserId(ctx context.Context, traceId string, userId int32) (r []*TInvitee, err error) {
  var _args4 TReformationActivityServiceSelectInviteeListByUserIdArgs
  _args4.TraceId = traceId
  _args4.UserId = userId
  var _result5 TReformationActivityServiceSelectInviteeListByUserIdResult
  if err = p.c.Call(ctx, "SelectInviteeListByUserId", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TReformationActivityServiceClient) EnableParticipant(ctx context.Context, traceId string, userId int32) (err error) {
  var _args6 TReformationActivityServiceEnableParticipantArgs
  _args6.TraceId = traceId
  _args6.UserId = userId
  var _result7 TReformationActivityServiceEnableParticipantResult
  if err = p.c.Call(ctx, "EnableParticipant", &_args6, &_result7); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - Username
func (p *TReformationActivityServiceClient) SelectRealNameByUsername(ctx context.Context, traceId string, username string) (r *TUsername, err error) {
  var _args8 TReformationActivityServiceSelectRealNameByUsernameArgs
  _args8.TraceId = traceId
  _args8.Username = username
  var _result9 TReformationActivityServiceSelectRealNameByUsernameResult
  if err = p.c.Call(ctx, "selectRealNameByUsername", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
//  - Page
//  - PageSize
func (p *TReformationActivityServiceClient) SelectInviteRecordByUserId(ctx context.Context, traceId string, userId int32, page int32, pageSize int32) (r []*InviteRecord, err error) {
  var _args10 TReformationActivityServiceSelectInviteRecordByUserIdArgs
  _args10.TraceId = traceId
  _args10.UserId = userId
  _args10.Page = page
  _args10.PageSize = pageSize
  var _result11 TReformationActivityServiceSelectInviteRecordByUserIdResult
  if err = p.c.Call(ctx, "selectInviteRecordByUserId", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TReformationActivityServiceClient) SelectInviteNumByUserId(ctx context.Context, traceId string, userId int32) (r *InviteNum, err error) {
  var _args12 TReformationActivityServiceSelectInviteNumByUserIdArgs
  _args12.TraceId = traceId
  _args12.UserId = userId
  var _result13 TReformationActivityServiceSelectInviteNumByUserIdResult
  if err = p.c.Call(ctx, "selectInviteNumByUserId", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
//  - Page
//  - PageSize
func (p *TReformationActivityServiceClient) SelectRewardRecordByUserId(ctx context.Context, traceId string, userId int32, page int32, pageSize int32) (r []*RewardRecord, err error) {
  var _args14 TReformationActivityServiceSelectRewardRecordByUserIdArgs
  _args14.TraceId = traceId
  _args14.UserId = userId
  _args14.Page = page
  _args14.PageSize = pageSize
  var _result15 TReformationActivityServiceSelectRewardRecordByUserIdResult
  if err = p.c.Call(ctx, "selectRewardRecordByUserId", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TReformationActivityServiceClient) SelectRewardAmountByUserId(ctx context.Context, traceId string, userId int32) (r []*RewardRecord, err error) {
  var _args16 TReformationActivityServiceSelectRewardAmountByUserIdArgs
  _args16.TraceId = traceId
  _args16.UserId = userId
  var _result17 TReformationActivityServiceSelectRewardAmountByUserIdResult
  if err = p.c.Call(ctx, "selectRewardAmountByUserId", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TReformationActivityServiceClient) SelectTotalRewardRecords(ctx context.Context, traceId string, userId int32) (r int32, err error) {
  var _args18 TReformationActivityServiceSelectTotalRewardRecordsArgs
  _args18.TraceId = traceId
  _args18.UserId = userId
  var _result19 TReformationActivityServiceSelectTotalRewardRecordsResult
  if err = p.c.Call(ctx, "selectTotalRewardRecords", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TReformationActivityServiceClient) SelectTotalInviteRecords(ctx context.Context, traceId string, userId int32) (r int32, err error) {
  var _args20 TReformationActivityServiceSelectTotalInviteRecordsArgs
  _args20.TraceId = traceId
  _args20.UserId = userId
  var _result21 TReformationActivityServiceSelectTotalInviteRecordsResult
  if err = p.c.Call(ctx, "selectTotalInviteRecords", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - InviteeID
func (p *TReformationActivityServiceClient) SelectInviters(ctx context.Context, traceId string, invitee_id int32) (r []*Inviter, err error) {
  var _args22 TReformationActivityServiceSelectInvitersArgs
  _args22.TraceId = traceId
  _args22.InviteeID = invitee_id
  var _result23 TReformationActivityServiceSelectInvitersResult
  if err = p.c.Call(ctx, "selectInviters", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - TraceId
func (p *TReformationActivityServiceClient) GetCandyParameter(ctx context.Context, traceId string) (r *TCandyParameter, err error) {
  var _args24 TReformationActivityServiceGetCandyParameterArgs
  _args24.TraceId = traceId
  var _result25 TReformationActivityServiceGetCandyParameterResult
  if err = p.c.Call(ctx, "getCandyParameter", &_args24, &_result25); err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

type TReformationActivityServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TReformationActivityService
}

func (p *TReformationActivityServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TReformationActivityServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TReformationActivityServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTReformationActivityServiceProcessor(handler TReformationActivityService) *TReformationActivityServiceProcessor {

  self26 := &TReformationActivityServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self26.processorMap["InsertRelation"] = &tReformationActivityServiceProcessorInsertRelation{handler:handler}
  self26.processorMap["SelectTop10Account"] = &tReformationActivityServiceProcessorSelectTop10Account{handler:handler}
  self26.processorMap["SelectInviteeListByUserId"] = &tReformationActivityServiceProcessorSelectInviteeListByUserId{handler:handler}
  self26.processorMap["EnableParticipant"] = &tReformationActivityServiceProcessorEnableParticipant{handler:handler}
  self26.processorMap["selectRealNameByUsername"] = &tReformationActivityServiceProcessorSelectRealNameByUsername{handler:handler}
  self26.processorMap["selectInviteRecordByUserId"] = &tReformationActivityServiceProcessorSelectInviteRecordByUserId{handler:handler}
  self26.processorMap["selectInviteNumByUserId"] = &tReformationActivityServiceProcessorSelectInviteNumByUserId{handler:handler}
  self26.processorMap["selectRewardRecordByUserId"] = &tReformationActivityServiceProcessorSelectRewardRecordByUserId{handler:handler}
  self26.processorMap["selectRewardAmountByUserId"] = &tReformationActivityServiceProcessorSelectRewardAmountByUserId{handler:handler}
  self26.processorMap["selectTotalRewardRecords"] = &tReformationActivityServiceProcessorSelectTotalRewardRecords{handler:handler}
  self26.processorMap["selectTotalInviteRecords"] = &tReformationActivityServiceProcessorSelectTotalInviteRecords{handler:handler}
  self26.processorMap["selectInviters"] = &tReformationActivityServiceProcessorSelectInviters{handler:handler}
  self26.processorMap["getCandyParameter"] = &tReformationActivityServiceProcessorGetCandyParameter{handler:handler}
return self26
}

func (p *TReformationActivityServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x27 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x27.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x27

}

type tReformationActivityServiceProcessorInsertRelation struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorInsertRelation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceInsertRelationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InsertRelation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceInsertRelationResult{}
  var err2 error
  if err2 = p.handler.InsertRelation(ctx, args.TraceId, args.ParticipantRelation); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertRelation: " + err2.Error())
    oprot.WriteMessageBegin("InsertRelation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("InsertRelation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectTop10Account struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectTop10Account) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectTop10AccountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectTop10Account", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectTop10AccountResult{}
var retval []*TTopParticipant
  var err2 error
  if retval, err2 = p.handler.SelectTop10Account(ctx, args.TraceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectTop10Account: " + err2.Error())
    oprot.WriteMessageBegin("SelectTop10Account", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectTop10Account", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectInviteeListByUserId struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectInviteeListByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectInviteeListByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectInviteeListByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectInviteeListByUserIdResult{}
var retval []*TInvitee
  var err2 error
  if retval, err2 = p.handler.SelectInviteeListByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectInviteeListByUserId: " + err2.Error())
    oprot.WriteMessageBegin("SelectInviteeListByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectInviteeListByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorEnableParticipant struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorEnableParticipant) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceEnableParticipantArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("EnableParticipant", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceEnableParticipantResult{}
  var err2 error
  if err2 = p.handler.EnableParticipant(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EnableParticipant: " + err2.Error())
    oprot.WriteMessageBegin("EnableParticipant", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("EnableParticipant", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectRealNameByUsername struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectRealNameByUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectRealNameByUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectRealNameByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectRealNameByUsernameResult{}
var retval *TUsername
  var err2 error
  if retval, err2 = p.handler.SelectRealNameByUsername(ctx, args.TraceId, args.Username); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectRealNameByUsername: " + err2.Error())
    oprot.WriteMessageBegin("selectRealNameByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectRealNameByUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectInviteRecordByUserId struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectInviteRecordByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectInviteRecordByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectInviteRecordByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectInviteRecordByUserIdResult{}
var retval []*InviteRecord
  var err2 error
  if retval, err2 = p.handler.SelectInviteRecordByUserId(ctx, args.TraceId, args.UserId, args.Page, args.PageSize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectInviteRecordByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectInviteRecordByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectInviteRecordByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectInviteNumByUserId struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectInviteNumByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectInviteNumByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectInviteNumByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectInviteNumByUserIdResult{}
var retval *InviteNum
  var err2 error
  if retval, err2 = p.handler.SelectInviteNumByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectInviteNumByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectInviteNumByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectInviteNumByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectRewardRecordByUserId struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectRewardRecordByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectRewardRecordByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectRewardRecordByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectRewardRecordByUserIdResult{}
var retval []*RewardRecord
  var err2 error
  if retval, err2 = p.handler.SelectRewardRecordByUserId(ctx, args.TraceId, args.UserId, args.Page, args.PageSize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectRewardRecordByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectRewardRecordByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectRewardRecordByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectRewardAmountByUserId struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectRewardAmountByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectRewardAmountByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectRewardAmountByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectRewardAmountByUserIdResult{}
var retval []*RewardRecord
  var err2 error
  if retval, err2 = p.handler.SelectRewardAmountByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectRewardAmountByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectRewardAmountByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectRewardAmountByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectTotalRewardRecords struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectTotalRewardRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectTotalRewardRecordsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectTotalRewardRecords", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectTotalRewardRecordsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectTotalRewardRecords(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectTotalRewardRecords: " + err2.Error())
    oprot.WriteMessageBegin("selectTotalRewardRecords", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectTotalRewardRecords", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectTotalInviteRecords struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectTotalInviteRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectTotalInviteRecordsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectTotalInviteRecords", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectTotalInviteRecordsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectTotalInviteRecords(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectTotalInviteRecords: " + err2.Error())
    oprot.WriteMessageBegin("selectTotalInviteRecords", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectTotalInviteRecords", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectInviters struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectInviters) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectInvitersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectInviters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectInvitersResult{}
var retval []*Inviter
  var err2 error
  if retval, err2 = p.handler.SelectInviters(ctx, args.TraceId, args.InviteeID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectInviters: " + err2.Error())
    oprot.WriteMessageBegin("selectInviters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectInviters", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorGetCandyParameter struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorGetCandyParameter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceGetCandyParameterArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCandyParameter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceGetCandyParameterResult{}
var retval *TCandyParameter
  var err2 error
  if retval, err2 = p.handler.GetCandyParameter(ctx, args.TraceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCandyParameter: " + err2.Error())
    oprot.WriteMessageBegin("getCandyParameter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCandyParameter", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - ParticipantRelation
type TReformationActivityServiceInsertRelationArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ParticipantRelation *TParticipantRelation `thrift:"participantRelation,2" db:"participantRelation" json:"participantRelation"`
}

func NewTReformationActivityServiceInsertRelationArgs() *TReformationActivityServiceInsertRelationArgs {
  return &TReformationActivityServiceInsertRelationArgs{}
}


func (p *TReformationActivityServiceInsertRelationArgs) GetTraceId() string {
  return p.TraceId
}
var TReformationActivityServiceInsertRelationArgs_ParticipantRelation_DEFAULT *TParticipantRelation
func (p *TReformationActivityServiceInsertRelationArgs) GetParticipantRelation() *TParticipantRelation {
  if !p.IsSetParticipantRelation() {
    return TReformationActivityServiceInsertRelationArgs_ParticipantRelation_DEFAULT
  }
return p.ParticipantRelation
}
func (p *TReformationActivityServiceInsertRelationArgs) IsSetParticipantRelation() bool {
  return p.ParticipantRelation != nil
}

func (p *TReformationActivityServiceInsertRelationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceInsertRelationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceInsertRelationArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.ParticipantRelation = &TParticipantRelation{}
  if err := p.ParticipantRelation.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ParticipantRelation), err)
  }
  return nil
}

func (p *TReformationActivityServiceInsertRelationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertRelation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceInsertRelationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceInsertRelationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("participantRelation", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:participantRelation: ", p), err) }
  if err := p.ParticipantRelation.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ParticipantRelation), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:participantRelation: ", p), err) }
  return err
}

func (p *TReformationActivityServiceInsertRelationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceInsertRelationArgs(%+v)", *p)
}

type TReformationActivityServiceInsertRelationResult struct {
}

func NewTReformationActivityServiceInsertRelationResult() *TReformationActivityServiceInsertRelationResult {
  return &TReformationActivityServiceInsertRelationResult{}
}

func (p *TReformationActivityServiceInsertRelationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceInsertRelationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertRelation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceInsertRelationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceInsertRelationResult(%+v)", *p)
}

// Attributes:
//  - TraceId
type TReformationActivityServiceSelectTop10AccountArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewTReformationActivityServiceSelectTop10AccountArgs() *TReformationActivityServiceSelectTop10AccountArgs {
  return &TReformationActivityServiceSelectTop10AccountArgs{}
}


func (p *TReformationActivityServiceSelectTop10AccountArgs) GetTraceId() string {
  return p.TraceId
}
func (p *TReformationActivityServiceSelectTop10AccountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectTop10Account_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectTop10AccountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectTop10AccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectTop10AccountResult struct {
  Success []*TTopParticipant `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectTop10AccountResult() *TReformationActivityServiceSelectTop10AccountResult {
  return &TReformationActivityServiceSelectTop10AccountResult{}
}

var TReformationActivityServiceSelectTop10AccountResult_Success_DEFAULT []*TTopParticipant

func (p *TReformationActivityServiceSelectTop10AccountResult) GetSuccess() []*TTopParticipant {
  return p.Success
}
func (p *TReformationActivityServiceSelectTop10AccountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectTop10AccountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTopParticipant, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := &TTopParticipant{}
    if err := _elem28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.Success = append(p.Success, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectTop10Account_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectTop10AccountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectTop10AccountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TReformationActivityServiceSelectInviteeListByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTReformationActivityServiceSelectInviteeListByUserIdArgs() *TReformationActivityServiceSelectInviteeListByUserIdArgs {
  return &TReformationActivityServiceSelectInviteeListByUserIdArgs{}
}


func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectInviteeListByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInviteeListByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectInviteeListByUserIdResult struct {
  Success []*TInvitee `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectInviteeListByUserIdResult() *TReformationActivityServiceSelectInviteeListByUserIdResult {
  return &TReformationActivityServiceSelectInviteeListByUserIdResult{}
}

var TReformationActivityServiceSelectInviteeListByUserIdResult_Success_DEFAULT []*TInvitee

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) GetSuccess() []*TInvitee {
  return p.Success
}
func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TInvitee, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &TInvitee{}
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Success = append(p.Success, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectInviteeListByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInviteeListByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TReformationActivityServiceEnableParticipantArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTReformationActivityServiceEnableParticipantArgs() *TReformationActivityServiceEnableParticipantArgs {
  return &TReformationActivityServiceEnableParticipantArgs{}
}


func (p *TReformationActivityServiceEnableParticipantArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceEnableParticipantArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TReformationActivityServiceEnableParticipantArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceEnableParticipantArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceEnableParticipantArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceEnableParticipantArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EnableParticipant_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceEnableParticipantArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceEnableParticipantArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceEnableParticipantArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceEnableParticipantArgs(%+v)", *p)
}

type TReformationActivityServiceEnableParticipantResult struct {
}

func NewTReformationActivityServiceEnableParticipantResult() *TReformationActivityServiceEnableParticipantResult {
  return &TReformationActivityServiceEnableParticipantResult{}
}

func (p *TReformationActivityServiceEnableParticipantResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceEnableParticipantResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EnableParticipant_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceEnableParticipantResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceEnableParticipantResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Username
type TReformationActivityServiceSelectRealNameByUsernameArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewTReformationActivityServiceSelectRealNameByUsernameArgs() *TReformationActivityServiceSelectRealNameByUsernameArgs {
  return &TReformationActivityServiceSelectRealNameByUsernameArgs{}
}


func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) GetUsername() string {
  return p.Username
}
func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectRealNameByUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectRealNameByUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectRealNameByUsernameResult struct {
  Success *TUsername `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectRealNameByUsernameResult() *TReformationActivityServiceSelectRealNameByUsernameResult {
  return &TReformationActivityServiceSelectRealNameByUsernameResult{}
}

var TReformationActivityServiceSelectRealNameByUsernameResult_Success_DEFAULT *TUsername
func (p *TReformationActivityServiceSelectRealNameByUsernameResult) GetSuccess() *TUsername {
  if !p.IsSetSuccess() {
    return TReformationActivityServiceSelectRealNameByUsernameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TReformationActivityServiceSelectRealNameByUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUsername{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectRealNameByUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectRealNameByUsernameResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
//  - Page
//  - PageSize
type TReformationActivityServiceSelectInviteRecordByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Page int32 `thrift:"page,3" db:"page" json:"page"`
  PageSize int32 `thrift:"pageSize,4" db:"pageSize" json:"pageSize"`
}

func NewTReformationActivityServiceSelectInviteRecordByUserIdArgs() *TReformationActivityServiceSelectInviteRecordByUserIdArgs {
  return &TReformationActivityServiceSelectInviteRecordByUserIdArgs{}
}


func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) GetUserId() int32 {
  return p.UserId
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) GetPage() int32 {
  return p.Page
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) GetPageSize() int32 {
  return p.PageSize
}
func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectInviteRecordByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:page: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageSize: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInviteRecordByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectInviteRecordByUserIdResult struct {
  Success []*InviteRecord `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectInviteRecordByUserIdResult() *TReformationActivityServiceSelectInviteRecordByUserIdResult {
  return &TReformationActivityServiceSelectInviteRecordByUserIdResult{}
}

var TReformationActivityServiceSelectInviteRecordByUserIdResult_Success_DEFAULT []*InviteRecord

func (p *TReformationActivityServiceSelectInviteRecordByUserIdResult) GetSuccess() []*InviteRecord {
  return p.Success
}
func (p *TReformationActivityServiceSelectInviteRecordByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*InviteRecord, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &InviteRecord{}
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Success = append(p.Success, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectInviteRecordByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectInviteRecordByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInviteRecordByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TReformationActivityServiceSelectInviteNumByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTReformationActivityServiceSelectInviteNumByUserIdArgs() *TReformationActivityServiceSelectInviteNumByUserIdArgs {
  return &TReformationActivityServiceSelectInviteNumByUserIdArgs{}
}


func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectInviteNumByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInviteNumByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectInviteNumByUserIdResult struct {
  Success *InviteNum `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectInviteNumByUserIdResult() *TReformationActivityServiceSelectInviteNumByUserIdResult {
  return &TReformationActivityServiceSelectInviteNumByUserIdResult{}
}

var TReformationActivityServiceSelectInviteNumByUserIdResult_Success_DEFAULT *InviteNum
func (p *TReformationActivityServiceSelectInviteNumByUserIdResult) GetSuccess() *InviteNum {
  if !p.IsSetSuccess() {
    return TReformationActivityServiceSelectInviteNumByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TReformationActivityServiceSelectInviteNumByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &InviteNum{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectInviteNumByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectInviteNumByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInviteNumByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
//  - Page
//  - PageSize
type TReformationActivityServiceSelectRewardRecordByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Page int32 `thrift:"page,3" db:"page" json:"page"`
  PageSize int32 `thrift:"pageSize,4" db:"pageSize" json:"pageSize"`
}

func NewTReformationActivityServiceSelectRewardRecordByUserIdArgs() *TReformationActivityServiceSelectRewardRecordByUserIdArgs {
  return &TReformationActivityServiceSelectRewardRecordByUserIdArgs{}
}


func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) GetUserId() int32 {
  return p.UserId
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) GetPage() int32 {
  return p.Page
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) GetPageSize() int32 {
  return p.PageSize
}
func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectRewardRecordByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:page: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageSize: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectRewardRecordByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectRewardRecordByUserIdResult struct {
  Success []*RewardRecord `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectRewardRecordByUserIdResult() *TReformationActivityServiceSelectRewardRecordByUserIdResult {
  return &TReformationActivityServiceSelectRewardRecordByUserIdResult{}
}

var TReformationActivityServiceSelectRewardRecordByUserIdResult_Success_DEFAULT []*RewardRecord

func (p *TReformationActivityServiceSelectRewardRecordByUserIdResult) GetSuccess() []*RewardRecord {
  return p.Success
}
func (p *TReformationActivityServiceSelectRewardRecordByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RewardRecord, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem31 := &RewardRecord{}
    if err := _elem31.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem31), err)
    }
    p.Success = append(p.Success, _elem31)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectRewardRecordByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectRewardRecordByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectRewardRecordByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TReformationActivityServiceSelectRewardAmountByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTReformationActivityServiceSelectRewardAmountByUserIdArgs() *TReformationActivityServiceSelectRewardAmountByUserIdArgs {
  return &TReformationActivityServiceSelectRewardAmountByUserIdArgs{}
}


func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectRewardAmountByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectRewardAmountByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectRewardAmountByUserIdResult struct {
  Success []*RewardRecord `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectRewardAmountByUserIdResult() *TReformationActivityServiceSelectRewardAmountByUserIdResult {
  return &TReformationActivityServiceSelectRewardAmountByUserIdResult{}
}

var TReformationActivityServiceSelectRewardAmountByUserIdResult_Success_DEFAULT []*RewardRecord

func (p *TReformationActivityServiceSelectRewardAmountByUserIdResult) GetSuccess() []*RewardRecord {
  return p.Success
}
func (p *TReformationActivityServiceSelectRewardAmountByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RewardRecord, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem32 := &RewardRecord{}
    if err := _elem32.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
    }
    p.Success = append(p.Success, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectRewardAmountByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectRewardAmountByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectRewardAmountByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TReformationActivityServiceSelectTotalRewardRecordsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTReformationActivityServiceSelectTotalRewardRecordsArgs() *TReformationActivityServiceSelectTotalRewardRecordsArgs {
  return &TReformationActivityServiceSelectTotalRewardRecordsArgs{}
}


func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTotalRewardRecords_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectTotalRewardRecordsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectTotalRewardRecordsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectTotalRewardRecordsResult() *TReformationActivityServiceSelectTotalRewardRecordsResult {
  return &TReformationActivityServiceSelectTotalRewardRecordsResult{}
}

var TReformationActivityServiceSelectTotalRewardRecordsResult_Success_DEFAULT int32
func (p *TReformationActivityServiceSelectTotalRewardRecordsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TReformationActivityServiceSelectTotalRewardRecordsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TReformationActivityServiceSelectTotalRewardRecordsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTotalRewardRecords_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectTotalRewardRecordsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectTotalRewardRecordsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TReformationActivityServiceSelectTotalInviteRecordsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTReformationActivityServiceSelectTotalInviteRecordsArgs() *TReformationActivityServiceSelectTotalInviteRecordsArgs {
  return &TReformationActivityServiceSelectTotalInviteRecordsArgs{}
}


func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTotalInviteRecords_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectTotalInviteRecordsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectTotalInviteRecordsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectTotalInviteRecordsResult() *TReformationActivityServiceSelectTotalInviteRecordsResult {
  return &TReformationActivityServiceSelectTotalInviteRecordsResult{}
}

var TReformationActivityServiceSelectTotalInviteRecordsResult_Success_DEFAULT int32
func (p *TReformationActivityServiceSelectTotalInviteRecordsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TReformationActivityServiceSelectTotalInviteRecordsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TReformationActivityServiceSelectTotalInviteRecordsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTotalInviteRecords_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectTotalInviteRecordsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectTotalInviteRecordsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - InviteeID
type TReformationActivityServiceSelectInvitersArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  InviteeID int32 `thrift:"invitee_id,2" db:"invitee_id" json:"invitee_id"`
}

func NewTReformationActivityServiceSelectInvitersArgs() *TReformationActivityServiceSelectInvitersArgs {
  return &TReformationActivityServiceSelectInvitersArgs{}
}


func (p *TReformationActivityServiceSelectInvitersArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectInvitersArgs) GetInviteeID() int32 {
  return p.InviteeID
}
func (p *TReformationActivityServiceSelectInvitersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInvitersArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInvitersArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.InviteeID = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInvitersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectInviters_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInvitersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInvitersArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invitee_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:invitee_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.InviteeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitee_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:invitee_id: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInvitersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInvitersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectInvitersResult struct {
  Success []*Inviter `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectInvitersResult() *TReformationActivityServiceSelectInvitersResult {
  return &TReformationActivityServiceSelectInvitersResult{}
}

var TReformationActivityServiceSelectInvitersResult_Success_DEFAULT []*Inviter

func (p *TReformationActivityServiceSelectInvitersResult) GetSuccess() []*Inviter {
  return p.Success
}
func (p *TReformationActivityServiceSelectInvitersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectInvitersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInvitersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Inviter, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem33 := &Inviter{}
    if err := _elem33.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem33), err)
    }
    p.Success = append(p.Success, _elem33)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInvitersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectInviters_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInvitersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectInvitersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInvitersResult(%+v)", *p)
}

// Attributes:
//  - TraceId
type TReformationActivityServiceGetCandyParameterArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewTReformationActivityServiceGetCandyParameterArgs() *TReformationActivityServiceGetCandyParameterArgs {
  return &TReformationActivityServiceGetCandyParameterArgs{}
}


func (p *TReformationActivityServiceGetCandyParameterArgs) GetTraceId() string {
  return p.TraceId
}
func (p *TReformationActivityServiceGetCandyParameterArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceGetCandyParameterArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceGetCandyParameterArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCandyParameter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceGetCandyParameterArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceGetCandyParameterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceGetCandyParameterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceGetCandyParameterResult struct {
  Success *TCandyParameter `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceGetCandyParameterResult() *TReformationActivityServiceGetCandyParameterResult {
  return &TReformationActivityServiceGetCandyParameterResult{}
}

var TReformationActivityServiceGetCandyParameterResult_Success_DEFAULT *TCandyParameter
func (p *TReformationActivityServiceGetCandyParameterResult) GetSuccess() *TCandyParameter {
  if !p.IsSetSuccess() {
    return TReformationActivityServiceGetCandyParameterResult_Success_DEFAULT
  }
return p.Success
}
func (p *TReformationActivityServiceGetCandyParameterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceGetCandyParameterResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceGetCandyParameterResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TCandyParameter{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TReformationActivityServiceGetCandyParameterResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCandyParameter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceGetCandyParameterResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceGetCandyParameterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceGetCandyParameterResult(%+v)", *p)
}


type TActivityService interface {
  // Parameters:
  //  - TraceId
  GetCandyParameter(ctx context.Context, traceId string) (r *TCandyParameter, err error)
}

type TActivityServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTActivityService instead
func NewTActivityServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TActivityServiceClient {
  return &TActivityServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTActivityService instead
func NewTActivityServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TActivityServiceClient {
  return &TActivityServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTActivityServiceClient(c thrift.TClient) *TActivityServiceClient {
  return &TActivityServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
func (p *TActivityServiceClient) GetCandyParameter(ctx context.Context, traceId string) (r *TCandyParameter, err error) {
  var _args67 TActivityServiceGetCandyParameterArgs
  _args67.TraceId = traceId
  var _result68 TActivityServiceGetCandyParameterResult
  if err = p.c.Call(ctx, "getCandyParameter", &_args67, &_result68); err != nil {
    return
  }
  return _result68.GetSuccess(), nil
}

type TActivityServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TActivityService
}

func (p *TActivityServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TActivityServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TActivityServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTActivityServiceProcessor(handler TActivityService) *TActivityServiceProcessor {

  self69 := &TActivityServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self69.processorMap["getCandyParameter"] = &tActivityServiceProcessorGetCandyParameter{handler:handler}
return self69
}

func (p *TActivityServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x70 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x70.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x70

}

type tActivityServiceProcessorGetCandyParameter struct {
  handler TActivityService
}

func (p *tActivityServiceProcessorGetCandyParameter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TActivityServiceGetCandyParameterArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCandyParameter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TActivityServiceGetCandyParameterResult{}
var retval *TCandyParameter
  var err2 error
  if retval, err2 = p.handler.GetCandyParameter(ctx, args.TraceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCandyParameter: " + err2.Error())
    oprot.WriteMessageBegin("getCandyParameter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCandyParameter", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
type TActivityServiceGetCandyParameterArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewTActivityServiceGetCandyParameterArgs() *TActivityServiceGetCandyParameterArgs {
  return &TActivityServiceGetCandyParameterArgs{}
}


func (p *TActivityServiceGetCandyParameterArgs) GetTraceId() string {
  return p.TraceId
}
func (p *TActivityServiceGetCandyParameterArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActivityServiceGetCandyParameterArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TActivityServiceGetCandyParameterArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCandyParameter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActivityServiceGetCandyParameterArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TActivityServiceGetCandyParameterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActivityServiceGetCandyParameterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TActivityServiceGetCandyParameterResult struct {
  Success *TCandyParameter `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTActivityServiceGetCandyParameterResult() *TActivityServiceGetCandyParameterResult {
  return &TActivityServiceGetCandyParameterResult{}
}

var TActivityServiceGetCandyParameterResult_Success_DEFAULT *TCandyParameter
func (p *TActivityServiceGetCandyParameterResult) GetSuccess() *TCandyParameter {
  if !p.IsSetSuccess() {
    return TActivityServiceGetCandyParameterResult_Success_DEFAULT
  }
return p.Success
}
func (p *TActivityServiceGetCandyParameterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TActivityServiceGetCandyParameterResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActivityServiceGetCandyParameterResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TCandyParameter{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TActivityServiceGetCandyParameterResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCandyParameter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActivityServiceGetCandyParameterResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TActivityServiceGetCandyParameterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActivityServiceGetCandyParameterResult(%+v)", *p)
}


