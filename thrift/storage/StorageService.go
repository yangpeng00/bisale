// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package storage

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Code
//  - Message
type Status struct {
  Code int32 `thrift:"Code,1" db:"Code" json:"Code"`
  Message string `thrift:"Message,2" db:"Message" json:"Message"`
}

func NewStatus() *Status {
  return &Status{}
}


func (p *Status) GetCode() int32 {
  return p.Code
}

func (p *Status) GetMessage() string {
  return p.Message
}
func (p *Status) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Status)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Status)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *Status) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Status"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Status) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Code: ", p), err) }
  return err
}

func (p *Status) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Message: ", p), err) }
  return err
}

func (p *Status) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Status(%+v)", *p)
}

func (p *Status) Error() string {
  return p.String()
}

// Attributes:
//  - Name
//  - Path
//  - Type
//  - MimeType
//  - Size
//  - Meta
type File struct {
  Name string `thrift:"Name,1" db:"Name" json:"Name"`
  Path string `thrift:"Path,2" db:"Path" json:"Path"`
  Type string `thrift:"Type,3" db:"Type" json:"Type"`
  MimeType string `thrift:"MimeType,4" db:"MimeType" json:"MimeType"`
  Size int32 `thrift:"Size,5" db:"Size" json:"Size"`
  Meta string `thrift:"Meta,6" db:"Meta" json:"Meta"`
}

func NewFile() *File {
  return &File{}
}


func (p *File) GetName() string {
  return p.Name
}

func (p *File) GetPath() string {
  return p.Path
}

func (p *File) GetType() string {
  return p.Type
}

func (p *File) GetMimeType() string {
  return p.MimeType
}

func (p *File) GetSize() int32 {
  return p.Size
}

func (p *File) GetMeta() string {
  return p.Meta
}
func (p *File) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *File)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *File)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *File)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *File)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MimeType = v
}
  return nil
}

func (p *File)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *File)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Meta = v
}
  return nil
}

func (p *File) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("File"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *File) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Name: ", p), err) }
  return err
}

func (p *File) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Path: ", p), err) }
  return err
}

func (p *File) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Type: ", p), err) }
  return err
}

func (p *File) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MimeType", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:MimeType: ", p), err) }
  if err := oprot.WriteString(string(p.MimeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MimeType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:MimeType: ", p), err) }
  return err
}

func (p *File) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Size", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Size (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Size: ", p), err) }
  return err
}

func (p *File) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Meta", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Meta: ", p), err) }
  if err := oprot.WriteString(string(p.Meta)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Meta (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Meta: ", p), err) }
  return err
}

func (p *File) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("File(%+v)", *p)
}

type Storage interface {
  Ping(ctx context.Context) (r bool, err error)
  Version(ctx context.Context) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - Bucket
  //  - Dir
  //  - Size
  //  - Expired
  GeneratePolicyToken(ctx context.Context, traceId string, bucket string, dir string, size int32, expired int32) (r string, err error)
  // Parameters:
  //  - TraceId
  GetBuckets(ctx context.Context, traceId string) (r []string, err error)
  // Parameters:
  //  - TraceId
  //  - Bucket
  //  - Path
  //  - Expired
  GetUrl(ctx context.Context, traceId string, bucket string, path string, expired int32) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - Bucket
  //  - Paths
  //  - Expired
  GetUrls(ctx context.Context, traceId string, bucket string, paths map[string]string, expired int32) (r map[string]string, err error)
  // Parameters:
  //  - TraceId
  //  - Bucket
  //  - Path
  //  - Process
  //  - Expired
  GetProcessUrl(ctx context.Context, traceId string, bucket string, path string, process string, expired int32) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - Bucket
  //  - Paths
  //  - Process
  //  - Expired
  GetProcessUrls(ctx context.Context, traceId string, bucket string, paths map[string]string, process string, expired int32) (r map[string]string, err error)
}

type StorageClient struct {
  c thrift.TClient
}

// Deprecated: Use NewStorage instead
func NewStorageClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StorageClient {
  return &StorageClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewStorage instead
func NewStorageClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StorageClient {
  return &StorageClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewStorageClient(c thrift.TClient) *StorageClient {
  return &StorageClient{
    c: c,
  }
}

func (p *StorageClient) Ping(ctx context.Context) (r bool, err error) {
  var _args0 StoragePingArgs
  var _result1 StoragePingResult
  if err = p.c.Call(ctx, "Ping", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Status!= nil:
    return r, _result1.Status
  }

  return _result1.GetSuccess(), nil
}

func (p *StorageClient) Version(ctx context.Context) (r string, err error) {
  var _args2 StorageVersionArgs
  var _result3 StorageVersionResult
  if err = p.c.Call(ctx, "Version", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Status!= nil:
    return r, _result3.Status
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Bucket
//  - Dir
//  - Size
//  - Expired
func (p *StorageClient) GeneratePolicyToken(ctx context.Context, traceId string, bucket string, dir string, size int32, expired int32) (r string, err error) {
  var _args4 StorageGeneratePolicyTokenArgs
  _args4.TraceId = traceId
  _args4.Bucket = bucket
  _args4.Dir = dir
  _args4.Size = size
  _args4.Expired = expired
  var _result5 StorageGeneratePolicyTokenResult
  if err = p.c.Call(ctx, "GeneratePolicyToken", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Status!= nil:
    return r, _result5.Status
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
func (p *StorageClient) GetBuckets(ctx context.Context, traceId string) (r []string, err error) {
  var _args6 StorageGetBucketsArgs
  _args6.TraceId = traceId
  var _result7 StorageGetBucketsResult
  if err = p.c.Call(ctx, "GetBuckets", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.Status!= nil:
    return r, _result7.Status
  }

  return _result7.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Bucket
//  - Path
//  - Expired
func (p *StorageClient) GetUrl(ctx context.Context, traceId string, bucket string, path string, expired int32) (r string, err error) {
  var _args8 StorageGetUrlArgs
  _args8.TraceId = traceId
  _args8.Bucket = bucket
  _args8.Path = path
  _args8.Expired = expired
  var _result9 StorageGetUrlResult
  if err = p.c.Call(ctx, "GetUrl", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.Status!= nil:
    return r, _result9.Status
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Bucket
//  - Paths
//  - Expired
func (p *StorageClient) GetUrls(ctx context.Context, traceId string, bucket string, paths map[string]string, expired int32) (r map[string]string, err error) {
  var _args10 StorageGetUrlsArgs
  _args10.TraceId = traceId
  _args10.Bucket = bucket
  _args10.Paths = paths
  _args10.Expired = expired
  var _result11 StorageGetUrlsResult
  if err = p.c.Call(ctx, "GetUrls", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.Status!= nil:
    return r, _result11.Status
  }

  return _result11.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Bucket
//  - Path
//  - Process
//  - Expired
func (p *StorageClient) GetProcessUrl(ctx context.Context, traceId string, bucket string, path string, process string, expired int32) (r string, err error) {
  var _args12 StorageGetProcessUrlArgs
  _args12.TraceId = traceId
  _args12.Bucket = bucket
  _args12.Path = path
  _args12.Process = process
  _args12.Expired = expired
  var _result13 StorageGetProcessUrlResult
  if err = p.c.Call(ctx, "GetProcessUrl", &_args12, &_result13); err != nil {
    return
  }
  switch {
  case _result13.Status!= nil:
    return r, _result13.Status
  }

  return _result13.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Bucket
//  - Paths
//  - Process
//  - Expired
func (p *StorageClient) GetProcessUrls(ctx context.Context, traceId string, bucket string, paths map[string]string, process string, expired int32) (r map[string]string, err error) {
  var _args14 StorageGetProcessUrlsArgs
  _args14.TraceId = traceId
  _args14.Bucket = bucket
  _args14.Paths = paths
  _args14.Process = process
  _args14.Expired = expired
  var _result15 StorageGetProcessUrlsResult
  if err = p.c.Call(ctx, "GetProcessUrls", &_args14, &_result15); err != nil {
    return
  }
  switch {
  case _result15.Status!= nil:
    return r, _result15.Status
  }

  return _result15.GetSuccess(), nil
}

type StorageProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Storage
}

func (p *StorageProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *StorageProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *StorageProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewStorageProcessor(handler Storage) *StorageProcessor {

  self16 := &StorageProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["Ping"] = &storageProcessorPing{handler:handler}
  self16.processorMap["Version"] = &storageProcessorVersion{handler:handler}
  self16.processorMap["GeneratePolicyToken"] = &storageProcessorGeneratePolicyToken{handler:handler}
  self16.processorMap["GetBuckets"] = &storageProcessorGetBuckets{handler:handler}
  self16.processorMap["GetUrl"] = &storageProcessorGetUrl{handler:handler}
  self16.processorMap["GetUrls"] = &storageProcessorGetUrls{handler:handler}
  self16.processorMap["GetProcessUrl"] = &storageProcessorGetProcessUrl{handler:handler}
  self16.processorMap["GetProcessUrls"] = &storageProcessorGetProcessUrls{handler:handler}
return self16
}

func (p *StorageProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x17.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x17

}

type storageProcessorPing struct {
  handler Storage
}

func (p *storageProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StoragePingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StoragePingResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Ping(ctx); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type storageProcessorVersion struct {
  handler Storage
}

func (p *storageProcessorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StorageVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StorageVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Version(ctx); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Version: " + err2.Error())
    oprot.WriteMessageBegin("Version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Version", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type storageProcessorGeneratePolicyToken struct {
  handler Storage
}

func (p *storageProcessorGeneratePolicyToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StorageGeneratePolicyTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GeneratePolicyToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StorageGeneratePolicyTokenResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GeneratePolicyToken(ctx, args.TraceId, args.Bucket, args.Dir, args.Size, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneratePolicyToken: " + err2.Error())
    oprot.WriteMessageBegin("GeneratePolicyToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GeneratePolicyToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type storageProcessorGetBuckets struct {
  handler Storage
}

func (p *storageProcessorGetBuckets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StorageGetBucketsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetBuckets", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StorageGetBucketsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetBuckets(ctx, args.TraceId); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetBuckets: " + err2.Error())
    oprot.WriteMessageBegin("GetBuckets", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetBuckets", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type storageProcessorGetUrl struct {
  handler Storage
}

func (p *storageProcessorGetUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StorageGetUrlArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUrl", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StorageGetUrlResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetUrl(ctx, args.TraceId, args.Bucket, args.Path, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUrl: " + err2.Error())
    oprot.WriteMessageBegin("GetUrl", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetUrl", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type storageProcessorGetUrls struct {
  handler Storage
}

func (p *storageProcessorGetUrls) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StorageGetUrlsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUrls", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StorageGetUrlsResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetUrls(ctx, args.TraceId, args.Bucket, args.Paths, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUrls: " + err2.Error())
    oprot.WriteMessageBegin("GetUrls", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetUrls", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type storageProcessorGetProcessUrl struct {
  handler Storage
}

func (p *storageProcessorGetProcessUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StorageGetProcessUrlArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetProcessUrl", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StorageGetProcessUrlResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetProcessUrl(ctx, args.TraceId, args.Bucket, args.Path, args.Process, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProcessUrl: " + err2.Error())
    oprot.WriteMessageBegin("GetProcessUrl", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetProcessUrl", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type storageProcessorGetProcessUrls struct {
  handler Storage
}

func (p *storageProcessorGetProcessUrls) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StorageGetProcessUrlsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetProcessUrls", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StorageGetProcessUrlsResult{}
var retval map[string]string
  var err2 error
  if retval, err2 = p.handler.GetProcessUrls(ctx, args.TraceId, args.Bucket, args.Paths, args.Process, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProcessUrls: " + err2.Error())
    oprot.WriteMessageBegin("GetProcessUrls", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetProcessUrls", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type StoragePingArgs struct {
}

func NewStoragePingArgs() *StoragePingArgs {
  return &StoragePingArgs{}
}

func (p *StoragePingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StoragePingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StoragePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StoragePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type StoragePingResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewStoragePingResult() *StoragePingResult {
  return &StoragePingResult{}
}

var StoragePingResult_Success_DEFAULT bool
func (p *StoragePingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return StoragePingResult_Success_DEFAULT
  }
return *p.Success
}
var StoragePingResult_Status_DEFAULT *Status
func (p *StoragePingResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return StoragePingResult_Status_DEFAULT
  }
return p.Status
}
func (p *StoragePingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StoragePingResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StoragePingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StoragePingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StoragePingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StoragePingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StoragePingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StoragePingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *StoragePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StoragePingResult(%+v)", *p)
}

type StorageVersionArgs struct {
}

func NewStorageVersionArgs() *StorageVersionArgs {
  return &StorageVersionArgs{}
}

func (p *StorageVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type StorageVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewStorageVersionResult() *StorageVersionResult {
  return &StorageVersionResult{}
}

var StorageVersionResult_Success_DEFAULT string
func (p *StorageVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return StorageVersionResult_Success_DEFAULT
  }
return *p.Success
}
var StorageVersionResult_Status_DEFAULT *Status
func (p *StorageVersionResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return StorageVersionResult_Status_DEFAULT
  }
return p.Status
}
func (p *StorageVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageVersionResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StorageVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StorageVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StorageVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *StorageVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageVersionResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Bucket
//  - Dir
//  - Size
//  - Expired
type StorageGeneratePolicyTokenArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Bucket string `thrift:"bucket,2" db:"bucket" json:"bucket"`
  Dir string `thrift:"dir,3" db:"dir" json:"dir"`
  Size int32 `thrift:"size,4" db:"size" json:"size"`
  Expired int32 `thrift:"expired,5" db:"expired" json:"expired"`
}

func NewStorageGeneratePolicyTokenArgs() *StorageGeneratePolicyTokenArgs {
  return &StorageGeneratePolicyTokenArgs{}
}


func (p *StorageGeneratePolicyTokenArgs) GetTraceId() string {
  return p.TraceId
}

func (p *StorageGeneratePolicyTokenArgs) GetBucket() string {
  return p.Bucket
}

func (p *StorageGeneratePolicyTokenArgs) GetDir() string {
  return p.Dir
}

func (p *StorageGeneratePolicyTokenArgs) GetSize() int32 {
  return p.Size
}

func (p *StorageGeneratePolicyTokenArgs) GetExpired() int32 {
  return p.Expired
}
func (p *StorageGeneratePolicyTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGeneratePolicyTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *StorageGeneratePolicyTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Bucket = v
}
  return nil
}

func (p *StorageGeneratePolicyTokenArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Dir = v
}
  return nil
}

func (p *StorageGeneratePolicyTokenArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *StorageGeneratePolicyTokenArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *StorageGeneratePolicyTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GeneratePolicyToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGeneratePolicyTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *StorageGeneratePolicyTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucket", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bucket: ", p), err) }
  if err := oprot.WriteString(string(p.Bucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bucket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bucket: ", p), err) }
  return err
}

func (p *StorageGeneratePolicyTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dir", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dir: ", p), err) }
  if err := oprot.WriteString(string(p.Dir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dir (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dir: ", p), err) }
  return err
}

func (p *StorageGeneratePolicyTokenArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:size: ", p), err) }
  return err
}

func (p *StorageGeneratePolicyTokenArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:expired: ", p), err) }
  return err
}

func (p *StorageGeneratePolicyTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGeneratePolicyTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type StorageGeneratePolicyTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewStorageGeneratePolicyTokenResult() *StorageGeneratePolicyTokenResult {
  return &StorageGeneratePolicyTokenResult{}
}

var StorageGeneratePolicyTokenResult_Success_DEFAULT string
func (p *StorageGeneratePolicyTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return StorageGeneratePolicyTokenResult_Success_DEFAULT
  }
return *p.Success
}
var StorageGeneratePolicyTokenResult_Status_DEFAULT *Status
func (p *StorageGeneratePolicyTokenResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return StorageGeneratePolicyTokenResult_Status_DEFAULT
  }
return p.Status
}
func (p *StorageGeneratePolicyTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageGeneratePolicyTokenResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StorageGeneratePolicyTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGeneratePolicyTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StorageGeneratePolicyTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StorageGeneratePolicyTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GeneratePolicyToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGeneratePolicyTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageGeneratePolicyTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *StorageGeneratePolicyTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGeneratePolicyTokenResult(%+v)", *p)
}

// Attributes:
//  - TraceId
type StorageGetBucketsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewStorageGetBucketsArgs() *StorageGetBucketsArgs {
  return &StorageGetBucketsArgs{}
}


func (p *StorageGetBucketsArgs) GetTraceId() string {
  return p.TraceId
}
func (p *StorageGetBucketsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetBucketsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *StorageGetBucketsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBuckets_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetBucketsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *StorageGetBucketsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetBucketsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type StorageGetBucketsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewStorageGetBucketsResult() *StorageGetBucketsResult {
  return &StorageGetBucketsResult{}
}

var StorageGetBucketsResult_Success_DEFAULT []string

func (p *StorageGetBucketsResult) GetSuccess() []string {
  return p.Success
}
var StorageGetBucketsResult_Status_DEFAULT *Status
func (p *StorageGetBucketsResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return StorageGetBucketsResult_Status_DEFAULT
  }
return p.Status
}
func (p *StorageGetBucketsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageGetBucketsResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StorageGetBucketsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetBucketsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Success = append(p.Success, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StorageGetBucketsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StorageGetBucketsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetBuckets_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetBucketsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageGetBucketsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *StorageGetBucketsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetBucketsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Bucket
//  - Path
//  - Expired
type StorageGetUrlArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Bucket string `thrift:"bucket,2" db:"bucket" json:"bucket"`
  Path string `thrift:"path,3" db:"path" json:"path"`
  Expired int32 `thrift:"expired,4" db:"expired" json:"expired"`
}

func NewStorageGetUrlArgs() *StorageGetUrlArgs {
  return &StorageGetUrlArgs{}
}


func (p *StorageGetUrlArgs) GetTraceId() string {
  return p.TraceId
}

func (p *StorageGetUrlArgs) GetBucket() string {
  return p.Bucket
}

func (p *StorageGetUrlArgs) GetPath() string {
  return p.Path
}

func (p *StorageGetUrlArgs) GetExpired() int32 {
  return p.Expired
}
func (p *StorageGetUrlArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetUrlArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *StorageGetUrlArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Bucket = v
}
  return nil
}

func (p *StorageGetUrlArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *StorageGetUrlArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *StorageGetUrlArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUrl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *StorageGetUrlArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucket", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bucket: ", p), err) }
  if err := oprot.WriteString(string(p.Bucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bucket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bucket: ", p), err) }
  return err
}

func (p *StorageGetUrlArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:path: ", p), err) }
  return err
}

func (p *StorageGetUrlArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expired: ", p), err) }
  return err
}

func (p *StorageGetUrlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type StorageGetUrlResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewStorageGetUrlResult() *StorageGetUrlResult {
  return &StorageGetUrlResult{}
}

var StorageGetUrlResult_Success_DEFAULT string
func (p *StorageGetUrlResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return StorageGetUrlResult_Success_DEFAULT
  }
return *p.Success
}
var StorageGetUrlResult_Status_DEFAULT *Status
func (p *StorageGetUrlResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return StorageGetUrlResult_Status_DEFAULT
  }
return p.Status
}
func (p *StorageGetUrlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageGetUrlResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StorageGetUrlResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetUrlResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StorageGetUrlResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StorageGetUrlResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUrl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageGetUrlResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *StorageGetUrlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetUrlResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Bucket
//  - Paths
//  - Expired
type StorageGetUrlsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Bucket string `thrift:"bucket,2" db:"bucket" json:"bucket"`
  Paths map[string]string `thrift:"paths,3" db:"paths" json:"paths"`
  Expired int32 `thrift:"expired,4" db:"expired" json:"expired"`
}

func NewStorageGetUrlsArgs() *StorageGetUrlsArgs {
  return &StorageGetUrlsArgs{}
}


func (p *StorageGetUrlsArgs) GetTraceId() string {
  return p.TraceId
}

func (p *StorageGetUrlsArgs) GetBucket() string {
  return p.Bucket
}

func (p *StorageGetUrlsArgs) GetPaths() map[string]string {
  return p.Paths
}

func (p *StorageGetUrlsArgs) GetExpired() int32 {
  return p.Expired
}
func (p *StorageGetUrlsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetUrlsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *StorageGetUrlsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Bucket = v
}
  return nil
}

func (p *StorageGetUrlsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Paths =  tMap
  for i := 0; i < size; i ++ {
var _key19 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key19 = v
}
var _val20 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val20 = v
}
    p.Paths[_key19] = _val20
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StorageGetUrlsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *StorageGetUrlsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUrls_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetUrlsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *StorageGetUrlsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucket", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bucket: ", p), err) }
  if err := oprot.WriteString(string(p.Bucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bucket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bucket: ", p), err) }
  return err
}

func (p *StorageGetUrlsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("paths", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paths: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Paths)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Paths {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paths: ", p), err) }
  return err
}

func (p *StorageGetUrlsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expired: ", p), err) }
  return err
}

func (p *StorageGetUrlsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetUrlsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type StorageGetUrlsResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewStorageGetUrlsResult() *StorageGetUrlsResult {
  return &StorageGetUrlsResult{}
}

var StorageGetUrlsResult_Success_DEFAULT map[string]string

func (p *StorageGetUrlsResult) GetSuccess() map[string]string {
  return p.Success
}
var StorageGetUrlsResult_Status_DEFAULT *Status
func (p *StorageGetUrlsResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return StorageGetUrlsResult_Status_DEFAULT
  }
return p.Status
}
func (p *StorageGetUrlsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageGetUrlsResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StorageGetUrlsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetUrlsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key21 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key21 = v
}
var _val22 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val22 = v
}
    p.Success[_key21] = _val22
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StorageGetUrlsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StorageGetUrlsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUrls_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetUrlsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageGetUrlsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *StorageGetUrlsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetUrlsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Bucket
//  - Path
//  - Process
//  - Expired
type StorageGetProcessUrlArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Bucket string `thrift:"bucket,2" db:"bucket" json:"bucket"`
  Path string `thrift:"path,3" db:"path" json:"path"`
  Process string `thrift:"process,4" db:"process" json:"process"`
  Expired int32 `thrift:"expired,5" db:"expired" json:"expired"`
}

func NewStorageGetProcessUrlArgs() *StorageGetProcessUrlArgs {
  return &StorageGetProcessUrlArgs{}
}


func (p *StorageGetProcessUrlArgs) GetTraceId() string {
  return p.TraceId
}

func (p *StorageGetProcessUrlArgs) GetBucket() string {
  return p.Bucket
}

func (p *StorageGetProcessUrlArgs) GetPath() string {
  return p.Path
}

func (p *StorageGetProcessUrlArgs) GetProcess() string {
  return p.Process
}

func (p *StorageGetProcessUrlArgs) GetExpired() int32 {
  return p.Expired
}
func (p *StorageGetProcessUrlArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetProcessUrlArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *StorageGetProcessUrlArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Bucket = v
}
  return nil
}

func (p *StorageGetProcessUrlArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *StorageGetProcessUrlArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Process = v
}
  return nil
}

func (p *StorageGetProcessUrlArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *StorageGetProcessUrlArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProcessUrl_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetProcessUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucket", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bucket: ", p), err) }
  if err := oprot.WriteString(string(p.Bucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bucket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bucket: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:path: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("process", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:process: ", p), err) }
  if err := oprot.WriteString(string(p.Process)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.process (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:process: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:expired: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetProcessUrlArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type StorageGetProcessUrlResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewStorageGetProcessUrlResult() *StorageGetProcessUrlResult {
  return &StorageGetProcessUrlResult{}
}

var StorageGetProcessUrlResult_Success_DEFAULT string
func (p *StorageGetProcessUrlResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return StorageGetProcessUrlResult_Success_DEFAULT
  }
return *p.Success
}
var StorageGetProcessUrlResult_Status_DEFAULT *Status
func (p *StorageGetProcessUrlResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return StorageGetProcessUrlResult_Status_DEFAULT
  }
return p.Status
}
func (p *StorageGetProcessUrlResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageGetProcessUrlResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StorageGetProcessUrlResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetProcessUrlResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *StorageGetProcessUrlResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StorageGetProcessUrlResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProcessUrl_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetProcessUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageGetProcessUrlResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *StorageGetProcessUrlResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetProcessUrlResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Bucket
//  - Paths
//  - Process
//  - Expired
type StorageGetProcessUrlsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Bucket string `thrift:"bucket,2" db:"bucket" json:"bucket"`
  Paths map[string]string `thrift:"paths,3" db:"paths" json:"paths"`
  Process string `thrift:"process,4" db:"process" json:"process"`
  Expired int32 `thrift:"expired,5" db:"expired" json:"expired"`
}

func NewStorageGetProcessUrlsArgs() *StorageGetProcessUrlsArgs {
  return &StorageGetProcessUrlsArgs{}
}


func (p *StorageGetProcessUrlsArgs) GetTraceId() string {
  return p.TraceId
}

func (p *StorageGetProcessUrlsArgs) GetBucket() string {
  return p.Bucket
}

func (p *StorageGetProcessUrlsArgs) GetPaths() map[string]string {
  return p.Paths
}

func (p *StorageGetProcessUrlsArgs) GetProcess() string {
  return p.Process
}

func (p *StorageGetProcessUrlsArgs) GetExpired() int32 {
  return p.Expired
}
func (p *StorageGetProcessUrlsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetProcessUrlsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *StorageGetProcessUrlsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Bucket = v
}
  return nil
}

func (p *StorageGetProcessUrlsArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Paths =  tMap
  for i := 0; i < size; i ++ {
var _key23 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key23 = v
}
var _val24 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val24 = v
}
    p.Paths[_key23] = _val24
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StorageGetProcessUrlsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Process = v
}
  return nil
}

func (p *StorageGetProcessUrlsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *StorageGetProcessUrlsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProcessUrls_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetProcessUrlsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bucket", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bucket: ", p), err) }
  if err := oprot.WriteString(string(p.Bucket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bucket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bucket: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("paths", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paths: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Paths)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Paths {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paths: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("process", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:process: ", p), err) }
  if err := oprot.WriteString(string(p.Process)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.process (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:process: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:expired: ", p), err) }
  return err
}

func (p *StorageGetProcessUrlsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetProcessUrlsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type StorageGetProcessUrlsResult struct {
  Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewStorageGetProcessUrlsResult() *StorageGetProcessUrlsResult {
  return &StorageGetProcessUrlsResult{}
}

var StorageGetProcessUrlsResult_Success_DEFAULT map[string]string

func (p *StorageGetProcessUrlsResult) GetSuccess() map[string]string {
  return p.Success
}
var StorageGetProcessUrlsResult_Status_DEFAULT *Status
func (p *StorageGetProcessUrlsResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return StorageGetProcessUrlsResult_Status_DEFAULT
  }
return p.Status
}
func (p *StorageGetProcessUrlsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *StorageGetProcessUrlsResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *StorageGetProcessUrlsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StorageGetProcessUrlsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key25 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key25 = v
}
var _val26 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val26 = v
}
    p.Success[_key25] = _val26
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StorageGetProcessUrlsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *StorageGetProcessUrlsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProcessUrls_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StorageGetProcessUrlsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *StorageGetProcessUrlsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *StorageGetProcessUrlsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StorageGetProcessUrlsResult(%+v)", *p)
}


