// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package reformation

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - InviterName
//  - InviteeName
type TParticipantRelation struct {
  InviterName string `thrift:"inviterName,1" db:"inviterName" json:"inviterName"`
  InviteeName string `thrift:"inviteeName,2" db:"inviteeName" json:"inviteeName"`
}

func NewTParticipantRelation() *TParticipantRelation {
  return &TParticipantRelation{}
}


func (p *TParticipantRelation) GetInviterName() string {
  return p.InviterName
}

func (p *TParticipantRelation) GetInviteeName() string {
  return p.InviteeName
}
func (p *TParticipantRelation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TParticipantRelation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.InviterName = v
}
  return nil
}

func (p *TParticipantRelation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.InviteeName = v
}
  return nil
}

func (p *TParticipantRelation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TParticipantRelation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TParticipantRelation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inviterName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inviterName: ", p), err) }
  if err := oprot.WriteString(string(p.InviterName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inviterName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inviterName: ", p), err) }
  return err
}

func (p *TParticipantRelation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inviteeName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inviteeName: ", p), err) }
  if err := oprot.WriteString(string(p.InviteeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inviteeName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inviteeName: ", p), err) }
  return err
}

func (p *TParticipantRelation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TParticipantRelation(%+v)", *p)
}

// Attributes:
//  - Username
//  - TotalReward
type TTopParticipant struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  TotalReward int32 `thrift:"totalReward,2" db:"totalReward" json:"totalReward"`
}

func NewTTopParticipant() *TTopParticipant {
  return &TTopParticipant{}
}


func (p *TTopParticipant) GetUsername() string {
  return p.Username
}

func (p *TTopParticipant) GetTotalReward() int32 {
  return p.TotalReward
}
func (p *TTopParticipant) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTopParticipant)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TTopParticipant)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalReward = v
}
  return nil
}

func (p *TTopParticipant) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTopParticipant"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTopParticipant) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *TTopParticipant) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalReward", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalReward: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalReward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalReward (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalReward: ", p), err) }
  return err
}

func (p *TTopParticipant) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTopParticipant(%+v)", *p)
}

// Attributes:
//  - Username
//  - Level
//  - Reward
//  - Enabled
//  - CreatedAt
//  - UpdatedAt
type TInvitee struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  Level int32 `thrift:"level,2" db:"level" json:"level"`
  Reward int32 `thrift:"reward,3" db:"reward" json:"reward"`
  Enabled bool `thrift:"enabled,4" db:"enabled" json:"enabled"`
  CreatedAt int64 `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  UpdatedAt int64 `thrift:"updatedAt,6" db:"updatedAt" json:"updatedAt"`
}

func NewTInvitee() *TInvitee {
  return &TInvitee{}
}


func (p *TInvitee) GetUsername() string {
  return p.Username
}

func (p *TInvitee) GetLevel() int32 {
  return p.Level
}

func (p *TInvitee) GetReward() int32 {
  return p.Reward
}

func (p *TInvitee) GetEnabled() bool {
  return p.Enabled
}

func (p *TInvitee) GetCreatedAt() int64 {
  return p.CreatedAt
}

func (p *TInvitee) GetUpdatedAt() int64 {
  return p.UpdatedAt
}
func (p *TInvitee) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInvitee)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TInvitee)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *TInvitee)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reward = v
}
  return nil
}

func (p *TInvitee)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Enabled = v
}
  return nil
}

func (p *TInvitee)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TInvitee)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TInvitee) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInvitee"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInvitee) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *TInvitee) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *TInvitee) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reward", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reward: ", p), err) }
  if err := oprot.WriteI32(int32(p.Reward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reward (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reward: ", p), err) }
  return err
}

func (p *TInvitee) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:enabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enabled (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:enabled: ", p), err) }
  return err
}

func (p *TInvitee) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TInvitee) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updatedAt: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updatedAt: ", p), err) }
  return err
}

func (p *TInvitee) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInvitee(%+v)", *p)
}

// Attributes:
//  - Username
//  - Empty
type TUsername struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  Empty bool `thrift:"empty,2" db:"empty" json:"empty,omitempty"`
}

func NewTUsername() *TUsername {
  return &TUsername{}
}


func (p *TUsername) GetUsername() string {
  return p.Username
}
var TUsername_Empty_DEFAULT bool = false

func (p *TUsername) GetEmpty() bool {
  return p.Empty
}
func (p *TUsername) IsSetEmpty() bool {
  return p.Empty != TUsername_Empty_DEFAULT
}

func (p *TUsername) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUsername)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TUsername)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TUsername) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUsername"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUsername) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *TUsername) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:empty: ", p), err) }
  }
  return err
}

func (p *TUsername) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUsername(%+v)", *p)
}

type TReformationActivityService interface {
  // Parameters:
  //  - TraceId
  //  - ParticipantRelation
  InsertRelation(ctx context.Context, traceId string, participantRelation *TParticipantRelation) (err error)
  // Parameters:
  //  - TraceId
  SelectTop10Account(ctx context.Context, traceId string) (r []*TTopParticipant, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectInviteeListByUserId(ctx context.Context, traceId string, userId int32) (r []*TInvitee, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  EnableParticipant(ctx context.Context, traceId string, userId int32) (err error)
  // Parameters:
  //  - TraceId
  //  - Username
  SelectRealNameByUsername(ctx context.Context, traceId string, username string) (r *TUsername, err error)
}

type TReformationActivityServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTReformationActivityService instead
func NewTReformationActivityServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TReformationActivityServiceClient {
  return &TReformationActivityServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTReformationActivityService instead
func NewTReformationActivityServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TReformationActivityServiceClient {
  return &TReformationActivityServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTReformationActivityServiceClient(c thrift.TClient) *TReformationActivityServiceClient {
  return &TReformationActivityServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - ParticipantRelation
func (p *TReformationActivityServiceClient) InsertRelation(ctx context.Context, traceId string, participantRelation *TParticipantRelation) (err error) {
  var _args0 TReformationActivityServiceInsertRelationArgs
  _args0.TraceId = traceId
  _args0.ParticipantRelation = participantRelation
  var _result1 TReformationActivityServiceInsertRelationResult
  if err = p.c.Call(ctx, "InsertRelation", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
func (p *TReformationActivityServiceClient) SelectTop10Account(ctx context.Context, traceId string) (r []*TTopParticipant, err error) {
  var _args2 TReformationActivityServiceSelectTop10AccountArgs
  _args2.TraceId = traceId
  var _result3 TReformationActivityServiceSelectTop10AccountResult
  if err = p.c.Call(ctx, "SelectTop10Account", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TReformationActivityServiceClient) SelectInviteeListByUserId(ctx context.Context, traceId string, userId int32) (r []*TInvitee, err error) {
  var _args4 TReformationActivityServiceSelectInviteeListByUserIdArgs
  _args4.TraceId = traceId
  _args4.UserId = userId
  var _result5 TReformationActivityServiceSelectInviteeListByUserIdResult
  if err = p.c.Call(ctx, "SelectInviteeListByUserId", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TReformationActivityServiceClient) EnableParticipant(ctx context.Context, traceId string, userId int32) (err error) {
  var _args6 TReformationActivityServiceEnableParticipantArgs
  _args6.TraceId = traceId
  _args6.UserId = userId
  var _result7 TReformationActivityServiceEnableParticipantResult
  if err = p.c.Call(ctx, "EnableParticipant", &_args6, &_result7); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - Username
func (p *TReformationActivityServiceClient) SelectRealNameByUsername(ctx context.Context, traceId string, username string) (r *TUsername, err error) {
  var _args8 TReformationActivityServiceSelectRealNameByUsernameArgs
  _args8.TraceId = traceId
  _args8.Username = username
  var _result9 TReformationActivityServiceSelectRealNameByUsernameResult
  if err = p.c.Call(ctx, "selectRealNameByUsername", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

type TReformationActivityServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TReformationActivityService
}

func (p *TReformationActivityServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TReformationActivityServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TReformationActivityServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTReformationActivityServiceProcessor(handler TReformationActivityService) *TReformationActivityServiceProcessor {

  self10 := &TReformationActivityServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["InsertRelation"] = &tReformationActivityServiceProcessorInsertRelation{handler:handler}
  self10.processorMap["SelectTop10Account"] = &tReformationActivityServiceProcessorSelectTop10Account{handler:handler}
  self10.processorMap["SelectInviteeListByUserId"] = &tReformationActivityServiceProcessorSelectInviteeListByUserId{handler:handler}
  self10.processorMap["EnableParticipant"] = &tReformationActivityServiceProcessorEnableParticipant{handler:handler}
  self10.processorMap["selectRealNameByUsername"] = &tReformationActivityServiceProcessorSelectRealNameByUsername{handler:handler}
return self10
}

func (p *TReformationActivityServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x11

}

type tReformationActivityServiceProcessorInsertRelation struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorInsertRelation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceInsertRelationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InsertRelation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceInsertRelationResult{}
  var err2 error
  if err2 = p.handler.InsertRelation(ctx, args.TraceId, args.ParticipantRelation); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertRelation: " + err2.Error())
    oprot.WriteMessageBegin("InsertRelation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("InsertRelation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectTop10Account struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectTop10Account) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectTop10AccountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectTop10Account", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectTop10AccountResult{}
var retval []*TTopParticipant
  var err2 error
  if retval, err2 = p.handler.SelectTop10Account(ctx, args.TraceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectTop10Account: " + err2.Error())
    oprot.WriteMessageBegin("SelectTop10Account", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectTop10Account", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectInviteeListByUserId struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectInviteeListByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectInviteeListByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectInviteeListByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectInviteeListByUserIdResult{}
var retval []*TInvitee
  var err2 error
  if retval, err2 = p.handler.SelectInviteeListByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectInviteeListByUserId: " + err2.Error())
    oprot.WriteMessageBegin("SelectInviteeListByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectInviteeListByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorEnableParticipant struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorEnableParticipant) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceEnableParticipantArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("EnableParticipant", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceEnableParticipantResult{}
  var err2 error
  if err2 = p.handler.EnableParticipant(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EnableParticipant: " + err2.Error())
    oprot.WriteMessageBegin("EnableParticipant", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("EnableParticipant", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tReformationActivityServiceProcessorSelectRealNameByUsername struct {
  handler TReformationActivityService
}

func (p *tReformationActivityServiceProcessorSelectRealNameByUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TReformationActivityServiceSelectRealNameByUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectRealNameByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TReformationActivityServiceSelectRealNameByUsernameResult{}
var retval *TUsername
  var err2 error
  if retval, err2 = p.handler.SelectRealNameByUsername(ctx, args.TraceId, args.Username); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectRealNameByUsername: " + err2.Error())
    oprot.WriteMessageBegin("selectRealNameByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectRealNameByUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - ParticipantRelation
type TReformationActivityServiceInsertRelationArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ParticipantRelation *TParticipantRelation `thrift:"participantRelation,2" db:"participantRelation" json:"participantRelation"`
}

func NewTReformationActivityServiceInsertRelationArgs() *TReformationActivityServiceInsertRelationArgs {
  return &TReformationActivityServiceInsertRelationArgs{}
}


func (p *TReformationActivityServiceInsertRelationArgs) GetTraceId() string {
  return p.TraceId
}
var TReformationActivityServiceInsertRelationArgs_ParticipantRelation_DEFAULT *TParticipantRelation
func (p *TReformationActivityServiceInsertRelationArgs) GetParticipantRelation() *TParticipantRelation {
  if !p.IsSetParticipantRelation() {
    return TReformationActivityServiceInsertRelationArgs_ParticipantRelation_DEFAULT
  }
return p.ParticipantRelation
}
func (p *TReformationActivityServiceInsertRelationArgs) IsSetParticipantRelation() bool {
  return p.ParticipantRelation != nil
}

func (p *TReformationActivityServiceInsertRelationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceInsertRelationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceInsertRelationArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.ParticipantRelation = &TParticipantRelation{}
  if err := p.ParticipantRelation.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ParticipantRelation), err)
  }
  return nil
}

func (p *TReformationActivityServiceInsertRelationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertRelation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceInsertRelationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceInsertRelationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("participantRelation", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:participantRelation: ", p), err) }
  if err := p.ParticipantRelation.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ParticipantRelation), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:participantRelation: ", p), err) }
  return err
}

func (p *TReformationActivityServiceInsertRelationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceInsertRelationArgs(%+v)", *p)
}

type TReformationActivityServiceInsertRelationResult struct {
}

func NewTReformationActivityServiceInsertRelationResult() *TReformationActivityServiceInsertRelationResult {
  return &TReformationActivityServiceInsertRelationResult{}
}

func (p *TReformationActivityServiceInsertRelationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceInsertRelationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertRelation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceInsertRelationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceInsertRelationResult(%+v)", *p)
}

// Attributes:
//  - TraceId
type TReformationActivityServiceSelectTop10AccountArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewTReformationActivityServiceSelectTop10AccountArgs() *TReformationActivityServiceSelectTop10AccountArgs {
  return &TReformationActivityServiceSelectTop10AccountArgs{}
}


func (p *TReformationActivityServiceSelectTop10AccountArgs) GetTraceId() string {
  return p.TraceId
}
func (p *TReformationActivityServiceSelectTop10AccountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectTop10Account_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectTop10AccountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectTop10AccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectTop10AccountResult struct {
  Success []*TTopParticipant `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectTop10AccountResult() *TReformationActivityServiceSelectTop10AccountResult {
  return &TReformationActivityServiceSelectTop10AccountResult{}
}

var TReformationActivityServiceSelectTop10AccountResult_Success_DEFAULT []*TTopParticipant

func (p *TReformationActivityServiceSelectTop10AccountResult) GetSuccess() []*TTopParticipant {
  return p.Success
}
func (p *TReformationActivityServiceSelectTop10AccountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectTop10AccountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTopParticipant, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &TTopParticipant{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.Success = append(p.Success, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectTop10Account_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectTop10AccountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectTop10AccountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectTop10AccountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TReformationActivityServiceSelectInviteeListByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTReformationActivityServiceSelectInviteeListByUserIdArgs() *TReformationActivityServiceSelectInviteeListByUserIdArgs {
  return &TReformationActivityServiceSelectInviteeListByUserIdArgs{}
}


func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectInviteeListByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInviteeListByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectInviteeListByUserIdResult struct {
  Success []*TInvitee `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectInviteeListByUserIdResult() *TReformationActivityServiceSelectInviteeListByUserIdResult {
  return &TReformationActivityServiceSelectInviteeListByUserIdResult{}
}

var TReformationActivityServiceSelectInviteeListByUserIdResult_Success_DEFAULT []*TInvitee

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) GetSuccess() []*TInvitee {
  return p.Success
}
func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TInvitee, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &TInvitee{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.Success = append(p.Success, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectInviteeListByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectInviteeListByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectInviteeListByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TReformationActivityServiceEnableParticipantArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTReformationActivityServiceEnableParticipantArgs() *TReformationActivityServiceEnableParticipantArgs {
  return &TReformationActivityServiceEnableParticipantArgs{}
}


func (p *TReformationActivityServiceEnableParticipantArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceEnableParticipantArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TReformationActivityServiceEnableParticipantArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceEnableParticipantArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceEnableParticipantArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TReformationActivityServiceEnableParticipantArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EnableParticipant_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceEnableParticipantArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceEnableParticipantArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceEnableParticipantArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceEnableParticipantArgs(%+v)", *p)
}

type TReformationActivityServiceEnableParticipantResult struct {
}

func NewTReformationActivityServiceEnableParticipantResult() *TReformationActivityServiceEnableParticipantResult {
  return &TReformationActivityServiceEnableParticipantResult{}
}

func (p *TReformationActivityServiceEnableParticipantResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceEnableParticipantResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EnableParticipant_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceEnableParticipantResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceEnableParticipantResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Username
type TReformationActivityServiceSelectRealNameByUsernameArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewTReformationActivityServiceSelectRealNameByUsernameArgs() *TReformationActivityServiceSelectRealNameByUsernameArgs {
  return &TReformationActivityServiceSelectRealNameByUsernameArgs{}
}


func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) GetUsername() string {
  return p.Username
}
func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectRealNameByUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *TReformationActivityServiceSelectRealNameByUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectRealNameByUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TReformationActivityServiceSelectRealNameByUsernameResult struct {
  Success *TUsername `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTReformationActivityServiceSelectRealNameByUsernameResult() *TReformationActivityServiceSelectRealNameByUsernameResult {
  return &TReformationActivityServiceSelectRealNameByUsernameResult{}
}

var TReformationActivityServiceSelectRealNameByUsernameResult_Success_DEFAULT *TUsername
func (p *TReformationActivityServiceSelectRealNameByUsernameResult) GetSuccess() *TUsername {
  if !p.IsSetSuccess() {
    return TReformationActivityServiceSelectRealNameByUsernameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TReformationActivityServiceSelectRealNameByUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUsername{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectRealNameByUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TReformationActivityServiceSelectRealNameByUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReformationActivityServiceSelectRealNameByUsernameResult(%+v)", *p)
}


