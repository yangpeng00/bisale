// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package message

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Code
//  - Message
type Status struct {
  Code int32 `thrift:"Code,1" db:"Code" json:"Code"`
  Message string `thrift:"Message,2" db:"Message" json:"Message"`
}

func NewStatus() *Status {
  return &Status{}
}

func (p *Status) GetCode() int32 {
  return p.Code
}

func (p *Status) GetMessage() string {
  return p.Message
}
func (p *Status) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Status)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Status)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *Status) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Status"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Status) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Code: ", p), err) }
  return err
}

func (p *Status) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Message: ", p), err) }
  return err
}

func (p *Status) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Status(%+v)", *p)
}

func (p *Status) Error() string {
  return p.String()
}

type Message interface {
  Ping(ctx context.Context) (r bool, err error)
  Version(ctx context.Context) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - AppId
  //  - Mobile
  //  - Content
  //  - Data
  //  - Lang
  //  - Lock
  SendSMS(ctx context.Context, traceId string, appId string, mobile string, content string, data string, lang string, lock int32) (err error)
  // Parameters:
  //  - TraceId
  //  - AppId
  //  - Mail
  //  - Content
  //  - Data
  //  - Lang
  //  - Lock
  SendMail(ctx context.Context, traceId string, appId string, mail string, content string, data string, lang string, lock int32) (err error)
  // Parameters:
  //  - TraceId
  //  - AppId
  //  - Mobiles
  //  - Content
  //  - Data
  //  - Lang
  BatchSendSMS(ctx context.Context, traceId string, appId string, mobiles []string, content string, data string, lang string) (err error)
  // Parameters:
  //  - TraceId
  //  - AppId
  //  - Mails
  //  - Content
  //  - Data
  //  - Lang
  BatchSendMail(ctx context.Context, traceId string, appId string, mails []string, content string, data string, lang string) (err error)
}

type MessageClient struct {
  c thrift.TClient
}

// Deprecated: Use NewMessage instead
func NewMessageClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MessageClient {
  return &MessageClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewMessage instead
func NewMessageClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MessageClient {
  return &MessageClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMessageClient(c thrift.TClient) *MessageClient {
  return &MessageClient{
    c: c,
  }
}

func (p *MessageClient) Ping(ctx context.Context) (r bool, err error) {
  var _args0 MessagePingArgs
  var _result1 MessagePingResult
  if err = p.c.Call(ctx, "Ping", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Status!= nil:
    return r, _result1.Status
  }

  return _result1.GetSuccess(), nil
}

func (p *MessageClient) Version(ctx context.Context) (r string, err error) {
  var _args2 MessageVersionArgs
  var _result3 MessageVersionResult
  if err = p.c.Call(ctx, "Version", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Status!= nil:
    return r, _result3.Status
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - AppId
//  - Mobile
//  - Content
//  - Data
//  - Lang
//  - Lock
func (p *MessageClient) SendSMS(ctx context.Context, traceId string, appId string, mobile string, content string, data string, lang string, lock int32) (err error) {
  var _args4 MessageSendSMSArgs
  _args4.TraceId = traceId
  _args4.AppId = appId
  _args4.Mobile = mobile
  _args4.Content = content
  _args4.Data = data
  _args4.Lang = lang
  _args4.Lock = lock
  var _result5 MessageSendSMSResult
  if err = p.c.Call(ctx, "SendSMS", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Status!= nil:
    return _result5.Status
  }

  return nil
}

// Parameters:
//  - TraceId
//  - AppId
//  - Mail
//  - Content
//  - Data
//  - Lang
//  - Lock
func (p *MessageClient) SendMail(ctx context.Context, traceId string, appId string, mail string, content string, data string, lang string, lock int32) (err error) {
  var _args6 MessageSendMailArgs
  _args6.TraceId = traceId
  _args6.AppId = appId
  _args6.Mail = mail
  _args6.Content = content
  _args6.Data = data
  _args6.Lang = lang
  _args6.Lock = lock
  var _result7 MessageSendMailResult
  if err = p.c.Call(ctx, "SendMail", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.Status!= nil:
    return _result7.Status
  }

  return nil
}

// Parameters:
//  - TraceId
//  - AppId
//  - Mobiles
//  - Content
//  - Data
//  - Lang
func (p *MessageClient) BatchSendSMS(ctx context.Context, traceId string, appId string, mobiles []string, content string, data string, lang string) (err error) {
  var _args8 MessageBatchSendSMSArgs
  _args8.TraceId = traceId
  _args8.AppId = appId
  _args8.Mobiles = mobiles
  _args8.Content = content
  _args8.Data = data
  _args8.Lang = lang
  var _result9 MessageBatchSendSMSResult
  if err = p.c.Call(ctx, "BatchSendSMS", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.Status!= nil:
    return _result9.Status
  }

  return nil
}

// Parameters:
//  - TraceId
//  - AppId
//  - Mails
//  - Content
//  - Data
//  - Lang
func (p *MessageClient) BatchSendMail(ctx context.Context, traceId string, appId string, mails []string, content string, data string, lang string) (err error) {
  var _args10 MessageBatchSendMailArgs
  _args10.TraceId = traceId
  _args10.AppId = appId
  _args10.Mails = mails
  _args10.Content = content
  _args10.Data = data
  _args10.Lang = lang
  var _result11 MessageBatchSendMailResult
  if err = p.c.Call(ctx, "BatchSendMail", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.Status!= nil:
    return _result11.Status
  }

  return nil
}

type MessageProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Message
}

func (p *MessageProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MessageProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MessageProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMessageProcessor(handler Message) *MessageProcessor {

  self12 := &MessageProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["Ping"] = &messageProcessorPing{handler:handler}
  self12.processorMap["Version"] = &messageProcessorVersion{handler:handler}
  self12.processorMap["SendSMS"] = &messageProcessorSendSMS{handler:handler}
  self12.processorMap["SendMail"] = &messageProcessorSendMail{handler:handler}
  self12.processorMap["BatchSendSMS"] = &messageProcessorBatchSendSMS{handler:handler}
  self12.processorMap["BatchSendMail"] = &messageProcessorBatchSendMail{handler:handler}
return self12
}

func (p *MessageProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type messageProcessorPing struct {
  handler Message
}

func (p *messageProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MessagePingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MessagePingResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Ping(ctx); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type messageProcessorVersion struct {
  handler Message
}

func (p *messageProcessorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MessageVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MessageVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Version(ctx); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Version: " + err2.Error())
    oprot.WriteMessageBegin("Version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Version", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type messageProcessorSendSMS struct {
  handler Message
}

func (p *messageProcessorSendSMS) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MessageSendSMSArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendSMS", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MessageSendSMSResult{}
  var err2 error
  if err2 = p.handler.SendSMS(ctx, args.TraceId, args.AppId, args.Mobile, args.Content, args.Data, args.Lang, args.Lock); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendSMS: " + err2.Error())
    oprot.WriteMessageBegin("SendSMS", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("SendSMS", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type messageProcessorSendMail struct {
  handler Message
}

func (p *messageProcessorSendMail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MessageSendMailArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SendMail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MessageSendMailResult{}
  var err2 error
  if err2 = p.handler.SendMail(ctx, args.TraceId, args.AppId, args.Mail, args.Content, args.Data, args.Lang, args.Lock); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SendMail: " + err2.Error())
    oprot.WriteMessageBegin("SendMail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("SendMail", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type messageProcessorBatchSendSMS struct {
  handler Message
}

func (p *messageProcessorBatchSendSMS) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MessageBatchSendSMSArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("BatchSendSMS", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MessageBatchSendSMSResult{}
  var err2 error
  if err2 = p.handler.BatchSendSMS(ctx, args.TraceId, args.AppId, args.Mobiles, args.Content, args.Data, args.Lang); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchSendSMS: " + err2.Error())
    oprot.WriteMessageBegin("BatchSendSMS", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("BatchSendSMS", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type messageProcessorBatchSendMail struct {
  handler Message
}

func (p *messageProcessorBatchSendMail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MessageBatchSendMailArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("BatchSendMail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MessageBatchSendMailResult{}
  var err2 error
  if err2 = p.handler.BatchSendMail(ctx, args.TraceId, args.AppId, args.Mails, args.Content, args.Data, args.Lang); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchSendMail: " + err2.Error())
    oprot.WriteMessageBegin("BatchSendMail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("BatchSendMail", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type MessagePingArgs struct {
}

func NewMessagePingArgs() *MessagePingArgs {
  return &MessagePingArgs{}
}

func (p *MessagePingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessagePingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessagePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessagePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type MessagePingResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewMessagePingResult() *MessagePingResult {
  return &MessagePingResult{}
}

var MessagePingResult_Success_DEFAULT bool
func (p *MessagePingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MessagePingResult_Success_DEFAULT
  }
return *p.Success
}
var MessagePingResult_Status_DEFAULT *Status
func (p *MessagePingResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return MessagePingResult_Status_DEFAULT
  }
return p.Status
}
func (p *MessagePingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MessagePingResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *MessagePingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessagePingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MessagePingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *MessagePingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessagePingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MessagePingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *MessagePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessagePingResult(%+v)", *p)
}

type MessageVersionArgs struct {
}

func NewMessageVersionArgs() *MessageVersionArgs {
  return &MessageVersionArgs{}
}

func (p *MessageVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type MessageVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewMessageVersionResult() *MessageVersionResult {
  return &MessageVersionResult{}
}

var MessageVersionResult_Success_DEFAULT string
func (p *MessageVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return MessageVersionResult_Success_DEFAULT
  }
return *p.Success
}
var MessageVersionResult_Status_DEFAULT *Status
func (p *MessageVersionResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return MessageVersionResult_Status_DEFAULT
  }
return p.Status
}
func (p *MessageVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MessageVersionResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *MessageVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MessageVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *MessageVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MessageVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *MessageVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageVersionResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - AppId
//  - Mobile
//  - Content
//  - Data
//  - Lang
//  - Lock
type MessageSendSMSArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  AppId string `thrift:"appId,2" db:"appId" json:"appId"`
  Mobile string `thrift:"mobile,3" db:"mobile" json:"mobile"`
  Content string `thrift:"content,4" db:"content" json:"content"`
  Data string `thrift:"data,5" db:"data" json:"data"`
  Lang string `thrift:"lang,6" db:"lang" json:"lang"`
  Lock int32 `thrift:"lock,7" db:"lock" json:"lock"`
}

func NewMessageSendSMSArgs() *MessageSendSMSArgs {
  return &MessageSendSMSArgs{}
}


func (p *MessageSendSMSArgs) GetTraceId() string {
  return p.TraceId
}

func (p *MessageSendSMSArgs) GetAppId() string {
  return p.AppId
}

func (p *MessageSendSMSArgs) GetMobile() string {
  return p.Mobile
}

func (p *MessageSendSMSArgs) GetContent() string {
  return p.Content
}

func (p *MessageSendSMSArgs) GetData() string {
  return p.Data
}

func (p *MessageSendSMSArgs) GetLang() string {
  return p.Lang
}

func (p *MessageSendSMSArgs) GetLock() int32 {
  return p.Lock
}
func (p *MessageSendSMSArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageSendSMSArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *MessageSendSMSArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *MessageSendSMSArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *MessageSendSMSArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *MessageSendSMSArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *MessageSendSMSArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *MessageSendSMSArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Lock = v
}
  return nil
}

func (p *MessageSendSMSArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendSMS_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageSendSMSArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *MessageSendSMSArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err) }
  return err
}

func (p *MessageSendSMSArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mobile: ", p), err) }
  return err
}

func (p *MessageSendSMSArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:content: ", p), err) }
  return err
}

func (p *MessageSendSMSArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *MessageSendSMSArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lang: ", p), err) }
  return err
}

func (p *MessageSendSMSArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lock", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lock: ", p), err) }
  if err := oprot.WriteI32(int32(p.Lock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lock (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lock: ", p), err) }
  return err
}

func (p *MessageSendSMSArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageSendSMSArgs(%+v)", *p)
}

// Attributes:
//  - Status
type MessageSendSMSResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewMessageSendSMSResult() *MessageSendSMSResult {
  return &MessageSendSMSResult{}
}

var MessageSendSMSResult_Status_DEFAULT *Status
func (p *MessageSendSMSResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return MessageSendSMSResult_Status_DEFAULT
  }
return p.Status
}
func (p *MessageSendSMSResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *MessageSendSMSResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageSendSMSResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *MessageSendSMSResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendSMS_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageSendSMSResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *MessageSendSMSResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageSendSMSResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - AppId
//  - Mail
//  - Content
//  - Data
//  - Lang
//  - Lock
type MessageSendMailArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  AppId string `thrift:"appId,2" db:"appId" json:"appId"`
  Mail string `thrift:"mail,3" db:"mail" json:"mail"`
  Content string `thrift:"content,4" db:"content" json:"content"`
  Data string `thrift:"data,5" db:"data" json:"data"`
  Lang string `thrift:"lang,6" db:"lang" json:"lang"`
  Lock int32 `thrift:"lock,7" db:"lock" json:"lock"`
}

func NewMessageSendMailArgs() *MessageSendMailArgs {
  return &MessageSendMailArgs{}
}


func (p *MessageSendMailArgs) GetTraceId() string {
  return p.TraceId
}

func (p *MessageSendMailArgs) GetAppId() string {
  return p.AppId
}

func (p *MessageSendMailArgs) GetMail() string {
  return p.Mail
}

func (p *MessageSendMailArgs) GetContent() string {
  return p.Content
}

func (p *MessageSendMailArgs) GetData() string {
  return p.Data
}

func (p *MessageSendMailArgs) GetLang() string {
  return p.Lang
}

func (p *MessageSendMailArgs) GetLock() int32 {
  return p.Lock
}
func (p *MessageSendMailArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageSendMailArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *MessageSendMailArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *MessageSendMailArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Mail = v
}
  return nil
}

func (p *MessageSendMailArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *MessageSendMailArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *MessageSendMailArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *MessageSendMailArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Lock = v
}
  return nil
}

func (p *MessageSendMailArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMail_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageSendMailArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *MessageSendMailArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err) }
  return err
}

func (p *MessageSendMailArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mail", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mail: ", p), err) }
  if err := oprot.WriteString(string(p.Mail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mail (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mail: ", p), err) }
  return err
}

func (p *MessageSendMailArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:content: ", p), err) }
  return err
}

func (p *MessageSendMailArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *MessageSendMailArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lang: ", p), err) }
  return err
}

func (p *MessageSendMailArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lock", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lock: ", p), err) }
  if err := oprot.WriteI32(int32(p.Lock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lock (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lock: ", p), err) }
  return err
}

func (p *MessageSendMailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageSendMailArgs(%+v)", *p)
}

// Attributes:
//  - Status
type MessageSendMailResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewMessageSendMailResult() *MessageSendMailResult {
  return &MessageSendMailResult{}
}

var MessageSendMailResult_Status_DEFAULT *Status
func (p *MessageSendMailResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return MessageSendMailResult_Status_DEFAULT
  }
return p.Status
}
func (p *MessageSendMailResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *MessageSendMailResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageSendMailResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *MessageSendMailResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendMail_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageSendMailResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *MessageSendMailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageSendMailResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - AppId
//  - Mobiles
//  - Content
//  - Data
//  - Lang
type MessageBatchSendSMSArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  AppId string `thrift:"appId,2" db:"appId" json:"appId"`
  Mobiles []string `thrift:"mobiles,3" db:"mobiles" json:"mobiles"`
  Content string `thrift:"content,4" db:"content" json:"content"`
  Data string `thrift:"data,5" db:"data" json:"data"`
  Lang string `thrift:"lang,6" db:"lang" json:"lang"`
}

func NewMessageBatchSendSMSArgs() *MessageBatchSendSMSArgs {
  return &MessageBatchSendSMSArgs{}
}


func (p *MessageBatchSendSMSArgs) GetTraceId() string {
  return p.TraceId
}

func (p *MessageBatchSendSMSArgs) GetAppId() string {
  return p.AppId
}

func (p *MessageBatchSendSMSArgs) GetMobiles() []string {
  return p.Mobiles
}

func (p *MessageBatchSendSMSArgs) GetContent() string {
  return p.Content
}

func (p *MessageBatchSendSMSArgs) GetData() string {
  return p.Data
}

func (p *MessageBatchSendSMSArgs) GetLang() string {
  return p.Lang
}
func (p *MessageBatchSendSMSArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBatchSendSMSArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *MessageBatchSendSMSArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *MessageBatchSendSMSArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Mobiles =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.Mobiles = append(p.Mobiles, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MessageBatchSendSMSArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *MessageBatchSendSMSArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *MessageBatchSendSMSArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *MessageBatchSendSMSArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BatchSendSMS_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBatchSendSMSArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *MessageBatchSendSMSArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err) }
  return err
}

func (p *MessageBatchSendSMSArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobiles", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mobiles: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Mobiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Mobiles {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mobiles: ", p), err) }
  return err
}

func (p *MessageBatchSendSMSArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:content: ", p), err) }
  return err
}

func (p *MessageBatchSendSMSArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *MessageBatchSendSMSArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lang: ", p), err) }
  return err
}

func (p *MessageBatchSendSMSArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBatchSendSMSArgs(%+v)", *p)
}

// Attributes:
//  - Status
type MessageBatchSendSMSResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewMessageBatchSendSMSResult() *MessageBatchSendSMSResult {
  return &MessageBatchSendSMSResult{}
}

var MessageBatchSendSMSResult_Status_DEFAULT *Status
func (p *MessageBatchSendSMSResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return MessageBatchSendSMSResult_Status_DEFAULT
  }
return p.Status
}
func (p *MessageBatchSendSMSResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *MessageBatchSendSMSResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBatchSendSMSResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *MessageBatchSendSMSResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BatchSendSMS_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBatchSendSMSResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *MessageBatchSendSMSResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBatchSendSMSResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - AppId
//  - Mails
//  - Content
//  - Data
//  - Lang
type MessageBatchSendMailArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  AppId string `thrift:"appId,2" db:"appId" json:"appId"`
  Mails []string `thrift:"mails,3" db:"mails" json:"mails"`
  Content string `thrift:"content,4" db:"content" json:"content"`
  Data string `thrift:"data,5" db:"data" json:"data"`
  Lang string `thrift:"lang,6" db:"lang" json:"lang"`
}

func NewMessageBatchSendMailArgs() *MessageBatchSendMailArgs {
  return &MessageBatchSendMailArgs{}
}


func (p *MessageBatchSendMailArgs) GetTraceId() string {
  return p.TraceId
}

func (p *MessageBatchSendMailArgs) GetAppId() string {
  return p.AppId
}

func (p *MessageBatchSendMailArgs) GetMails() []string {
  return p.Mails
}

func (p *MessageBatchSendMailArgs) GetContent() string {
  return p.Content
}

func (p *MessageBatchSendMailArgs) GetData() string {
  return p.Data
}

func (p *MessageBatchSendMailArgs) GetLang() string {
  return p.Lang
}
func (p *MessageBatchSendMailArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBatchSendMailArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *MessageBatchSendMailArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *MessageBatchSendMailArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Mails =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.Mails = append(p.Mails, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MessageBatchSendMailArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *MessageBatchSendMailArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *MessageBatchSendMailArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *MessageBatchSendMailArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BatchSendMail_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBatchSendMailArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *MessageBatchSendMailArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err) }
  return err
}

func (p *MessageBatchSendMailArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mails", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mails: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Mails)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Mails {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mails: ", p), err) }
  return err
}

func (p *MessageBatchSendMailArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:content: ", p), err) }
  return err
}

func (p *MessageBatchSendMailArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *MessageBatchSendMailArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lang: ", p), err) }
  return err
}

func (p *MessageBatchSendMailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBatchSendMailArgs(%+v)", *p)
}

// Attributes:
//  - Status
type MessageBatchSendMailResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewMessageBatchSendMailResult() *MessageBatchSendMailResult {
  return &MessageBatchSendMailResult{}
}

var MessageBatchSendMailResult_Status_DEFAULT *Status
func (p *MessageBatchSendMailResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return MessageBatchSendMailResult_Status_DEFAULT
  }
return p.Status
}
func (p *MessageBatchSendMailResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *MessageBatchSendMailResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBatchSendMailResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *MessageBatchSendMailResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BatchSendMail_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBatchSendMailResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *MessageBatchSendMailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBatchSendMailResult(%+v)", *p)
}


