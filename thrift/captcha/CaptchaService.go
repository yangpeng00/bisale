// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package captcha

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Code
//  - Message
type Status struct {
  Code int32 `thrift:"Code,1" db:"Code" json:"Code"`
  Message string `thrift:"Message,2" db:"Message" json:"Message"`
}

func NewStatus() *Status {
  return &Status{}
}


func (p *Status) GetCode() int32 {
  return p.Code
}

func (p *Status) GetMessage() string {
  return p.Message
}
func (p *Status) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Status)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Status)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *Status) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Status"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Status) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Code: ", p), err) }
  return err
}

func (p *Status) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Message: ", p), err) }
  return err
}

func (p *Status) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Status(%+v)", *p)
}

func (p *Status) Error() string {
  return p.String()
}

// Attributes:
//  - Token
//  - Value
type NumberCode struct {
  Token string `thrift:"Token,1" db:"Token" json:"Token"`
  Value string `thrift:"Value,2" db:"Value" json:"Value"`
}

func NewNumberCode() *NumberCode {
  return &NumberCode{}
}


func (p *NumberCode) GetToken() string {
  return p.Token
}

func (p *NumberCode) GetValue() string {
  return p.Value
}
func (p *NumberCode) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NumberCode)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *NumberCode)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *NumberCode) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NumberCode"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NumberCode) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Token: ", p), err) }
  return err
}

func (p *NumberCode) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Value: ", p), err) }
  return err
}

func (p *NumberCode) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NumberCode(%+v)", *p)
}

// Attributes:
//  - Token
//  - URL
type ImageCode struct {
  Token string `thrift:"Token,1" db:"Token" json:"Token"`
  URL string `thrift:"URL,2" db:"URL" json:"URL"`
}

func NewImageCode() *ImageCode {
  return &ImageCode{}
}


func (p *ImageCode) GetToken() string {
  return p.Token
}

func (p *ImageCode) GetURL() string {
  return p.URL
}
func (p *ImageCode) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageCode)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *ImageCode)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *ImageCode) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageCode"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageCode) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Token: ", p), err) }
  return err
}

func (p *ImageCode) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("URL", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:URL: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.URL (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:URL: ", p), err) }
  return err
}

func (p *ImageCode) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageCode(%+v)", *p)
}

// Attributes:
//  - Secret
//  - URI
type TwoFactorCode struct {
  Secret string `thrift:"Secret,1" db:"Secret" json:"Secret"`
  URI string `thrift:"URI,2" db:"URI" json:"URI"`
}

func NewTwoFactorCode() *TwoFactorCode {
  return &TwoFactorCode{}
}


func (p *TwoFactorCode) GetSecret() string {
  return p.Secret
}

func (p *TwoFactorCode) GetURI() string {
  return p.URI
}
func (p *TwoFactorCode) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TwoFactorCode)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *TwoFactorCode)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *TwoFactorCode) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TwoFactorCode"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TwoFactorCode) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Secret", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Secret: ", p), err) }
  if err := oprot.WriteString(string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Secret (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Secret: ", p), err) }
  return err
}

func (p *TwoFactorCode) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("URI", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:URI: ", p), err) }
  if err := oprot.WriteString(string(p.URI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.URI (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:URI: ", p), err) }
  return err
}

func (p *TwoFactorCode) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TwoFactorCode(%+v)", *p)
}

type Captcha interface {
  Ping(ctx context.Context) (r bool, err error)
  Version(ctx context.Context) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - Target
  //  - Len
  //  - Expired
  GenerateNumberCode(ctx context.Context, traceId string, target string, len int32, expired int32) (r *NumberCode, err error)
  // Parameters:
  //  - TraceId
  //  - Target
  //  - Code
  //  - Token
  ValidateNumberCode(ctx context.Context, traceId string, target string, code string, token string) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - Token
  ClearNumberCode(ctx context.Context, traceId string, token string) (err error)
  // Parameters:
  //  - TraceId
  //  - Len
  //  - Expired
  //  - Width
  //  - Height
  GenerateImageCode(ctx context.Context, traceId string, len int32, expired int32, width int32, height int32) (r *ImageCode, err error)
  // Parameters:
  //  - TraceId
  //  - Code
  //  - Token
  ValidateImageCode(ctx context.Context, traceId string, code string, token string) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - Label
  //  - Issuer
  //  - Secret
  GenerateTwoFactor(ctx context.Context, traceId string, label string, issuer string, secret string) (r *TwoFactorCode, err error)
  // Parameters:
  //  - TraceId
  //  - Secret
  //  - Code
  //  - Once
  ValidateTwoFactorCode(ctx context.Context, traceId string, secret string, code string, once bool) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - Identifier
  //  - Times
  //  - Expired
  SetCount(ctx context.Context, traceId string, identifier string, times int32, expired int32) (err error)
  // Parameters:
  //  - TraceId
  //  - Identifier
  GetCount(ctx context.Context, traceId string, identifier string) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - Identifier
  ClearCount(ctx context.Context, traceId string, identifier string) (err error)
  // Parameters:
  //  - TraceId
  GetTodayLeftSeconds(ctx context.Context, traceId string) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - Identifier
  //  - Expired
  SetTimer(ctx context.Context, traceId string, identifier string, expired int32) (err error)
  // Parameters:
  //  - TraceId
  //  - Identifier
  GetTimer(ctx context.Context, traceId string, identifier string) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - Identifier
  ClearTimer(ctx context.Context, traceId string, identifier string) (err error)
}

type CaptchaClient struct {
  c thrift.TClient
}

// Deprecated: Use NewCaptcha instead
func NewCaptchaClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CaptchaClient {
  return &CaptchaClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewCaptcha instead
func NewCaptchaClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CaptchaClient {
  return &CaptchaClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCaptchaClient(c thrift.TClient) *CaptchaClient {
  return &CaptchaClient{
    c: c,
  }
}

func (p *CaptchaClient) Ping(ctx context.Context) (r bool, err error) {
  var _args0 CaptchaPingArgs
  var _result1 CaptchaPingResult
  if err = p.c.Call(ctx, "Ping", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Status!= nil:
    return r, _result1.Status
  }

  return _result1.GetSuccess(), nil
}

func (p *CaptchaClient) Version(ctx context.Context) (r string, err error) {
  var _args2 CaptchaVersionArgs
  var _result3 CaptchaVersionResult
  if err = p.c.Call(ctx, "Version", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Status!= nil:
    return r, _result3.Status
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Target
//  - Len
//  - Expired
func (p *CaptchaClient) GenerateNumberCode(ctx context.Context, traceId string, target string, len int32, expired int32) (r *NumberCode, err error) {
  var _args4 CaptchaGenerateNumberCodeArgs
  _args4.TraceId = traceId
  _args4.Target = target
  _args4.Len = len
  _args4.Expired = expired
  var _result5 CaptchaGenerateNumberCodeResult
  if err = p.c.Call(ctx, "GenerateNumberCode", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Status!= nil:
    return r, _result5.Status
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Target
//  - Code
//  - Token
func (p *CaptchaClient) ValidateNumberCode(ctx context.Context, traceId string, target string, code string, token string) (r bool, err error) {
  var _args6 CaptchaValidateNumberCodeArgs
  _args6.TraceId = traceId
  _args6.Target = target
  _args6.Code = code
  _args6.Token = token
  var _result7 CaptchaValidateNumberCodeResult
  if err = p.c.Call(ctx, "ValidateNumberCode", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.Status!= nil:
    return r, _result7.Status
  }

  return _result7.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Token
func (p *CaptchaClient) ClearNumberCode(ctx context.Context, traceId string, token string) (err error) {
  var _args8 CaptchaClearNumberCodeArgs
  _args8.TraceId = traceId
  _args8.Token = token
  var _result9 CaptchaClearNumberCodeResult
  if err = p.c.Call(ctx, "ClearNumberCode", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.Status!= nil:
    return _result9.Status
  }

  return nil
}

// Parameters:
//  - TraceId
//  - Len
//  - Expired
//  - Width
//  - Height
func (p *CaptchaClient) GenerateImageCode(ctx context.Context, traceId string, len int32, expired int32, width int32, height int32) (r *ImageCode, err error) {
  var _args10 CaptchaGenerateImageCodeArgs
  _args10.TraceId = traceId
  _args10.Len = len
  _args10.Expired = expired
  _args10.Width = width
  _args10.Height = height
  var _result11 CaptchaGenerateImageCodeResult
  if err = p.c.Call(ctx, "GenerateImageCode", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.Status!= nil:
    return r, _result11.Status
  }

  return _result11.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Code
//  - Token
func (p *CaptchaClient) ValidateImageCode(ctx context.Context, traceId string, code string, token string) (r bool, err error) {
  var _args12 CaptchaValidateImageCodeArgs
  _args12.TraceId = traceId
  _args12.Code = code
  _args12.Token = token
  var _result13 CaptchaValidateImageCodeResult
  if err = p.c.Call(ctx, "ValidateImageCode", &_args12, &_result13); err != nil {
    return
  }
  switch {
  case _result13.Status!= nil:
    return r, _result13.Status
  }

  return _result13.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Label
//  - Issuer
//  - Secret
func (p *CaptchaClient) GenerateTwoFactor(ctx context.Context, traceId string, label string, issuer string, secret string) (r *TwoFactorCode, err error) {
  var _args14 CaptchaGenerateTwoFactorArgs
  _args14.TraceId = traceId
  _args14.Label = label
  _args14.Issuer = issuer
  _args14.Secret = secret
  var _result15 CaptchaGenerateTwoFactorResult
  if err = p.c.Call(ctx, "GenerateTwoFactor", &_args14, &_result15); err != nil {
    return
  }
  switch {
  case _result15.Status!= nil:
    return r, _result15.Status
  }

  return _result15.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Secret
//  - Code
//  - Once
func (p *CaptchaClient) ValidateTwoFactorCode(ctx context.Context, traceId string, secret string, code string, once bool) (r bool, err error) {
  var _args16 CaptchaValidateTwoFactorCodeArgs
  _args16.TraceId = traceId
  _args16.Secret = secret
  _args16.Code = code
  _args16.Once = once
  var _result17 CaptchaValidateTwoFactorCodeResult
  if err = p.c.Call(ctx, "ValidateTwoFactorCode", &_args16, &_result17); err != nil {
    return
  }
  switch {
  case _result17.Status!= nil:
    return r, _result17.Status
  }

  return _result17.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Identifier
//  - Times
//  - Expired
func (p *CaptchaClient) SetCount(ctx context.Context, traceId string, identifier string, times int32, expired int32) (err error) {
  var _args18 CaptchaSetCountArgs
  _args18.TraceId = traceId
  _args18.Identifier = identifier
  _args18.Times = times
  _args18.Expired = expired
  var _result19 CaptchaSetCountResult
  if err = p.c.Call(ctx, "SetCount", &_args18, &_result19); err != nil {
    return
  }
  switch {
  case _result19.Status!= nil:
    return _result19.Status
  }

  return nil
}

// Parameters:
//  - TraceId
//  - Identifier
func (p *CaptchaClient) GetCount(ctx context.Context, traceId string, identifier string) (r int32, err error) {
  var _args20 CaptchaGetCountArgs
  _args20.TraceId = traceId
  _args20.Identifier = identifier
  var _result21 CaptchaGetCountResult
  if err = p.c.Call(ctx, "GetCount", &_args20, &_result21); err != nil {
    return
  }
  switch {
  case _result21.Status!= nil:
    return r, _result21.Status
  }

  return _result21.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Identifier
func (p *CaptchaClient) ClearCount(ctx context.Context, traceId string, identifier string) (err error) {
  var _args22 CaptchaClearCountArgs
  _args22.TraceId = traceId
  _args22.Identifier = identifier
  var _result23 CaptchaClearCountResult
  if err = p.c.Call(ctx, "ClearCount", &_args22, &_result23); err != nil {
    return
  }
  switch {
  case _result23.Status!= nil:
    return _result23.Status
  }

  return nil
}

// Parameters:
//  - TraceId
func (p *CaptchaClient) GetTodayLeftSeconds(ctx context.Context, traceId string) (r int32, err error) {
  var _args24 CaptchaGetTodayLeftSecondsArgs
  _args24.TraceId = traceId
  var _result25 CaptchaGetTodayLeftSecondsResult
  if err = p.c.Call(ctx, "GetTodayLeftSeconds", &_args24, &_result25); err != nil {
    return
  }
  switch {
  case _result25.Status!= nil:
    return r, _result25.Status
  }

  return _result25.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Identifier
//  - Expired
func (p *CaptchaClient) SetTimer(ctx context.Context, traceId string, identifier string, expired int32) (err error) {
  var _args26 CaptchaSetTimerArgs
  _args26.TraceId = traceId
  _args26.Identifier = identifier
  _args26.Expired = expired
  var _result27 CaptchaSetTimerResult
  if err = p.c.Call(ctx, "SetTimer", &_args26, &_result27); err != nil {
    return
  }
  switch {
  case _result27.Status!= nil:
    return _result27.Status
  }

  return nil
}

// Parameters:
//  - TraceId
//  - Identifier
func (p *CaptchaClient) GetTimer(ctx context.Context, traceId string, identifier string) (r bool, err error) {
  var _args28 CaptchaGetTimerArgs
  _args28.TraceId = traceId
  _args28.Identifier = identifier
  var _result29 CaptchaGetTimerResult
  if err = p.c.Call(ctx, "GetTimer", &_args28, &_result29); err != nil {
    return
  }
  switch {
  case _result29.Status!= nil:
    return r, _result29.Status
  }

  return _result29.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Identifier
func (p *CaptchaClient) ClearTimer(ctx context.Context, traceId string, identifier string) (err error) {
  var _args30 CaptchaClearTimerArgs
  _args30.TraceId = traceId
  _args30.Identifier = identifier
  var _result31 CaptchaClearTimerResult
  if err = p.c.Call(ctx, "ClearTimer", &_args30, &_result31); err != nil {
    return
  }
  switch {
  case _result31.Status!= nil:
    return _result31.Status
  }

  return nil
}

type CaptchaProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Captcha
}

func (p *CaptchaProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CaptchaProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CaptchaProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCaptchaProcessor(handler Captcha) *CaptchaProcessor {

  self32 := &CaptchaProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self32.processorMap["Ping"] = &captchaProcessorPing{handler:handler}
  self32.processorMap["Version"] = &captchaProcessorVersion{handler:handler}
  self32.processorMap["GenerateNumberCode"] = &captchaProcessorGenerateNumberCode{handler:handler}
  self32.processorMap["ValidateNumberCode"] = &captchaProcessorValidateNumberCode{handler:handler}
  self32.processorMap["ClearNumberCode"] = &captchaProcessorClearNumberCode{handler:handler}
  self32.processorMap["GenerateImageCode"] = &captchaProcessorGenerateImageCode{handler:handler}
  self32.processorMap["ValidateImageCode"] = &captchaProcessorValidateImageCode{handler:handler}
  self32.processorMap["GenerateTwoFactor"] = &captchaProcessorGenerateTwoFactor{handler:handler}
  self32.processorMap["ValidateTwoFactorCode"] = &captchaProcessorValidateTwoFactorCode{handler:handler}
  self32.processorMap["SetCount"] = &captchaProcessorSetCount{handler:handler}
  self32.processorMap["GetCount"] = &captchaProcessorGetCount{handler:handler}
  self32.processorMap["ClearCount"] = &captchaProcessorClearCount{handler:handler}
  self32.processorMap["GetTodayLeftSeconds"] = &captchaProcessorGetTodayLeftSeconds{handler:handler}
  self32.processorMap["SetTimer"] = &captchaProcessorSetTimer{handler:handler}
  self32.processorMap["GetTimer"] = &captchaProcessorGetTimer{handler:handler}
  self32.processorMap["ClearTimer"] = &captchaProcessorClearTimer{handler:handler}
return self32
}

func (p *CaptchaProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x33 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x33.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x33

}

type captchaProcessorPing struct {
  handler Captcha
}

func (p *captchaProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaPingResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Ping(ctx); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorVersion struct {
  handler Captcha
}

func (p *captchaProcessorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Version(ctx); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Version: " + err2.Error())
    oprot.WriteMessageBegin("Version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Version", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorGenerateNumberCode struct {
  handler Captcha
}

func (p *captchaProcessorGenerateNumberCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaGenerateNumberCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GenerateNumberCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaGenerateNumberCodeResult{}
var retval *NumberCode
  var err2 error
  if retval, err2 = p.handler.GenerateNumberCode(ctx, args.TraceId, args.Target, args.Len, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenerateNumberCode: " + err2.Error())
    oprot.WriteMessageBegin("GenerateNumberCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GenerateNumberCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorValidateNumberCode struct {
  handler Captcha
}

func (p *captchaProcessorValidateNumberCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaValidateNumberCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ValidateNumberCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaValidateNumberCodeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ValidateNumberCode(ctx, args.TraceId, args.Target, args.Code, args.Token); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ValidateNumberCode: " + err2.Error())
    oprot.WriteMessageBegin("ValidateNumberCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ValidateNumberCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorClearNumberCode struct {
  handler Captcha
}

func (p *captchaProcessorClearNumberCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaClearNumberCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ClearNumberCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaClearNumberCodeResult{}
  var err2 error
  if err2 = p.handler.ClearNumberCode(ctx, args.TraceId, args.Token); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearNumberCode: " + err2.Error())
    oprot.WriteMessageBegin("ClearNumberCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("ClearNumberCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorGenerateImageCode struct {
  handler Captcha
}

func (p *captchaProcessorGenerateImageCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaGenerateImageCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GenerateImageCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaGenerateImageCodeResult{}
var retval *ImageCode
  var err2 error
  if retval, err2 = p.handler.GenerateImageCode(ctx, args.TraceId, args.Len, args.Expired, args.Width, args.Height); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenerateImageCode: " + err2.Error())
    oprot.WriteMessageBegin("GenerateImageCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GenerateImageCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorValidateImageCode struct {
  handler Captcha
}

func (p *captchaProcessorValidateImageCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaValidateImageCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ValidateImageCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaValidateImageCodeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ValidateImageCode(ctx, args.TraceId, args.Code, args.Token); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ValidateImageCode: " + err2.Error())
    oprot.WriteMessageBegin("ValidateImageCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ValidateImageCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorGenerateTwoFactor struct {
  handler Captcha
}

func (p *captchaProcessorGenerateTwoFactor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaGenerateTwoFactorArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GenerateTwoFactor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaGenerateTwoFactorResult{}
var retval *TwoFactorCode
  var err2 error
  if retval, err2 = p.handler.GenerateTwoFactor(ctx, args.TraceId, args.Label, args.Issuer, args.Secret); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenerateTwoFactor: " + err2.Error())
    oprot.WriteMessageBegin("GenerateTwoFactor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GenerateTwoFactor", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorValidateTwoFactorCode struct {
  handler Captcha
}

func (p *captchaProcessorValidateTwoFactorCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaValidateTwoFactorCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ValidateTwoFactorCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaValidateTwoFactorCodeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ValidateTwoFactorCode(ctx, args.TraceId, args.Secret, args.Code, args.Once); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ValidateTwoFactorCode: " + err2.Error())
    oprot.WriteMessageBegin("ValidateTwoFactorCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ValidateTwoFactorCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorSetCount struct {
  handler Captcha
}

func (p *captchaProcessorSetCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaSetCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SetCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaSetCountResult{}
  var err2 error
  if err2 = p.handler.SetCount(ctx, args.TraceId, args.Identifier, args.Times, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetCount: " + err2.Error())
    oprot.WriteMessageBegin("SetCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("SetCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorGetCount struct {
  handler Captcha
}

func (p *captchaProcessorGetCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaGetCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaGetCountResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetCount(ctx, args.TraceId, args.Identifier); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCount: " + err2.Error())
    oprot.WriteMessageBegin("GetCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorClearCount struct {
  handler Captcha
}

func (p *captchaProcessorClearCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaClearCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ClearCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaClearCountResult{}
  var err2 error
  if err2 = p.handler.ClearCount(ctx, args.TraceId, args.Identifier); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearCount: " + err2.Error())
    oprot.WriteMessageBegin("ClearCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("ClearCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorGetTodayLeftSeconds struct {
  handler Captcha
}

func (p *captchaProcessorGetTodayLeftSeconds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaGetTodayLeftSecondsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetTodayLeftSeconds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaGetTodayLeftSecondsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetTodayLeftSeconds(ctx, args.TraceId); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTodayLeftSeconds: " + err2.Error())
    oprot.WriteMessageBegin("GetTodayLeftSeconds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetTodayLeftSeconds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorSetTimer struct {
  handler Captcha
}

func (p *captchaProcessorSetTimer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaSetTimerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SetTimer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaSetTimerResult{}
  var err2 error
  if err2 = p.handler.SetTimer(ctx, args.TraceId, args.Identifier, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetTimer: " + err2.Error())
    oprot.WriteMessageBegin("SetTimer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("SetTimer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorGetTimer struct {
  handler Captcha
}

func (p *captchaProcessorGetTimer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaGetTimerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetTimer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaGetTimerResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.GetTimer(ctx, args.TraceId, args.Identifier); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTimer: " + err2.Error())
    oprot.WriteMessageBegin("GetTimer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetTimer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type captchaProcessorClearTimer struct {
  handler Captcha
}

func (p *captchaProcessorClearTimer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CaptchaClearTimerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ClearTimer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CaptchaClearTimerResult{}
  var err2 error
  if err2 = p.handler.ClearTimer(ctx, args.TraceId, args.Identifier); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearTimer: " + err2.Error())
    oprot.WriteMessageBegin("ClearTimer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("ClearTimer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type CaptchaPingArgs struct {
}

func NewCaptchaPingArgs() *CaptchaPingArgs {
  return &CaptchaPingArgs{}
}

func (p *CaptchaPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaPingResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaPingResult() *CaptchaPingResult {
  return &CaptchaPingResult{}
}

var CaptchaPingResult_Success_DEFAULT bool
func (p *CaptchaPingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return CaptchaPingResult_Success_DEFAULT
  }
return *p.Success
}
var CaptchaPingResult_Status_DEFAULT *Status
func (p *CaptchaPingResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaPingResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaPingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaPingResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaPingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CaptchaPingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaPingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaPingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaPingResult(%+v)", *p)
}

type CaptchaVersionArgs struct {
}

func NewCaptchaVersionArgs() *CaptchaVersionArgs {
  return &CaptchaVersionArgs{}
}

func (p *CaptchaVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaVersionResult() *CaptchaVersionResult {
  return &CaptchaVersionResult{}
}

var CaptchaVersionResult_Success_DEFAULT string
func (p *CaptchaVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return CaptchaVersionResult_Success_DEFAULT
  }
return *p.Success
}
var CaptchaVersionResult_Status_DEFAULT *Status
func (p *CaptchaVersionResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaVersionResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaVersionResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CaptchaVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaVersionResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Target
//  - Len
//  - Expired
type CaptchaGenerateNumberCodeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Target string `thrift:"target,2" db:"target" json:"target"`
  Len int32 `thrift:"len,3" db:"len" json:"len"`
  Expired int32 `thrift:"expired,4" db:"expired" json:"expired"`
}

func NewCaptchaGenerateNumberCodeArgs() *CaptchaGenerateNumberCodeArgs {
  return &CaptchaGenerateNumberCodeArgs{}
}


func (p *CaptchaGenerateNumberCodeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaGenerateNumberCodeArgs) GetTarget() string {
  return p.Target
}

func (p *CaptchaGenerateNumberCodeArgs) GetLen() int32 {
  return p.Len
}

func (p *CaptchaGenerateNumberCodeArgs) GetExpired() int32 {
  return p.Expired
}
func (p *CaptchaGenerateNumberCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGenerateNumberCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaGenerateNumberCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Target = v
}
  return nil
}

func (p *CaptchaGenerateNumberCodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Len = v
}
  return nil
}

func (p *CaptchaGenerateNumberCodeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *CaptchaGenerateNumberCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerateNumberCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGenerateNumberCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaGenerateNumberCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("target", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:target: ", p), err) }
  if err := oprot.WriteString(string(p.Target)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.target (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:target: ", p), err) }
  return err
}

func (p *CaptchaGenerateNumberCodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("len", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:len: ", p), err) }
  if err := oprot.WriteI32(int32(p.Len)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.len (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:len: ", p), err) }
  return err
}

func (p *CaptchaGenerateNumberCodeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expired: ", p), err) }
  return err
}

func (p *CaptchaGenerateNumberCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGenerateNumberCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaGenerateNumberCodeResult struct {
  Success *NumberCode `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaGenerateNumberCodeResult() *CaptchaGenerateNumberCodeResult {
  return &CaptchaGenerateNumberCodeResult{}
}

var CaptchaGenerateNumberCodeResult_Success_DEFAULT *NumberCode
func (p *CaptchaGenerateNumberCodeResult) GetSuccess() *NumberCode {
  if !p.IsSetSuccess() {
    return CaptchaGenerateNumberCodeResult_Success_DEFAULT
  }
return p.Success
}
var CaptchaGenerateNumberCodeResult_Status_DEFAULT *Status
func (p *CaptchaGenerateNumberCodeResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaGenerateNumberCodeResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaGenerateNumberCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaGenerateNumberCodeResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaGenerateNumberCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGenerateNumberCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &NumberCode{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CaptchaGenerateNumberCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaGenerateNumberCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerateNumberCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGenerateNumberCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaGenerateNumberCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaGenerateNumberCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGenerateNumberCodeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Target
//  - Code
//  - Token
type CaptchaValidateNumberCodeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Target string `thrift:"target,2" db:"target" json:"target"`
  Code string `thrift:"code,3" db:"code" json:"code"`
  Token string `thrift:"token,4" db:"token" json:"token"`
}

func NewCaptchaValidateNumberCodeArgs() *CaptchaValidateNumberCodeArgs {
  return &CaptchaValidateNumberCodeArgs{}
}


func (p *CaptchaValidateNumberCodeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaValidateNumberCodeArgs) GetTarget() string {
  return p.Target
}

func (p *CaptchaValidateNumberCodeArgs) GetCode() string {
  return p.Code
}

func (p *CaptchaValidateNumberCodeArgs) GetToken() string {
  return p.Token
}
func (p *CaptchaValidateNumberCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaValidateNumberCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaValidateNumberCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Target = v
}
  return nil
}

func (p *CaptchaValidateNumberCodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *CaptchaValidateNumberCodeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *CaptchaValidateNumberCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidateNumberCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaValidateNumberCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaValidateNumberCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("target", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:target: ", p), err) }
  if err := oprot.WriteString(string(p.Target)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.target (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:target: ", p), err) }
  return err
}

func (p *CaptchaValidateNumberCodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err) }
  return err
}

func (p *CaptchaValidateNumberCodeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:token: ", p), err) }
  return err
}

func (p *CaptchaValidateNumberCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaValidateNumberCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaValidateNumberCodeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaValidateNumberCodeResult() *CaptchaValidateNumberCodeResult {
  return &CaptchaValidateNumberCodeResult{}
}

var CaptchaValidateNumberCodeResult_Success_DEFAULT bool
func (p *CaptchaValidateNumberCodeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return CaptchaValidateNumberCodeResult_Success_DEFAULT
  }
return *p.Success
}
var CaptchaValidateNumberCodeResult_Status_DEFAULT *Status
func (p *CaptchaValidateNumberCodeResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaValidateNumberCodeResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaValidateNumberCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaValidateNumberCodeResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaValidateNumberCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaValidateNumberCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CaptchaValidateNumberCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaValidateNumberCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidateNumberCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaValidateNumberCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaValidateNumberCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaValidateNumberCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaValidateNumberCodeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Token
type CaptchaClearNumberCodeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Token string `thrift:"token,2" db:"token" json:"token"`
}

func NewCaptchaClearNumberCodeArgs() *CaptchaClearNumberCodeArgs {
  return &CaptchaClearNumberCodeArgs{}
}


func (p *CaptchaClearNumberCodeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaClearNumberCodeArgs) GetToken() string {
  return p.Token
}
func (p *CaptchaClearNumberCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaClearNumberCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaClearNumberCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *CaptchaClearNumberCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClearNumberCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaClearNumberCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaClearNumberCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *CaptchaClearNumberCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaClearNumberCodeArgs(%+v)", *p)
}

// Attributes:
//  - Status
type CaptchaClearNumberCodeResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaClearNumberCodeResult() *CaptchaClearNumberCodeResult {
  return &CaptchaClearNumberCodeResult{}
}

var CaptchaClearNumberCodeResult_Status_DEFAULT *Status
func (p *CaptchaClearNumberCodeResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaClearNumberCodeResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaClearNumberCodeResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaClearNumberCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaClearNumberCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaClearNumberCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClearNumberCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaClearNumberCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaClearNumberCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaClearNumberCodeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Len
//  - Expired
//  - Width
//  - Height
type CaptchaGenerateImageCodeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Len int32 `thrift:"len,2" db:"len" json:"len"`
  Expired int32 `thrift:"expired,3" db:"expired" json:"expired"`
  Width int32 `thrift:"width,4" db:"width" json:"width"`
  Height int32 `thrift:"height,5" db:"height" json:"height"`
}

func NewCaptchaGenerateImageCodeArgs() *CaptchaGenerateImageCodeArgs {
  return &CaptchaGenerateImageCodeArgs{}
}


func (p *CaptchaGenerateImageCodeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaGenerateImageCodeArgs) GetLen() int32 {
  return p.Len
}

func (p *CaptchaGenerateImageCodeArgs) GetExpired() int32 {
  return p.Expired
}

func (p *CaptchaGenerateImageCodeArgs) GetWidth() int32 {
  return p.Width
}

func (p *CaptchaGenerateImageCodeArgs) GetHeight() int32 {
  return p.Height
}
func (p *CaptchaGenerateImageCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGenerateImageCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaGenerateImageCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Len = v
}
  return nil
}

func (p *CaptchaGenerateImageCodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *CaptchaGenerateImageCodeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Width = v
}
  return nil
}

func (p *CaptchaGenerateImageCodeArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Height = v
}
  return nil
}

func (p *CaptchaGenerateImageCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerateImageCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGenerateImageCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaGenerateImageCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("len", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:len: ", p), err) }
  if err := oprot.WriteI32(int32(p.Len)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.len (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:len: ", p), err) }
  return err
}

func (p *CaptchaGenerateImageCodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expired: ", p), err) }
  return err
}

func (p *CaptchaGenerateImageCodeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("width", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:width: ", p), err) }
  if err := oprot.WriteI32(int32(p.Width)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.width (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:width: ", p), err) }
  return err
}

func (p *CaptchaGenerateImageCodeArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:height: ", p), err) }
  if err := oprot.WriteI32(int32(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:height: ", p), err) }
  return err
}

func (p *CaptchaGenerateImageCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGenerateImageCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaGenerateImageCodeResult struct {
  Success *ImageCode `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaGenerateImageCodeResult() *CaptchaGenerateImageCodeResult {
  return &CaptchaGenerateImageCodeResult{}
}

var CaptchaGenerateImageCodeResult_Success_DEFAULT *ImageCode
func (p *CaptchaGenerateImageCodeResult) GetSuccess() *ImageCode {
  if !p.IsSetSuccess() {
    return CaptchaGenerateImageCodeResult_Success_DEFAULT
  }
return p.Success
}
var CaptchaGenerateImageCodeResult_Status_DEFAULT *Status
func (p *CaptchaGenerateImageCodeResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaGenerateImageCodeResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaGenerateImageCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaGenerateImageCodeResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaGenerateImageCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGenerateImageCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ImageCode{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CaptchaGenerateImageCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaGenerateImageCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerateImageCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGenerateImageCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaGenerateImageCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaGenerateImageCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGenerateImageCodeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Code
//  - Token
type CaptchaValidateImageCodeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Code string `thrift:"code,2" db:"code" json:"code"`
  Token string `thrift:"token,3" db:"token" json:"token"`
}

func NewCaptchaValidateImageCodeArgs() *CaptchaValidateImageCodeArgs {
  return &CaptchaValidateImageCodeArgs{}
}


func (p *CaptchaValidateImageCodeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaValidateImageCodeArgs) GetCode() string {
  return p.Code
}

func (p *CaptchaValidateImageCodeArgs) GetToken() string {
  return p.Token
}
func (p *CaptchaValidateImageCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaValidateImageCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaValidateImageCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *CaptchaValidateImageCodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *CaptchaValidateImageCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidateImageCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaValidateImageCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaValidateImageCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *CaptchaValidateImageCodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:token: ", p), err) }
  return err
}

func (p *CaptchaValidateImageCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaValidateImageCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaValidateImageCodeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaValidateImageCodeResult() *CaptchaValidateImageCodeResult {
  return &CaptchaValidateImageCodeResult{}
}

var CaptchaValidateImageCodeResult_Success_DEFAULT bool
func (p *CaptchaValidateImageCodeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return CaptchaValidateImageCodeResult_Success_DEFAULT
  }
return *p.Success
}
var CaptchaValidateImageCodeResult_Status_DEFAULT *Status
func (p *CaptchaValidateImageCodeResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaValidateImageCodeResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaValidateImageCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaValidateImageCodeResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaValidateImageCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaValidateImageCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CaptchaValidateImageCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaValidateImageCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidateImageCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaValidateImageCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaValidateImageCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaValidateImageCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaValidateImageCodeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Label
//  - Issuer
//  - Secret
type CaptchaGenerateTwoFactorArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Label string `thrift:"label,2" db:"label" json:"label"`
  Issuer string `thrift:"issuer,3" db:"issuer" json:"issuer"`
  Secret string `thrift:"secret,4" db:"secret" json:"secret"`
}

func NewCaptchaGenerateTwoFactorArgs() *CaptchaGenerateTwoFactorArgs {
  return &CaptchaGenerateTwoFactorArgs{}
}


func (p *CaptchaGenerateTwoFactorArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaGenerateTwoFactorArgs) GetLabel() string {
  return p.Label
}

func (p *CaptchaGenerateTwoFactorArgs) GetIssuer() string {
  return p.Issuer
}

func (p *CaptchaGenerateTwoFactorArgs) GetSecret() string {
  return p.Secret
}
func (p *CaptchaGenerateTwoFactorArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGenerateTwoFactorArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaGenerateTwoFactorArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Label = v
}
  return nil
}

func (p *CaptchaGenerateTwoFactorArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Issuer = v
}
  return nil
}

func (p *CaptchaGenerateTwoFactorArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *CaptchaGenerateTwoFactorArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerateTwoFactor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGenerateTwoFactorArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaGenerateTwoFactorArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("label", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:label: ", p), err) }
  if err := oprot.WriteString(string(p.Label)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.label (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:label: ", p), err) }
  return err
}

func (p *CaptchaGenerateTwoFactorArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("issuer", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:issuer: ", p), err) }
  if err := oprot.WriteString(string(p.Issuer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.issuer (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:issuer: ", p), err) }
  return err
}

func (p *CaptchaGenerateTwoFactorArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secret", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:secret: ", p), err) }
  if err := oprot.WriteString(string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:secret: ", p), err) }
  return err
}

func (p *CaptchaGenerateTwoFactorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGenerateTwoFactorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaGenerateTwoFactorResult struct {
  Success *TwoFactorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaGenerateTwoFactorResult() *CaptchaGenerateTwoFactorResult {
  return &CaptchaGenerateTwoFactorResult{}
}

var CaptchaGenerateTwoFactorResult_Success_DEFAULT *TwoFactorCode
func (p *CaptchaGenerateTwoFactorResult) GetSuccess() *TwoFactorCode {
  if !p.IsSetSuccess() {
    return CaptchaGenerateTwoFactorResult_Success_DEFAULT
  }
return p.Success
}
var CaptchaGenerateTwoFactorResult_Status_DEFAULT *Status
func (p *CaptchaGenerateTwoFactorResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaGenerateTwoFactorResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaGenerateTwoFactorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaGenerateTwoFactorResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaGenerateTwoFactorResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGenerateTwoFactorResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TwoFactorCode{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CaptchaGenerateTwoFactorResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaGenerateTwoFactorResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerateTwoFactor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGenerateTwoFactorResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaGenerateTwoFactorResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaGenerateTwoFactorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGenerateTwoFactorResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Secret
//  - Code
//  - Once
type CaptchaValidateTwoFactorCodeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Secret string `thrift:"secret,2" db:"secret" json:"secret"`
  Code string `thrift:"code,3" db:"code" json:"code"`
  Once bool `thrift:"once,4" db:"once" json:"once"`
}

func NewCaptchaValidateTwoFactorCodeArgs() *CaptchaValidateTwoFactorCodeArgs {
  return &CaptchaValidateTwoFactorCodeArgs{}
}


func (p *CaptchaValidateTwoFactorCodeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaValidateTwoFactorCodeArgs) GetSecret() string {
  return p.Secret
}

func (p *CaptchaValidateTwoFactorCodeArgs) GetCode() string {
  return p.Code
}

func (p *CaptchaValidateTwoFactorCodeArgs) GetOnce() bool {
  return p.Once
}
func (p *CaptchaValidateTwoFactorCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaValidateTwoFactorCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaValidateTwoFactorCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *CaptchaValidateTwoFactorCodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *CaptchaValidateTwoFactorCodeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Once = v
}
  return nil
}

func (p *CaptchaValidateTwoFactorCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidateTwoFactorCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaValidateTwoFactorCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaValidateTwoFactorCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secret", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:secret: ", p), err) }
  if err := oprot.WriteString(string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:secret: ", p), err) }
  return err
}

func (p *CaptchaValidateTwoFactorCodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:code: ", p), err) }
  return err
}

func (p *CaptchaValidateTwoFactorCodeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("once", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:once: ", p), err) }
  if err := oprot.WriteBool(bool(p.Once)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.once (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:once: ", p), err) }
  return err
}

func (p *CaptchaValidateTwoFactorCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaValidateTwoFactorCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaValidateTwoFactorCodeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaValidateTwoFactorCodeResult() *CaptchaValidateTwoFactorCodeResult {
  return &CaptchaValidateTwoFactorCodeResult{}
}

var CaptchaValidateTwoFactorCodeResult_Success_DEFAULT bool
func (p *CaptchaValidateTwoFactorCodeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return CaptchaValidateTwoFactorCodeResult_Success_DEFAULT
  }
return *p.Success
}
var CaptchaValidateTwoFactorCodeResult_Status_DEFAULT *Status
func (p *CaptchaValidateTwoFactorCodeResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaValidateTwoFactorCodeResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaValidateTwoFactorCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaValidateTwoFactorCodeResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaValidateTwoFactorCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaValidateTwoFactorCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CaptchaValidateTwoFactorCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaValidateTwoFactorCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidateTwoFactorCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaValidateTwoFactorCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaValidateTwoFactorCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaValidateTwoFactorCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaValidateTwoFactorCodeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Identifier
//  - Times
//  - Expired
type CaptchaSetCountArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  Times int32 `thrift:"times,3" db:"times" json:"times"`
  Expired int32 `thrift:"expired,4" db:"expired" json:"expired"`
}

func NewCaptchaSetCountArgs() *CaptchaSetCountArgs {
  return &CaptchaSetCountArgs{}
}


func (p *CaptchaSetCountArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaSetCountArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *CaptchaSetCountArgs) GetTimes() int32 {
  return p.Times
}

func (p *CaptchaSetCountArgs) GetExpired() int32 {
  return p.Expired
}
func (p *CaptchaSetCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaSetCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaSetCountArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *CaptchaSetCountArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Times = v
}
  return nil
}

func (p *CaptchaSetCountArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *CaptchaSetCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaSetCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaSetCountArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *CaptchaSetCountArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("times", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:times: ", p), err) }
  if err := oprot.WriteI32(int32(p.Times)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.times (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:times: ", p), err) }
  return err
}

func (p *CaptchaSetCountArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:expired: ", p), err) }
  return err
}

func (p *CaptchaSetCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaSetCountArgs(%+v)", *p)
}

// Attributes:
//  - Status
type CaptchaSetCountResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaSetCountResult() *CaptchaSetCountResult {
  return &CaptchaSetCountResult{}
}

var CaptchaSetCountResult_Status_DEFAULT *Status
func (p *CaptchaSetCountResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaSetCountResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaSetCountResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaSetCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaSetCountResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaSetCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaSetCountResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaSetCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaSetCountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Identifier
type CaptchaGetCountArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
}

func NewCaptchaGetCountArgs() *CaptchaGetCountArgs {
  return &CaptchaGetCountArgs{}
}


func (p *CaptchaGetCountArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaGetCountArgs) GetIdentifier() string {
  return p.Identifier
}
func (p *CaptchaGetCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGetCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaGetCountArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *CaptchaGetCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGetCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaGetCountArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *CaptchaGetCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGetCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaGetCountResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaGetCountResult() *CaptchaGetCountResult {
  return &CaptchaGetCountResult{}
}

var CaptchaGetCountResult_Success_DEFAULT int32
func (p *CaptchaGetCountResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return CaptchaGetCountResult_Success_DEFAULT
  }
return *p.Success
}
var CaptchaGetCountResult_Status_DEFAULT *Status
func (p *CaptchaGetCountResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaGetCountResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaGetCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaGetCountResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaGetCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGetCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CaptchaGetCountResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaGetCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGetCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaGetCountResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaGetCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGetCountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Identifier
type CaptchaClearCountArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
}

func NewCaptchaClearCountArgs() *CaptchaClearCountArgs {
  return &CaptchaClearCountArgs{}
}


func (p *CaptchaClearCountArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaClearCountArgs) GetIdentifier() string {
  return p.Identifier
}
func (p *CaptchaClearCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaClearCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaClearCountArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *CaptchaClearCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClearCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaClearCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaClearCountArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *CaptchaClearCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaClearCountArgs(%+v)", *p)
}

// Attributes:
//  - Status
type CaptchaClearCountResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaClearCountResult() *CaptchaClearCountResult {
  return &CaptchaClearCountResult{}
}

var CaptchaClearCountResult_Status_DEFAULT *Status
func (p *CaptchaClearCountResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaClearCountResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaClearCountResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaClearCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaClearCountResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaClearCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClearCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaClearCountResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaClearCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaClearCountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
type CaptchaGetTodayLeftSecondsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewCaptchaGetTodayLeftSecondsArgs() *CaptchaGetTodayLeftSecondsArgs {
  return &CaptchaGetTodayLeftSecondsArgs{}
}


func (p *CaptchaGetTodayLeftSecondsArgs) GetTraceId() string {
  return p.TraceId
}
func (p *CaptchaGetTodayLeftSecondsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGetTodayLeftSecondsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaGetTodayLeftSecondsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTodayLeftSeconds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGetTodayLeftSecondsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaGetTodayLeftSecondsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGetTodayLeftSecondsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaGetTodayLeftSecondsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaGetTodayLeftSecondsResult() *CaptchaGetTodayLeftSecondsResult {
  return &CaptchaGetTodayLeftSecondsResult{}
}

var CaptchaGetTodayLeftSecondsResult_Success_DEFAULT int32
func (p *CaptchaGetTodayLeftSecondsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return CaptchaGetTodayLeftSecondsResult_Success_DEFAULT
  }
return *p.Success
}
var CaptchaGetTodayLeftSecondsResult_Status_DEFAULT *Status
func (p *CaptchaGetTodayLeftSecondsResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaGetTodayLeftSecondsResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaGetTodayLeftSecondsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaGetTodayLeftSecondsResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaGetTodayLeftSecondsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGetTodayLeftSecondsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CaptchaGetTodayLeftSecondsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaGetTodayLeftSecondsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTodayLeftSeconds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGetTodayLeftSecondsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaGetTodayLeftSecondsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaGetTodayLeftSecondsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGetTodayLeftSecondsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Identifier
//  - Expired
type CaptchaSetTimerArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  Expired int32 `thrift:"expired,3" db:"expired" json:"expired"`
}

func NewCaptchaSetTimerArgs() *CaptchaSetTimerArgs {
  return &CaptchaSetTimerArgs{}
}


func (p *CaptchaSetTimerArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaSetTimerArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *CaptchaSetTimerArgs) GetExpired() int32 {
  return p.Expired
}
func (p *CaptchaSetTimerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaSetTimerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaSetTimerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *CaptchaSetTimerArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *CaptchaSetTimerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetTimer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaSetTimerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaSetTimerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *CaptchaSetTimerArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expired: ", p), err) }
  return err
}

func (p *CaptchaSetTimerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaSetTimerArgs(%+v)", *p)
}

// Attributes:
//  - Status
type CaptchaSetTimerResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaSetTimerResult() *CaptchaSetTimerResult {
  return &CaptchaSetTimerResult{}
}

var CaptchaSetTimerResult_Status_DEFAULT *Status
func (p *CaptchaSetTimerResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaSetTimerResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaSetTimerResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaSetTimerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaSetTimerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaSetTimerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SetTimer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaSetTimerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaSetTimerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaSetTimerResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Identifier
type CaptchaGetTimerArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
}

func NewCaptchaGetTimerArgs() *CaptchaGetTimerArgs {
  return &CaptchaGetTimerArgs{}
}


func (p *CaptchaGetTimerArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaGetTimerArgs) GetIdentifier() string {
  return p.Identifier
}
func (p *CaptchaGetTimerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGetTimerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaGetTimerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *CaptchaGetTimerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTimer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGetTimerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaGetTimerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *CaptchaGetTimerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGetTimerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type CaptchaGetTimerResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaGetTimerResult() *CaptchaGetTimerResult {
  return &CaptchaGetTimerResult{}
}

var CaptchaGetTimerResult_Success_DEFAULT bool
func (p *CaptchaGetTimerResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return CaptchaGetTimerResult_Success_DEFAULT
  }
return *p.Success
}
var CaptchaGetTimerResult_Status_DEFAULT *Status
func (p *CaptchaGetTimerResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaGetTimerResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaGetTimerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CaptchaGetTimerResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaGetTimerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaGetTimerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *CaptchaGetTimerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaGetTimerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTimer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaGetTimerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CaptchaGetTimerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaGetTimerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaGetTimerResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Identifier
type CaptchaClearTimerArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
}

func NewCaptchaClearTimerArgs() *CaptchaClearTimerArgs {
  return &CaptchaClearTimerArgs{}
}


func (p *CaptchaClearTimerArgs) GetTraceId() string {
  return p.TraceId
}

func (p *CaptchaClearTimerArgs) GetIdentifier() string {
  return p.Identifier
}
func (p *CaptchaClearTimerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaClearTimerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *CaptchaClearTimerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *CaptchaClearTimerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClearTimer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaClearTimerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *CaptchaClearTimerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *CaptchaClearTimerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaClearTimerArgs(%+v)", *p)
}

// Attributes:
//  - Status
type CaptchaClearTimerResult struct {
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewCaptchaClearTimerResult() *CaptchaClearTimerResult {
  return &CaptchaClearTimerResult{}
}

var CaptchaClearTimerResult_Status_DEFAULT *Status
func (p *CaptchaClearTimerResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return CaptchaClearTimerResult_Status_DEFAULT
  }
return p.Status
}
func (p *CaptchaClearTimerResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *CaptchaClearTimerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CaptchaClearTimerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *CaptchaClearTimerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClearTimer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CaptchaClearTimerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *CaptchaClearTimerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CaptchaClearTimerResult(%+v)", *p)
}


