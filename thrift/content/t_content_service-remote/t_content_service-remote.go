// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "content"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  TSystemNotice selectSystemNoticeById(string traceId, i32 id)")
  fmt.Fprintln(os.Stderr, "   selectSystemNoticeList(string traceId, i32 startPage, i32 pageSize)")
  fmt.Fprintln(os.Stderr, "  i32 selectSystemNoticeCount(string traceId)")
  fmt.Fprintln(os.Stderr, "  bool insertSystemNotice(string traceId, TSystemNotice systemNotice)")
  fmt.Fprintln(os.Stderr, "  bool updateSystemNotice(string traceId, TSystemNotice systemNotice)")
  fmt.Fprintln(os.Stderr, "  bool updateSystemNoticeStatus(string traceId, i32 id, i32 status)")
  fmt.Fprintln(os.Stderr, "  TBanner selectBannerById(string traceId, i32 id)")
  fmt.Fprintln(os.Stderr, "   selectBannerList(string traceId, i32 startPage, i32 pageSize)")
  fmt.Fprintln(os.Stderr, "  i32 selectBannerCount(string traceId)")
  fmt.Fprintln(os.Stderr, "  bool insertBanner(string traceId, TBanner banner)")
  fmt.Fprintln(os.Stderr, "  bool updateBanner(string traceId, TBanner banner)")
  fmt.Fprintln(os.Stderr, "  bool updateBannerStatus(string traceId, i32 id, i32 status)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := content.NewTContentServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "selectSystemNoticeById":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SelectSystemNoticeById requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err29 := (strconv.Atoi(flag.Arg(2)))
    if err29 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SelectSystemNoticeById(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "selectSystemNoticeList":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SelectSystemNoticeList requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err31 := (strconv.Atoi(flag.Arg(2)))
    if err31 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err32 := (strconv.Atoi(flag.Arg(3)))
    if err32 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SelectSystemNoticeList(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "selectSystemNoticeCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectSystemNoticeCount requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SelectSystemNoticeCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertSystemNotice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "InsertSystemNotice requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg35 := flag.Arg(2)
    mbTrans36 := thrift.NewTMemoryBufferLen(len(arg35))
    defer mbTrans36.Close()
    _, err37 := mbTrans36.WriteString(arg35)
    if err37 != nil {
      Usage()
      return
    }
    factory38 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt39 := factory38.GetProtocol(mbTrans36)
    argvalue1 := content.NewTSystemNotice()
    err40 := argvalue1.Read(jsProt39)
    if err40 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.InsertSystemNotice(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSystemNotice":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSystemNotice requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg42 := flag.Arg(2)
    mbTrans43 := thrift.NewTMemoryBufferLen(len(arg42))
    defer mbTrans43.Close()
    _, err44 := mbTrans43.WriteString(arg42)
    if err44 != nil {
      Usage()
      return
    }
    factory45 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt46 := factory45.GetProtocol(mbTrans43)
    argvalue1 := content.NewTSystemNotice()
    err47 := argvalue1.Read(jsProt46)
    if err47 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSystemNotice(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSystemNoticeStatus":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSystemNoticeStatus requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err49 := (strconv.Atoi(flag.Arg(2)))
    if err49 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err50 := (strconv.Atoi(flag.Arg(3)))
    if err50 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.UpdateSystemNoticeStatus(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "selectBannerById":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SelectBannerById requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err52 := (strconv.Atoi(flag.Arg(2)))
    if err52 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.SelectBannerById(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "selectBannerList":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SelectBannerList requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err54 := (strconv.Atoi(flag.Arg(2)))
    if err54 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err55 := (strconv.Atoi(flag.Arg(3)))
    if err55 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SelectBannerList(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "selectBannerCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SelectBannerCount requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SelectBannerCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "insertBanner":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "InsertBanner requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg58 := flag.Arg(2)
    mbTrans59 := thrift.NewTMemoryBufferLen(len(arg58))
    defer mbTrans59.Close()
    _, err60 := mbTrans59.WriteString(arg58)
    if err60 != nil {
      Usage()
      return
    }
    factory61 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt62 := factory61.GetProtocol(mbTrans59)
    argvalue1 := content.NewTBanner()
    err63 := argvalue1.Read(jsProt62)
    if err63 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.InsertBanner(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBanner":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBanner requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg65 := flag.Arg(2)
    mbTrans66 := thrift.NewTMemoryBufferLen(len(arg65))
    defer mbTrans66.Close()
    _, err67 := mbTrans66.WriteString(arg65)
    if err67 != nil {
      Usage()
      return
    }
    factory68 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt69 := factory68.GetProtocol(mbTrans66)
    argvalue1 := content.NewTBanner()
    err70 := argvalue1.Read(jsProt69)
    if err70 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateBanner(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBannerStatus":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateBannerStatus requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err72 := (strconv.Atoi(flag.Arg(2)))
    if err72 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err73 := (strconv.Atoi(flag.Arg(3)))
    if err73 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.UpdateBannerStatus(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
