// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package content

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Channel
//  - Lang
//  - Title
//  - LinkUrl
//  - Status
//  - Sort
//  - UpTime
//  - DownTime
//  - CreateTime
//  - UpdateTime
//  - Empty
type TSystemNotice struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Channel int32 `thrift:"channel,2" db:"channel" json:"channel"`
  Lang string `thrift:"lang,3" db:"lang" json:"lang"`
  Title string `thrift:"title,4" db:"title" json:"title"`
  LinkUrl string `thrift:"linkUrl,5" db:"linkUrl" json:"linkUrl"`
  Status int32 `thrift:"status,6" db:"status" json:"status"`
  Sort int32 `thrift:"sort,7" db:"sort" json:"sort"`
  UpTime string `thrift:"upTime,8" db:"upTime" json:"upTime"`
  DownTime string `thrift:"downTime,9" db:"downTime" json:"downTime"`
  CreateTime string `thrift:"createTime,10" db:"createTime" json:"createTime"`
  UpdateTime string `thrift:"updateTime,11" db:"updateTime" json:"updateTime"`
  Empty bool `thrift:"empty,12" db:"empty" json:"empty,omitempty"`
}

func NewTSystemNotice() *TSystemNotice {
  return &TSystemNotice{}
}


func (p *TSystemNotice) GetID() int32 {
  return p.ID
}

func (p *TSystemNotice) GetChannel() int32 {
  return p.Channel
}

func (p *TSystemNotice) GetLang() string {
  return p.Lang
}

func (p *TSystemNotice) GetTitle() string {
  return p.Title
}

func (p *TSystemNotice) GetLinkUrl() string {
  return p.LinkUrl
}

func (p *TSystemNotice) GetStatus() int32 {
  return p.Status
}

func (p *TSystemNotice) GetSort() int32 {
  return p.Sort
}

func (p *TSystemNotice) GetUpTime() string {
  return p.UpTime
}

func (p *TSystemNotice) GetDownTime() string {
  return p.DownTime
}

func (p *TSystemNotice) GetCreateTime() string {
  return p.CreateTime
}

func (p *TSystemNotice) GetUpdateTime() string {
  return p.UpdateTime
}
var TSystemNotice_Empty_DEFAULT bool = false

func (p *TSystemNotice) GetEmpty() bool {
  return p.Empty
}
func (p *TSystemNotice) IsSetEmpty() bool {
  return p.Empty != TSystemNotice_Empty_DEFAULT
}

func (p *TSystemNotice) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSystemNotice)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TSystemNotice)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Channel = v
}
  return nil
}

func (p *TSystemNotice)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *TSystemNotice)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *TSystemNotice)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LinkUrl = v
}
  return nil
}

func (p *TSystemNotice)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TSystemNotice)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Sort = v
}
  return nil
}

func (p *TSystemNotice)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UpTime = v
}
  return nil
}

func (p *TSystemNotice)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DownTime = v
}
  return nil
}

func (p *TSystemNotice)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *TSystemNotice)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *TSystemNotice)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TSystemNotice) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSystemNotice"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSystemNotice) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channel", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channel: ", p), err) }
  if err := oprot.WriteI32(int32(p.Channel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channel (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channel: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lang: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:title: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("linkUrl", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:linkUrl: ", p), err) }
  if err := oprot.WriteString(string(p.LinkUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.linkUrl (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:linkUrl: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sort", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:sort: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sort (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:sort: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upTime", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:upTime: ", p), err) }
  if err := oprot.WriteString(string(p.UpTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.upTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:upTime: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("downTime", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:downTime: ", p), err) }
  if err := oprot.WriteString(string(p.DownTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.downTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:downTime: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:createTime: ", p), err) }
  if err := oprot.WriteString(string(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:createTime: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updateTime: ", p), err) }
  if err := oprot.WriteString(string(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updateTime: ", p), err) }
  return err
}

func (p *TSystemNotice) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:empty: ", p), err) }
  }
  return err
}

func (p *TSystemNotice) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSystemNotice(%+v)", *p)
}

// Attributes:
//  - ID
//  - Title
//  - LinkAddress
//  - PhotoAddress
//  - CreatedAt
//  - EndAt
//  - AppId
//  - Sort
//  - Status
//  - Lang
//  - Empty
//  - CreateTime
//  - UpdateTime
//  - TemplateId
type TBanner struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Title string `thrift:"title,2" db:"title" json:"title"`
  LinkAddress string `thrift:"linkAddress,3" db:"linkAddress" json:"linkAddress"`
  PhotoAddress string `thrift:"photoAddress,4" db:"photoAddress" json:"photoAddress"`
  CreatedAt string `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  EndAt string `thrift:"endAt,6" db:"endAt" json:"endAt"`
  AppId string `thrift:"appId,7" db:"appId" json:"appId"`
  Sort int32 `thrift:"sort,8" db:"sort" json:"sort"`
  Status string `thrift:"status,9" db:"status" json:"status"`
  Lang string `thrift:"lang,10" db:"lang" json:"lang"`
  Empty bool `thrift:"empty,11" db:"empty" json:"empty,omitempty"`
  CreateTime string `thrift:"createTime,12" db:"createTime" json:"createTime"`
  UpdateTime string `thrift:"updateTime,13" db:"updateTime" json:"updateTime"`
  TemplateId int32 `thrift:"templateId,14" db:"templateId" json:"templateId"`
}

func NewTBanner() *TBanner {
  return &TBanner{}
}


func (p *TBanner) GetID() int32 {
  return p.ID
}

func (p *TBanner) GetTitle() string {
  return p.Title
}

func (p *TBanner) GetLinkAddress() string {
  return p.LinkAddress
}

func (p *TBanner) GetPhotoAddress() string {
  return p.PhotoAddress
}

func (p *TBanner) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TBanner) GetEndAt() string {
  return p.EndAt
}

func (p *TBanner) GetAppId() string {
  return p.AppId
}

func (p *TBanner) GetSort() int32 {
  return p.Sort
}

func (p *TBanner) GetStatus() string {
  return p.Status
}

func (p *TBanner) GetLang() string {
  return p.Lang
}
var TBanner_Empty_DEFAULT bool = false

func (p *TBanner) GetEmpty() bool {
  return p.Empty
}

func (p *TBanner) GetCreateTime() string {
  return p.CreateTime
}

func (p *TBanner) GetUpdateTime() string {
  return p.UpdateTime
}

func (p *TBanner) GetTemplateId() int32 {
  return p.TemplateId
}
func (p *TBanner) IsSetEmpty() bool {
  return p.Empty != TBanner_Empty_DEFAULT
}

func (p *TBanner) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBanner)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TBanner)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *TBanner)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LinkAddress = v
}
  return nil
}

func (p *TBanner)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PhotoAddress = v
}
  return nil
}

func (p *TBanner)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TBanner)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EndAt = v
}
  return nil
}

func (p *TBanner)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TBanner)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Sort = v
}
  return nil
}

func (p *TBanner)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TBanner)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *TBanner)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TBanner)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *TBanner)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *TBanner)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.TemplateId = v
}
  return nil
}

func (p *TBanner) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TBanner"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBanner) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TBanner) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err) }
  return err
}

func (p *TBanner) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("linkAddress", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:linkAddress: ", p), err) }
  if err := oprot.WriteString(string(p.LinkAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.linkAddress (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:linkAddress: ", p), err) }
  return err
}

func (p *TBanner) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("photoAddress", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:photoAddress: ", p), err) }
  if err := oprot.WriteString(string(p.PhotoAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.photoAddress (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:photoAddress: ", p), err) }
  return err
}

func (p *TBanner) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TBanner) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endAt", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:endAt: ", p), err) }
  if err := oprot.WriteString(string(p.EndAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endAt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:endAt: ", p), err) }
  return err
}

func (p *TBanner) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:appId: ", p), err) }
  return err
}

func (p *TBanner) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sort", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sort: ", p), err) }
  if err := oprot.WriteI32(int32(p.Sort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sort (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sort: ", p), err) }
  return err
}

func (p *TBanner) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err) }
  return err
}

func (p *TBanner) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:lang: ", p), err) }
  return err
}

func (p *TBanner) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:empty: ", p), err) }
  }
  return err
}

func (p *TBanner) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:createTime: ", p), err) }
  if err := oprot.WriteString(string(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:createTime: ", p), err) }
  return err
}

func (p *TBanner) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:updateTime: ", p), err) }
  if err := oprot.WriteString(string(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:updateTime: ", p), err) }
  return err
}

func (p *TBanner) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("templateId", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:templateId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TemplateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.templateId (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:templateId: ", p), err) }
  return err
}

func (p *TBanner) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBanner(%+v)", *p)
}

type TContentService interface {
  // Parameters:
  //  - TraceId
  //  - ID
  SelectSystemNoticeById(ctx context.Context, traceId string, id int32) (r *TSystemNotice, err error)
  // Parameters:
  //  - TraceId
  //  - StartPage
  //  - PageSize
  SelectSystemNoticeList(ctx context.Context, traceId string, startPage int32, pageSize int32) (r []*TSystemNotice, err error)
  // Parameters:
  //  - TraceId
  SelectSystemNoticeCount(ctx context.Context, traceId string) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - SystemNotice
  InsertSystemNotice(ctx context.Context, traceId string, systemNotice *TSystemNotice) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - SystemNotice
  UpdateSystemNotice(ctx context.Context, traceId string, systemNotice *TSystemNotice) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - ID
  //  - Status
  UpdateSystemNoticeStatus(ctx context.Context, traceId string, id int32, status int32) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - ID
  SelectBannerById(ctx context.Context, traceId string, id int32) (r *TBanner, err error)
  // Parameters:
  //  - TraceId
  //  - StartPage
  //  - PageSize
  SelectBannerList(ctx context.Context, traceId string, startPage int32, pageSize int32) (r []*TBanner, err error)
  // Parameters:
  //  - TraceId
  SelectBannerCount(ctx context.Context, traceId string) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - Banner
  InsertBanner(ctx context.Context, traceId string, banner *TBanner) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - Banner
  UpdateBanner(ctx context.Context, traceId string, banner *TBanner) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - ID
  //  - Status
  UpdateBannerStatus(ctx context.Context, traceId string, id int32, status int32) (r bool, err error)
}

type TContentServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTContentService instead
func NewTContentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TContentServiceClient {
  return &TContentServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTContentService instead
func NewTContentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TContentServiceClient {
  return &TContentServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTContentServiceClient(c thrift.TClient) *TContentServiceClient {
  return &TContentServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - ID
func (p *TContentServiceClient) SelectSystemNoticeById(ctx context.Context, traceId string, id int32) (r *TSystemNotice, err error) {
  var _args0 TContentServiceSelectSystemNoticeByIdArgs
  _args0.TraceId = traceId
  _args0.ID = id
  var _result1 TContentServiceSelectSystemNoticeByIdResult
  if err = p.c.Call(ctx, "selectSystemNoticeById", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - StartPage
//  - PageSize
func (p *TContentServiceClient) SelectSystemNoticeList(ctx context.Context, traceId string, startPage int32, pageSize int32) (r []*TSystemNotice, err error) {
  var _args2 TContentServiceSelectSystemNoticeListArgs
  _args2.TraceId = traceId
  _args2.StartPage = startPage
  _args2.PageSize = pageSize
  var _result3 TContentServiceSelectSystemNoticeListResult
  if err = p.c.Call(ctx, "selectSystemNoticeList", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
func (p *TContentServiceClient) SelectSystemNoticeCount(ctx context.Context, traceId string) (r int32, err error) {
  var _args4 TContentServiceSelectSystemNoticeCountArgs
  _args4.TraceId = traceId
  var _result5 TContentServiceSelectSystemNoticeCountResult
  if err = p.c.Call(ctx, "selectSystemNoticeCount", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - SystemNotice
func (p *TContentServiceClient) InsertSystemNotice(ctx context.Context, traceId string, systemNotice *TSystemNotice) (r bool, err error) {
  var _args6 TContentServiceInsertSystemNoticeArgs
  _args6.TraceId = traceId
  _args6.SystemNotice = systemNotice
  var _result7 TContentServiceInsertSystemNoticeResult
  if err = p.c.Call(ctx, "insertSystemNotice", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - SystemNotice
func (p *TContentServiceClient) UpdateSystemNotice(ctx context.Context, traceId string, systemNotice *TSystemNotice) (r bool, err error) {
  var _args8 TContentServiceUpdateSystemNoticeArgs
  _args8.TraceId = traceId
  _args8.SystemNotice = systemNotice
  var _result9 TContentServiceUpdateSystemNoticeResult
  if err = p.c.Call(ctx, "updateSystemNotice", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - ID
//  - Status
func (p *TContentServiceClient) UpdateSystemNoticeStatus(ctx context.Context, traceId string, id int32, status int32) (r bool, err error) {
  var _args10 TContentServiceUpdateSystemNoticeStatusArgs
  _args10.TraceId = traceId
  _args10.ID = id
  _args10.Status = status
  var _result11 TContentServiceUpdateSystemNoticeStatusResult
  if err = p.c.Call(ctx, "updateSystemNoticeStatus", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - ID
func (p *TContentServiceClient) SelectBannerById(ctx context.Context, traceId string, id int32) (r *TBanner, err error) {
  var _args12 TContentServiceSelectBannerByIdArgs
  _args12.TraceId = traceId
  _args12.ID = id
  var _result13 TContentServiceSelectBannerByIdResult
  if err = p.c.Call(ctx, "selectBannerById", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - StartPage
//  - PageSize
func (p *TContentServiceClient) SelectBannerList(ctx context.Context, traceId string, startPage int32, pageSize int32) (r []*TBanner, err error) {
  var _args14 TContentServiceSelectBannerListArgs
  _args14.TraceId = traceId
  _args14.StartPage = startPage
  _args14.PageSize = pageSize
  var _result15 TContentServiceSelectBannerListResult
  if err = p.c.Call(ctx, "selectBannerList", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - TraceId
func (p *TContentServiceClient) SelectBannerCount(ctx context.Context, traceId string) (r int32, err error) {
  var _args16 TContentServiceSelectBannerCountArgs
  _args16.TraceId = traceId
  var _result17 TContentServiceSelectBannerCountResult
  if err = p.c.Call(ctx, "selectBannerCount", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Banner
func (p *TContentServiceClient) InsertBanner(ctx context.Context, traceId string, banner *TBanner) (r bool, err error) {
  var _args18 TContentServiceInsertBannerArgs
  _args18.TraceId = traceId
  _args18.Banner = banner
  var _result19 TContentServiceInsertBannerResult
  if err = p.c.Call(ctx, "insertBanner", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Banner
func (p *TContentServiceClient) UpdateBanner(ctx context.Context, traceId string, banner *TBanner) (r bool, err error) {
  var _args20 TContentServiceUpdateBannerArgs
  _args20.TraceId = traceId
  _args20.Banner = banner
  var _result21 TContentServiceUpdateBannerResult
  if err = p.c.Call(ctx, "updateBanner", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - ID
//  - Status
func (p *TContentServiceClient) UpdateBannerStatus(ctx context.Context, traceId string, id int32, status int32) (r bool, err error) {
  var _args22 TContentServiceUpdateBannerStatusArgs
  _args22.TraceId = traceId
  _args22.ID = id
  _args22.Status = status
  var _result23 TContentServiceUpdateBannerStatusResult
  if err = p.c.Call(ctx, "updateBannerStatus", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

type TContentServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TContentService
}

func (p *TContentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TContentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TContentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTContentServiceProcessor(handler TContentService) *TContentServiceProcessor {

  self24 := &TContentServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["selectSystemNoticeById"] = &tContentServiceProcessorSelectSystemNoticeById{handler:handler}
  self24.processorMap["selectSystemNoticeList"] = &tContentServiceProcessorSelectSystemNoticeList{handler:handler}
  self24.processorMap["selectSystemNoticeCount"] = &tContentServiceProcessorSelectSystemNoticeCount{handler:handler}
  self24.processorMap["insertSystemNotice"] = &tContentServiceProcessorInsertSystemNotice{handler:handler}
  self24.processorMap["updateSystemNotice"] = &tContentServiceProcessorUpdateSystemNotice{handler:handler}
  self24.processorMap["updateSystemNoticeStatus"] = &tContentServiceProcessorUpdateSystemNoticeStatus{handler:handler}
  self24.processorMap["selectBannerById"] = &tContentServiceProcessorSelectBannerById{handler:handler}
  self24.processorMap["selectBannerList"] = &tContentServiceProcessorSelectBannerList{handler:handler}
  self24.processorMap["selectBannerCount"] = &tContentServiceProcessorSelectBannerCount{handler:handler}
  self24.processorMap["insertBanner"] = &tContentServiceProcessorInsertBanner{handler:handler}
  self24.processorMap["updateBanner"] = &tContentServiceProcessorUpdateBanner{handler:handler}
  self24.processorMap["updateBannerStatus"] = &tContentServiceProcessorUpdateBannerStatus{handler:handler}
return self24
}

func (p *TContentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x25.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x25

}

type tContentServiceProcessorSelectSystemNoticeById struct {
  handler TContentService
}

func (p *tContentServiceProcessorSelectSystemNoticeById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceSelectSystemNoticeByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSystemNoticeById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceSelectSystemNoticeByIdResult{}
var retval *TSystemNotice
  var err2 error
  if retval, err2 = p.handler.SelectSystemNoticeById(ctx, args.TraceId, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSystemNoticeById: " + err2.Error())
    oprot.WriteMessageBegin("selectSystemNoticeById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSystemNoticeById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorSelectSystemNoticeList struct {
  handler TContentService
}

func (p *tContentServiceProcessorSelectSystemNoticeList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceSelectSystemNoticeListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSystemNoticeList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceSelectSystemNoticeListResult{}
var retval []*TSystemNotice
  var err2 error
  if retval, err2 = p.handler.SelectSystemNoticeList(ctx, args.TraceId, args.StartPage, args.PageSize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSystemNoticeList: " + err2.Error())
    oprot.WriteMessageBegin("selectSystemNoticeList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSystemNoticeList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorSelectSystemNoticeCount struct {
  handler TContentService
}

func (p *tContentServiceProcessorSelectSystemNoticeCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceSelectSystemNoticeCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSystemNoticeCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceSelectSystemNoticeCountResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectSystemNoticeCount(ctx, args.TraceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSystemNoticeCount: " + err2.Error())
    oprot.WriteMessageBegin("selectSystemNoticeCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectSystemNoticeCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorInsertSystemNotice struct {
  handler TContentService
}

func (p *tContentServiceProcessorInsertSystemNotice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceInsertSystemNoticeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("insertSystemNotice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceInsertSystemNoticeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.InsertSystemNotice(ctx, args.TraceId, args.SystemNotice); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertSystemNotice: " + err2.Error())
    oprot.WriteMessageBegin("insertSystemNotice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("insertSystemNotice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorUpdateSystemNotice struct {
  handler TContentService
}

func (p *tContentServiceProcessorUpdateSystemNotice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceUpdateSystemNoticeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateSystemNotice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceUpdateSystemNoticeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateSystemNotice(ctx, args.TraceId, args.SystemNotice); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSystemNotice: " + err2.Error())
    oprot.WriteMessageBegin("updateSystemNotice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateSystemNotice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorUpdateSystemNoticeStatus struct {
  handler TContentService
}

func (p *tContentServiceProcessorUpdateSystemNoticeStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceUpdateSystemNoticeStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateSystemNoticeStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceUpdateSystemNoticeStatusResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateSystemNoticeStatus(ctx, args.TraceId, args.ID, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSystemNoticeStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateSystemNoticeStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateSystemNoticeStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorSelectBannerById struct {
  handler TContentService
}

func (p *tContentServiceProcessorSelectBannerById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceSelectBannerByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectBannerById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceSelectBannerByIdResult{}
var retval *TBanner
  var err2 error
  if retval, err2 = p.handler.SelectBannerById(ctx, args.TraceId, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectBannerById: " + err2.Error())
    oprot.WriteMessageBegin("selectBannerById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectBannerById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorSelectBannerList struct {
  handler TContentService
}

func (p *tContentServiceProcessorSelectBannerList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceSelectBannerListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectBannerList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceSelectBannerListResult{}
var retval []*TBanner
  var err2 error
  if retval, err2 = p.handler.SelectBannerList(ctx, args.TraceId, args.StartPage, args.PageSize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectBannerList: " + err2.Error())
    oprot.WriteMessageBegin("selectBannerList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectBannerList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorSelectBannerCount struct {
  handler TContentService
}

func (p *tContentServiceProcessorSelectBannerCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceSelectBannerCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectBannerCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceSelectBannerCountResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectBannerCount(ctx, args.TraceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectBannerCount: " + err2.Error())
    oprot.WriteMessageBegin("selectBannerCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectBannerCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorInsertBanner struct {
  handler TContentService
}

func (p *tContentServiceProcessorInsertBanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceInsertBannerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("insertBanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceInsertBannerResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.InsertBanner(ctx, args.TraceId, args.Banner); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertBanner: " + err2.Error())
    oprot.WriteMessageBegin("insertBanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("insertBanner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorUpdateBanner struct {
  handler TContentService
}

func (p *tContentServiceProcessorUpdateBanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceUpdateBannerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateBanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceUpdateBannerResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateBanner(ctx, args.TraceId, args.Banner); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateBanner: " + err2.Error())
    oprot.WriteMessageBegin("updateBanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateBanner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tContentServiceProcessorUpdateBannerStatus struct {
  handler TContentService
}

func (p *tContentServiceProcessorUpdateBannerStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TContentServiceUpdateBannerStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateBannerStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TContentServiceUpdateBannerStatusResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateBannerStatus(ctx, args.TraceId, args.ID, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateBannerStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateBannerStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateBannerStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - ID
type TContentServiceSelectSystemNoticeByIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
}

func NewTContentServiceSelectSystemNoticeByIdArgs() *TContentServiceSelectSystemNoticeByIdArgs {
  return &TContentServiceSelectSystemNoticeByIdArgs{}
}


func (p *TContentServiceSelectSystemNoticeByIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TContentServiceSelectSystemNoticeByIdArgs) GetID() int32 {
  return p.ID
}
func (p *TContentServiceSelectSystemNoticeByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectSystemNoticeByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceSelectSystemNoticeByIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TContentServiceSelectSystemNoticeByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSystemNoticeById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectSystemNoticeByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceSelectSystemNoticeByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TContentServiceSelectSystemNoticeByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectSystemNoticeByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceSelectSystemNoticeByIdResult struct {
  Success *TSystemNotice `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceSelectSystemNoticeByIdResult() *TContentServiceSelectSystemNoticeByIdResult {
  return &TContentServiceSelectSystemNoticeByIdResult{}
}

var TContentServiceSelectSystemNoticeByIdResult_Success_DEFAULT *TSystemNotice
func (p *TContentServiceSelectSystemNoticeByIdResult) GetSuccess() *TSystemNotice {
  if !p.IsSetSuccess() {
    return TContentServiceSelectSystemNoticeByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TContentServiceSelectSystemNoticeByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceSelectSystemNoticeByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectSystemNoticeByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TSystemNotice{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TContentServiceSelectSystemNoticeByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSystemNoticeById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectSystemNoticeByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceSelectSystemNoticeByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectSystemNoticeByIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - StartPage
//  - PageSize
type TContentServiceSelectSystemNoticeListArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  StartPage int32 `thrift:"startPage,2" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,3" db:"pageSize" json:"pageSize"`
}

func NewTContentServiceSelectSystemNoticeListArgs() *TContentServiceSelectSystemNoticeListArgs {
  return &TContentServiceSelectSystemNoticeListArgs{}
}


func (p *TContentServiceSelectSystemNoticeListArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TContentServiceSelectSystemNoticeListArgs) GetStartPage() int32 {
  return p.StartPage
}

func (p *TContentServiceSelectSystemNoticeListArgs) GetPageSize() int32 {
  return p.PageSize
}
func (p *TContentServiceSelectSystemNoticeListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectSystemNoticeListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceSelectSystemNoticeListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TContentServiceSelectSystemNoticeListArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TContentServiceSelectSystemNoticeListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSystemNoticeList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectSystemNoticeListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceSelectSystemNoticeListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startPage: ", p), err) }
  return err
}

func (p *TContentServiceSelectSystemNoticeListArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pageSize: ", p), err) }
  return err
}

func (p *TContentServiceSelectSystemNoticeListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectSystemNoticeListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceSelectSystemNoticeListResult struct {
  Success []*TSystemNotice `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceSelectSystemNoticeListResult() *TContentServiceSelectSystemNoticeListResult {
  return &TContentServiceSelectSystemNoticeListResult{}
}

var TContentServiceSelectSystemNoticeListResult_Success_DEFAULT []*TSystemNotice

func (p *TContentServiceSelectSystemNoticeListResult) GetSuccess() []*TSystemNotice {
  return p.Success
}
func (p *TContentServiceSelectSystemNoticeListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceSelectSystemNoticeListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectSystemNoticeListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSystemNotice, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := &TSystemNotice{}
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Success = append(p.Success, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TContentServiceSelectSystemNoticeListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSystemNoticeList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectSystemNoticeListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceSelectSystemNoticeListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectSystemNoticeListResult(%+v)", *p)
}

// Attributes:
//  - TraceId
type TContentServiceSelectSystemNoticeCountArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewTContentServiceSelectSystemNoticeCountArgs() *TContentServiceSelectSystemNoticeCountArgs {
  return &TContentServiceSelectSystemNoticeCountArgs{}
}


func (p *TContentServiceSelectSystemNoticeCountArgs) GetTraceId() string {
  return p.TraceId
}
func (p *TContentServiceSelectSystemNoticeCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectSystemNoticeCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceSelectSystemNoticeCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSystemNoticeCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectSystemNoticeCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceSelectSystemNoticeCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectSystemNoticeCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceSelectSystemNoticeCountResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceSelectSystemNoticeCountResult() *TContentServiceSelectSystemNoticeCountResult {
  return &TContentServiceSelectSystemNoticeCountResult{}
}

var TContentServiceSelectSystemNoticeCountResult_Success_DEFAULT int32
func (p *TContentServiceSelectSystemNoticeCountResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TContentServiceSelectSystemNoticeCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContentServiceSelectSystemNoticeCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceSelectSystemNoticeCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectSystemNoticeCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContentServiceSelectSystemNoticeCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSystemNoticeCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectSystemNoticeCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceSelectSystemNoticeCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectSystemNoticeCountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - SystemNotice
type TContentServiceInsertSystemNoticeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  SystemNotice *TSystemNotice `thrift:"systemNotice,2" db:"systemNotice" json:"systemNotice"`
}

func NewTContentServiceInsertSystemNoticeArgs() *TContentServiceInsertSystemNoticeArgs {
  return &TContentServiceInsertSystemNoticeArgs{}
}


func (p *TContentServiceInsertSystemNoticeArgs) GetTraceId() string {
  return p.TraceId
}
var TContentServiceInsertSystemNoticeArgs_SystemNotice_DEFAULT *TSystemNotice
func (p *TContentServiceInsertSystemNoticeArgs) GetSystemNotice() *TSystemNotice {
  if !p.IsSetSystemNotice() {
    return TContentServiceInsertSystemNoticeArgs_SystemNotice_DEFAULT
  }
return p.SystemNotice
}
func (p *TContentServiceInsertSystemNoticeArgs) IsSetSystemNotice() bool {
  return p.SystemNotice != nil
}

func (p *TContentServiceInsertSystemNoticeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceInsertSystemNoticeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceInsertSystemNoticeArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SystemNotice = &TSystemNotice{}
  if err := p.SystemNotice.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemNotice), err)
  }
  return nil
}

func (p *TContentServiceInsertSystemNoticeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertSystemNotice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceInsertSystemNoticeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceInsertSystemNoticeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("systemNotice", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemNotice: ", p), err) }
  if err := p.SystemNotice.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemNotice), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemNotice: ", p), err) }
  return err
}

func (p *TContentServiceInsertSystemNoticeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceInsertSystemNoticeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceInsertSystemNoticeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceInsertSystemNoticeResult() *TContentServiceInsertSystemNoticeResult {
  return &TContentServiceInsertSystemNoticeResult{}
}

var TContentServiceInsertSystemNoticeResult_Success_DEFAULT bool
func (p *TContentServiceInsertSystemNoticeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TContentServiceInsertSystemNoticeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContentServiceInsertSystemNoticeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceInsertSystemNoticeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceInsertSystemNoticeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContentServiceInsertSystemNoticeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertSystemNotice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceInsertSystemNoticeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceInsertSystemNoticeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceInsertSystemNoticeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - SystemNotice
type TContentServiceUpdateSystemNoticeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  SystemNotice *TSystemNotice `thrift:"systemNotice,2" db:"systemNotice" json:"systemNotice"`
}

func NewTContentServiceUpdateSystemNoticeArgs() *TContentServiceUpdateSystemNoticeArgs {
  return &TContentServiceUpdateSystemNoticeArgs{}
}


func (p *TContentServiceUpdateSystemNoticeArgs) GetTraceId() string {
  return p.TraceId
}
var TContentServiceUpdateSystemNoticeArgs_SystemNotice_DEFAULT *TSystemNotice
func (p *TContentServiceUpdateSystemNoticeArgs) GetSystemNotice() *TSystemNotice {
  if !p.IsSetSystemNotice() {
    return TContentServiceUpdateSystemNoticeArgs_SystemNotice_DEFAULT
  }
return p.SystemNotice
}
func (p *TContentServiceUpdateSystemNoticeArgs) IsSetSystemNotice() bool {
  return p.SystemNotice != nil
}

func (p *TContentServiceUpdateSystemNoticeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceUpdateSystemNoticeArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.SystemNotice = &TSystemNotice{}
  if err := p.SystemNotice.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemNotice), err)
  }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSystemNotice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceUpdateSystemNoticeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("systemNotice", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemNotice: ", p), err) }
  if err := p.SystemNotice.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemNotice), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemNotice: ", p), err) }
  return err
}

func (p *TContentServiceUpdateSystemNoticeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceUpdateSystemNoticeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceUpdateSystemNoticeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceUpdateSystemNoticeResult() *TContentServiceUpdateSystemNoticeResult {
  return &TContentServiceUpdateSystemNoticeResult{}
}

var TContentServiceUpdateSystemNoticeResult_Success_DEFAULT bool
func (p *TContentServiceUpdateSystemNoticeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TContentServiceUpdateSystemNoticeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContentServiceUpdateSystemNoticeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceUpdateSystemNoticeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContentServiceUpdateSystemNoticeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSystemNotice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceUpdateSystemNoticeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceUpdateSystemNoticeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - ID
//  - Status
type TContentServiceUpdateSystemNoticeStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
  Status int32 `thrift:"status,3" db:"status" json:"status"`
}

func NewTContentServiceUpdateSystemNoticeStatusArgs() *TContentServiceUpdateSystemNoticeStatusArgs {
  return &TContentServiceUpdateSystemNoticeStatusArgs{}
}


func (p *TContentServiceUpdateSystemNoticeStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs) GetID() int32 {
  return p.ID
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs) GetStatus() int32 {
  return p.Status
}
func (p *TContentServiceUpdateSystemNoticeStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSystemNoticeStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TContentServiceUpdateSystemNoticeStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceUpdateSystemNoticeStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceUpdateSystemNoticeStatusResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceUpdateSystemNoticeStatusResult() *TContentServiceUpdateSystemNoticeStatusResult {
  return &TContentServiceUpdateSystemNoticeStatusResult{}
}

var TContentServiceUpdateSystemNoticeStatusResult_Success_DEFAULT bool
func (p *TContentServiceUpdateSystemNoticeStatusResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TContentServiceUpdateSystemNoticeStatusResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContentServiceUpdateSystemNoticeStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceUpdateSystemNoticeStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContentServiceUpdateSystemNoticeStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSystemNoticeStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceUpdateSystemNoticeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceUpdateSystemNoticeStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceUpdateSystemNoticeStatusResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - ID
type TContentServiceSelectBannerByIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
}

func NewTContentServiceSelectBannerByIdArgs() *TContentServiceSelectBannerByIdArgs {
  return &TContentServiceSelectBannerByIdArgs{}
}


func (p *TContentServiceSelectBannerByIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TContentServiceSelectBannerByIdArgs) GetID() int32 {
  return p.ID
}
func (p *TContentServiceSelectBannerByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectBannerByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceSelectBannerByIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TContentServiceSelectBannerByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectBannerById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectBannerByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceSelectBannerByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TContentServiceSelectBannerByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectBannerByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceSelectBannerByIdResult struct {
  Success *TBanner `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceSelectBannerByIdResult() *TContentServiceSelectBannerByIdResult {
  return &TContentServiceSelectBannerByIdResult{}
}

var TContentServiceSelectBannerByIdResult_Success_DEFAULT *TBanner
func (p *TContentServiceSelectBannerByIdResult) GetSuccess() *TBanner {
  if !p.IsSetSuccess() {
    return TContentServiceSelectBannerByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TContentServiceSelectBannerByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceSelectBannerByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectBannerByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TBanner{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TContentServiceSelectBannerByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectBannerById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectBannerByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceSelectBannerByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectBannerByIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - StartPage
//  - PageSize
type TContentServiceSelectBannerListArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  StartPage int32 `thrift:"startPage,2" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,3" db:"pageSize" json:"pageSize"`
}

func NewTContentServiceSelectBannerListArgs() *TContentServiceSelectBannerListArgs {
  return &TContentServiceSelectBannerListArgs{}
}


func (p *TContentServiceSelectBannerListArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TContentServiceSelectBannerListArgs) GetStartPage() int32 {
  return p.StartPage
}

func (p *TContentServiceSelectBannerListArgs) GetPageSize() int32 {
  return p.PageSize
}
func (p *TContentServiceSelectBannerListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectBannerListArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceSelectBannerListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TContentServiceSelectBannerListArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TContentServiceSelectBannerListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectBannerList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectBannerListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceSelectBannerListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startPage: ", p), err) }
  return err
}

func (p *TContentServiceSelectBannerListArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pageSize: ", p), err) }
  return err
}

func (p *TContentServiceSelectBannerListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectBannerListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceSelectBannerListResult struct {
  Success []*TBanner `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceSelectBannerListResult() *TContentServiceSelectBannerListResult {
  return &TContentServiceSelectBannerListResult{}
}

var TContentServiceSelectBannerListResult_Success_DEFAULT []*TBanner

func (p *TContentServiceSelectBannerListResult) GetSuccess() []*TBanner {
  return p.Success
}
func (p *TContentServiceSelectBannerListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceSelectBannerListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectBannerListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TBanner, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := &TBanner{}
    if err := _elem27.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.Success = append(p.Success, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TContentServiceSelectBannerListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectBannerList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectBannerListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceSelectBannerListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectBannerListResult(%+v)", *p)
}

// Attributes:
//  - TraceId
type TContentServiceSelectBannerCountArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewTContentServiceSelectBannerCountArgs() *TContentServiceSelectBannerCountArgs {
  return &TContentServiceSelectBannerCountArgs{}
}


func (p *TContentServiceSelectBannerCountArgs) GetTraceId() string {
  return p.TraceId
}
func (p *TContentServiceSelectBannerCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectBannerCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceSelectBannerCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectBannerCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectBannerCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceSelectBannerCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectBannerCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceSelectBannerCountResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceSelectBannerCountResult() *TContentServiceSelectBannerCountResult {
  return &TContentServiceSelectBannerCountResult{}
}

var TContentServiceSelectBannerCountResult_Success_DEFAULT int32
func (p *TContentServiceSelectBannerCountResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TContentServiceSelectBannerCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContentServiceSelectBannerCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceSelectBannerCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceSelectBannerCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContentServiceSelectBannerCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectBannerCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceSelectBannerCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceSelectBannerCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceSelectBannerCountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Banner
type TContentServiceInsertBannerArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Banner *TBanner `thrift:"banner,2" db:"banner" json:"banner"`
}

func NewTContentServiceInsertBannerArgs() *TContentServiceInsertBannerArgs {
  return &TContentServiceInsertBannerArgs{}
}


func (p *TContentServiceInsertBannerArgs) GetTraceId() string {
  return p.TraceId
}
var TContentServiceInsertBannerArgs_Banner_DEFAULT *TBanner
func (p *TContentServiceInsertBannerArgs) GetBanner() *TBanner {
  if !p.IsSetBanner() {
    return TContentServiceInsertBannerArgs_Banner_DEFAULT
  }
return p.Banner
}
func (p *TContentServiceInsertBannerArgs) IsSetBanner() bool {
  return p.Banner != nil
}

func (p *TContentServiceInsertBannerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceInsertBannerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceInsertBannerArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Banner = &TBanner{}
  if err := p.Banner.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Banner), err)
  }
  return nil
}

func (p *TContentServiceInsertBannerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertBanner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceInsertBannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceInsertBannerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("banner", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:banner: ", p), err) }
  if err := p.Banner.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Banner), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:banner: ", p), err) }
  return err
}

func (p *TContentServiceInsertBannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceInsertBannerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceInsertBannerResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceInsertBannerResult() *TContentServiceInsertBannerResult {
  return &TContentServiceInsertBannerResult{}
}

var TContentServiceInsertBannerResult_Success_DEFAULT bool
func (p *TContentServiceInsertBannerResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TContentServiceInsertBannerResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContentServiceInsertBannerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceInsertBannerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceInsertBannerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContentServiceInsertBannerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertBanner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceInsertBannerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceInsertBannerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceInsertBannerResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Banner
type TContentServiceUpdateBannerArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Banner *TBanner `thrift:"banner,2" db:"banner" json:"banner"`
}

func NewTContentServiceUpdateBannerArgs() *TContentServiceUpdateBannerArgs {
  return &TContentServiceUpdateBannerArgs{}
}


func (p *TContentServiceUpdateBannerArgs) GetTraceId() string {
  return p.TraceId
}
var TContentServiceUpdateBannerArgs_Banner_DEFAULT *TBanner
func (p *TContentServiceUpdateBannerArgs) GetBanner() *TBanner {
  if !p.IsSetBanner() {
    return TContentServiceUpdateBannerArgs_Banner_DEFAULT
  }
return p.Banner
}
func (p *TContentServiceUpdateBannerArgs) IsSetBanner() bool {
  return p.Banner != nil
}

func (p *TContentServiceUpdateBannerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceUpdateBannerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceUpdateBannerArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Banner = &TBanner{}
  if err := p.Banner.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Banner), err)
  }
  return nil
}

func (p *TContentServiceUpdateBannerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateBanner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceUpdateBannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceUpdateBannerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("banner", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:banner: ", p), err) }
  if err := p.Banner.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Banner), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:banner: ", p), err) }
  return err
}

func (p *TContentServiceUpdateBannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceUpdateBannerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceUpdateBannerResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceUpdateBannerResult() *TContentServiceUpdateBannerResult {
  return &TContentServiceUpdateBannerResult{}
}

var TContentServiceUpdateBannerResult_Success_DEFAULT bool
func (p *TContentServiceUpdateBannerResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TContentServiceUpdateBannerResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContentServiceUpdateBannerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceUpdateBannerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceUpdateBannerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContentServiceUpdateBannerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateBanner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceUpdateBannerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceUpdateBannerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceUpdateBannerResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - ID
//  - Status
type TContentServiceUpdateBannerStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
  Status int32 `thrift:"status,3" db:"status" json:"status"`
}

func NewTContentServiceUpdateBannerStatusArgs() *TContentServiceUpdateBannerStatusArgs {
  return &TContentServiceUpdateBannerStatusArgs{}
}


func (p *TContentServiceUpdateBannerStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TContentServiceUpdateBannerStatusArgs) GetID() int32 {
  return p.ID
}

func (p *TContentServiceUpdateBannerStatusArgs) GetStatus() int32 {
  return p.Status
}
func (p *TContentServiceUpdateBannerStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceUpdateBannerStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TContentServiceUpdateBannerStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TContentServiceUpdateBannerStatusArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TContentServiceUpdateBannerStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateBannerStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceUpdateBannerStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TContentServiceUpdateBannerStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TContentServiceUpdateBannerStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TContentServiceUpdateBannerStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceUpdateBannerStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TContentServiceUpdateBannerStatusResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTContentServiceUpdateBannerStatusResult() *TContentServiceUpdateBannerStatusResult {
  return &TContentServiceUpdateBannerStatusResult{}
}

var TContentServiceUpdateBannerStatusResult_Success_DEFAULT bool
func (p *TContentServiceUpdateBannerStatusResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TContentServiceUpdateBannerStatusResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TContentServiceUpdateBannerStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TContentServiceUpdateBannerStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TContentServiceUpdateBannerStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TContentServiceUpdateBannerStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateBannerStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TContentServiceUpdateBannerStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TContentServiceUpdateBannerStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TContentServiceUpdateBannerStatusResult(%+v)", *p)
}


