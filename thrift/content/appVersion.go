// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package content

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Lang
//  - Source
//  - Version
//  - Status
//  - Title
//  - Content
//  - URL
//  - CreateTime
//  - UpdateTime
type TAppVersion struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Lang string `thrift:"lang,2" db:"lang" json:"lang"`
  Source string `thrift:"source,3" db:"source" json:"source"`
  Version string `thrift:"version,4" db:"version" json:"version"`
  Status string `thrift:"status,5" db:"status" json:"status"`
  Title string `thrift:"title,6" db:"title" json:"title"`
  Content string `thrift:"content,7" db:"content" json:"content"`
  URL string `thrift:"url,8" db:"url" json:"url"`
  CreateTime string `thrift:"createTime,9" db:"createTime" json:"createTime"`
  UpdateTime string `thrift:"updateTime,10" db:"updateTime" json:"updateTime"`
}

func NewTAppVersion() *TAppVersion {
  return &TAppVersion{}
}


func (p *TAppVersion) GetID() int32 {
  return p.ID
}

func (p *TAppVersion) GetLang() string {
  return p.Lang
}

func (p *TAppVersion) GetSource() string {
  return p.Source
}

func (p *TAppVersion) GetVersion() string {
  return p.Version
}

func (p *TAppVersion) GetStatus() string {
  return p.Status
}

func (p *TAppVersion) GetTitle() string {
  return p.Title
}

func (p *TAppVersion) GetContent() string {
  return p.Content
}

func (p *TAppVersion) GetURL() string {
  return p.URL
}

func (p *TAppVersion) GetCreateTime() string {
  return p.CreateTime
}

func (p *TAppVersion) GetUpdateTime() string {
  return p.UpdateTime
}
func (p *TAppVersion) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersion)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TAppVersion)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *TAppVersion)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *TAppVersion)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TAppVersion)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TAppVersion)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *TAppVersion)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *TAppVersion)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *TAppVersion)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *TAppVersion)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UpdateTime = v
}
  return nil
}

func (p *TAppVersion) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAppVersion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersion) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TAppVersion) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lang: ", p), err) }
  return err
}

func (p *TAppVersion) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err) }
  if err := oprot.WriteString(string(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err) }
  return err
}

func (p *TAppVersion) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:version: ", p), err) }
  return err
}

func (p *TAppVersion) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *TAppVersion) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:title: ", p), err) }
  return err
}

func (p *TAppVersion) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:content: ", p), err) }
  return err
}

func (p *TAppVersion) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:url: ", p), err) }
  return err
}

func (p *TAppVersion) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:createTime: ", p), err) }
  if err := oprot.WriteString(string(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:createTime: ", p), err) }
  return err
}

func (p *TAppVersion) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updateTime", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updateTime: ", p), err) }
  if err := oprot.WriteString(string(p.UpdateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updateTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updateTime: ", p), err) }
  return err
}

func (p *TAppVersion) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersion(%+v)", *p)
}

type TAppVersionService interface {
  SelectLangTypes(ctx context.Context) (r []string, err error)
  SelectSourceTypes(ctx context.Context) (r []string, err error)
  SelectStatusTypes(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - AppVersion
  AddAppVersion(ctx context.Context, appVersion *TAppVersion) (r int32, err error)
  // Parameters:
  //  - AppVersion
  EditAppVersion(ctx context.Context, appVersion *TAppVersion) (r int32, err error)
  // Parameters:
  //  - Version
  //  - Status
  SelectAppVersions(ctx context.Context, version string, status string) (r []*TAppVersion, err error)
}

type TAppVersionServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTAppVersionService instead
func NewTAppVersionServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TAppVersionServiceClient {
  return &TAppVersionServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTAppVersionService instead
func NewTAppVersionServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TAppVersionServiceClient {
  return &TAppVersionServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTAppVersionServiceClient(c thrift.TClient) *TAppVersionServiceClient {
  return &TAppVersionServiceClient{
    c: c,
  }
}

func (p *TAppVersionServiceClient) SelectLangTypes(ctx context.Context) (r []string, err error) {
  var _args0 TAppVersionServiceSelectLangTypesArgs
  var _result1 TAppVersionServiceSelectLangTypesResult
  if err = p.c.Call(ctx, "selectLangTypes", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

func (p *TAppVersionServiceClient) SelectSourceTypes(ctx context.Context) (r []string, err error) {
  var _args2 TAppVersionServiceSelectSourceTypesArgs
  var _result3 TAppVersionServiceSelectSourceTypesResult
  if err = p.c.Call(ctx, "selectSourceTypes", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

func (p *TAppVersionServiceClient) SelectStatusTypes(ctx context.Context) (r []string, err error) {
  var _args4 TAppVersionServiceSelectStatusTypesArgs
  var _result5 TAppVersionServiceSelectStatusTypesResult
  if err = p.c.Call(ctx, "selectStatusTypes", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - AppVersion
func (p *TAppVersionServiceClient) AddAppVersion(ctx context.Context, appVersion *TAppVersion) (r int32, err error) {
  var _args6 TAppVersionServiceAddAppVersionArgs
  _args6.AppVersion = appVersion
  var _result7 TAppVersionServiceAddAppVersionResult
  if err = p.c.Call(ctx, "addAppVersion", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - AppVersion
func (p *TAppVersionServiceClient) EditAppVersion(ctx context.Context, appVersion *TAppVersion) (r int32, err error) {
  var _args8 TAppVersionServiceEditAppVersionArgs
  _args8.AppVersion = appVersion
  var _result9 TAppVersionServiceEditAppVersionResult
  if err = p.c.Call(ctx, "editAppVersion", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Version
//  - Status
func (p *TAppVersionServiceClient) SelectAppVersions(ctx context.Context, version string, status string) (r []*TAppVersion, err error) {
  var _args10 TAppVersionServiceSelectAppVersionsArgs
  _args10.Version = version
  _args10.Status = status
  var _result11 TAppVersionServiceSelectAppVersionsResult
  if err = p.c.Call(ctx, "selectAppVersions", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type TAppVersionServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TAppVersionService
}

func (p *TAppVersionServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TAppVersionServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TAppVersionServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTAppVersionServiceProcessor(handler TAppVersionService) *TAppVersionServiceProcessor {

  self12 := &TAppVersionServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["selectLangTypes"] = &tAppVersionServiceProcessorSelectLangTypes{handler:handler}
  self12.processorMap["selectSourceTypes"] = &tAppVersionServiceProcessorSelectSourceTypes{handler:handler}
  self12.processorMap["selectStatusTypes"] = &tAppVersionServiceProcessorSelectStatusTypes{handler:handler}
  self12.processorMap["addAppVersion"] = &tAppVersionServiceProcessorAddAppVersion{handler:handler}
  self12.processorMap["editAppVersion"] = &tAppVersionServiceProcessorEditAppVersion{handler:handler}
  self12.processorMap["selectAppVersions"] = &tAppVersionServiceProcessorSelectAppVersions{handler:handler}
return self12
}

func (p *TAppVersionServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type tAppVersionServiceProcessorSelectLangTypes struct {
  handler TAppVersionService
}

func (p *tAppVersionServiceProcessorSelectLangTypes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAppVersionServiceSelectLangTypesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectLangTypes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAppVersionServiceSelectLangTypesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.SelectLangTypes(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectLangTypes: " + err2.Error())
    oprot.WriteMessageBegin("selectLangTypes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectLangTypes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAppVersionServiceProcessorSelectSourceTypes struct {
  handler TAppVersionService
}

func (p *tAppVersionServiceProcessorSelectSourceTypes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAppVersionServiceSelectSourceTypesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSourceTypes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAppVersionServiceSelectSourceTypesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.SelectSourceTypes(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSourceTypes: " + err2.Error())
    oprot.WriteMessageBegin("selectSourceTypes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSourceTypes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAppVersionServiceProcessorSelectStatusTypes struct {
  handler TAppVersionService
}

func (p *tAppVersionServiceProcessorSelectStatusTypes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAppVersionServiceSelectStatusTypesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectStatusTypes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAppVersionServiceSelectStatusTypesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.SelectStatusTypes(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectStatusTypes: " + err2.Error())
    oprot.WriteMessageBegin("selectStatusTypes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectStatusTypes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAppVersionServiceProcessorAddAppVersion struct {
  handler TAppVersionService
}

func (p *tAppVersionServiceProcessorAddAppVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAppVersionServiceAddAppVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addAppVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAppVersionServiceAddAppVersionResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.AddAppVersion(ctx, args.AppVersion); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addAppVersion: " + err2.Error())
    oprot.WriteMessageBegin("addAppVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("addAppVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAppVersionServiceProcessorEditAppVersion struct {
  handler TAppVersionService
}

func (p *tAppVersionServiceProcessorEditAppVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAppVersionServiceEditAppVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("editAppVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAppVersionServiceEditAppVersionResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.EditAppVersion(ctx, args.AppVersion); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing editAppVersion: " + err2.Error())
    oprot.WriteMessageBegin("editAppVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("editAppVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAppVersionServiceProcessorSelectAppVersions struct {
  handler TAppVersionService
}

func (p *tAppVersionServiceProcessorSelectAppVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAppVersionServiceSelectAppVersionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectAppVersions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAppVersionServiceSelectAppVersionsResult{}
var retval []*TAppVersion
  var err2 error
  if retval, err2 = p.handler.SelectAppVersions(ctx, args.Version, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectAppVersions: " + err2.Error())
    oprot.WriteMessageBegin("selectAppVersions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectAppVersions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type TAppVersionServiceSelectLangTypesArgs struct {
}

func NewTAppVersionServiceSelectLangTypesArgs() *TAppVersionServiceSelectLangTypesArgs {
  return &TAppVersionServiceSelectLangTypesArgs{}
}

func (p *TAppVersionServiceSelectLangTypesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceSelectLangTypesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectLangTypes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceSelectLangTypesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceSelectLangTypesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAppVersionServiceSelectLangTypesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAppVersionServiceSelectLangTypesResult() *TAppVersionServiceSelectLangTypesResult {
  return &TAppVersionServiceSelectLangTypesResult{}
}

var TAppVersionServiceSelectLangTypesResult_Success_DEFAULT []string

func (p *TAppVersionServiceSelectLangTypesResult) GetSuccess() []string {
  return p.Success
}
func (p *TAppVersionServiceSelectLangTypesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAppVersionServiceSelectLangTypesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceSelectLangTypesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAppVersionServiceSelectLangTypesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectLangTypes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceSelectLangTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAppVersionServiceSelectLangTypesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceSelectLangTypesResult(%+v)", *p)
}

type TAppVersionServiceSelectSourceTypesArgs struct {
}

func NewTAppVersionServiceSelectSourceTypesArgs() *TAppVersionServiceSelectSourceTypesArgs {
  return &TAppVersionServiceSelectSourceTypesArgs{}
}

func (p *TAppVersionServiceSelectSourceTypesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceSelectSourceTypesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSourceTypes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceSelectSourceTypesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceSelectSourceTypesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAppVersionServiceSelectSourceTypesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAppVersionServiceSelectSourceTypesResult() *TAppVersionServiceSelectSourceTypesResult {
  return &TAppVersionServiceSelectSourceTypesResult{}
}

var TAppVersionServiceSelectSourceTypesResult_Success_DEFAULT []string

func (p *TAppVersionServiceSelectSourceTypesResult) GetSuccess() []string {
  return p.Success
}
func (p *TAppVersionServiceSelectSourceTypesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAppVersionServiceSelectSourceTypesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceSelectSourceTypesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.Success = append(p.Success, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAppVersionServiceSelectSourceTypesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSourceTypes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceSelectSourceTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAppVersionServiceSelectSourceTypesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceSelectSourceTypesResult(%+v)", *p)
}

type TAppVersionServiceSelectStatusTypesArgs struct {
}

func NewTAppVersionServiceSelectStatusTypesArgs() *TAppVersionServiceSelectStatusTypesArgs {
  return &TAppVersionServiceSelectStatusTypesArgs{}
}

func (p *TAppVersionServiceSelectStatusTypesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceSelectStatusTypesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectStatusTypes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceSelectStatusTypesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceSelectStatusTypesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAppVersionServiceSelectStatusTypesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAppVersionServiceSelectStatusTypesResult() *TAppVersionServiceSelectStatusTypesResult {
  return &TAppVersionServiceSelectStatusTypesResult{}
}

var TAppVersionServiceSelectStatusTypesResult_Success_DEFAULT []string

func (p *TAppVersionServiceSelectStatusTypesResult) GetSuccess() []string {
  return p.Success
}
func (p *TAppVersionServiceSelectStatusTypesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAppVersionServiceSelectStatusTypesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceSelectStatusTypesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.Success = append(p.Success, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAppVersionServiceSelectStatusTypesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectStatusTypes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceSelectStatusTypesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAppVersionServiceSelectStatusTypesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceSelectStatusTypesResult(%+v)", *p)
}

// Attributes:
//  - AppVersion
type TAppVersionServiceAddAppVersionArgs struct {
  AppVersion *TAppVersion `thrift:"appVersion,1" db:"appVersion" json:"appVersion"`
}

func NewTAppVersionServiceAddAppVersionArgs() *TAppVersionServiceAddAppVersionArgs {
  return &TAppVersionServiceAddAppVersionArgs{}
}

var TAppVersionServiceAddAppVersionArgs_AppVersion_DEFAULT *TAppVersion
func (p *TAppVersionServiceAddAppVersionArgs) GetAppVersion() *TAppVersion {
  if !p.IsSetAppVersion() {
    return TAppVersionServiceAddAppVersionArgs_AppVersion_DEFAULT
  }
return p.AppVersion
}
func (p *TAppVersionServiceAddAppVersionArgs) IsSetAppVersion() bool {
  return p.AppVersion != nil
}

func (p *TAppVersionServiceAddAppVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceAddAppVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AppVersion = &TAppVersion{}
  if err := p.AppVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AppVersion), err)
  }
  return nil
}

func (p *TAppVersionServiceAddAppVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addAppVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceAddAppVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appVersion", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appVersion: ", p), err) }
  if err := p.AppVersion.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AppVersion), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appVersion: ", p), err) }
  return err
}

func (p *TAppVersionServiceAddAppVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceAddAppVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAppVersionServiceAddAppVersionResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAppVersionServiceAddAppVersionResult() *TAppVersionServiceAddAppVersionResult {
  return &TAppVersionServiceAddAppVersionResult{}
}

var TAppVersionServiceAddAppVersionResult_Success_DEFAULT int32
func (p *TAppVersionServiceAddAppVersionResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TAppVersionServiceAddAppVersionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAppVersionServiceAddAppVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAppVersionServiceAddAppVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceAddAppVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAppVersionServiceAddAppVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addAppVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceAddAppVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAppVersionServiceAddAppVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceAddAppVersionResult(%+v)", *p)
}

// Attributes:
//  - AppVersion
type TAppVersionServiceEditAppVersionArgs struct {
  AppVersion *TAppVersion `thrift:"appVersion,1" db:"appVersion" json:"appVersion"`
}

func NewTAppVersionServiceEditAppVersionArgs() *TAppVersionServiceEditAppVersionArgs {
  return &TAppVersionServiceEditAppVersionArgs{}
}

var TAppVersionServiceEditAppVersionArgs_AppVersion_DEFAULT *TAppVersion
func (p *TAppVersionServiceEditAppVersionArgs) GetAppVersion() *TAppVersion {
  if !p.IsSetAppVersion() {
    return TAppVersionServiceEditAppVersionArgs_AppVersion_DEFAULT
  }
return p.AppVersion
}
func (p *TAppVersionServiceEditAppVersionArgs) IsSetAppVersion() bool {
  return p.AppVersion != nil
}

func (p *TAppVersionServiceEditAppVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceEditAppVersionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.AppVersion = &TAppVersion{}
  if err := p.AppVersion.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AppVersion), err)
  }
  return nil
}

func (p *TAppVersionServiceEditAppVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("editAppVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceEditAppVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appVersion", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appVersion: ", p), err) }
  if err := p.AppVersion.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AppVersion), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appVersion: ", p), err) }
  return err
}

func (p *TAppVersionServiceEditAppVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceEditAppVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAppVersionServiceEditAppVersionResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAppVersionServiceEditAppVersionResult() *TAppVersionServiceEditAppVersionResult {
  return &TAppVersionServiceEditAppVersionResult{}
}

var TAppVersionServiceEditAppVersionResult_Success_DEFAULT int32
func (p *TAppVersionServiceEditAppVersionResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TAppVersionServiceEditAppVersionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAppVersionServiceEditAppVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAppVersionServiceEditAppVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceEditAppVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAppVersionServiceEditAppVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("editAppVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceEditAppVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAppVersionServiceEditAppVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceEditAppVersionResult(%+v)", *p)
}

// Attributes:
//  - Version
//  - Status
type TAppVersionServiceSelectAppVersionsArgs struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  Status string `thrift:"status,2" db:"status" json:"status"`
}

func NewTAppVersionServiceSelectAppVersionsArgs() *TAppVersionServiceSelectAppVersionsArgs {
  return &TAppVersionServiceSelectAppVersionsArgs{}
}


func (p *TAppVersionServiceSelectAppVersionsArgs) GetVersion() string {
  return p.Version
}

func (p *TAppVersionServiceSelectAppVersionsArgs) GetStatus() string {
  return p.Status
}
func (p *TAppVersionServiceSelectAppVersionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceSelectAppVersionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TAppVersionServiceSelectAppVersionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TAppVersionServiceSelectAppVersionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectAppVersions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceSelectAppVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *TAppVersionServiceSelectAppVersionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *TAppVersionServiceSelectAppVersionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceSelectAppVersionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAppVersionServiceSelectAppVersionsResult struct {
  Success []*TAppVersion `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAppVersionServiceSelectAppVersionsResult() *TAppVersionServiceSelectAppVersionsResult {
  return &TAppVersionServiceSelectAppVersionsResult{}
}

var TAppVersionServiceSelectAppVersionsResult_Success_DEFAULT []*TAppVersion

func (p *TAppVersionServiceSelectAppVersionsResult) GetSuccess() []*TAppVersion {
  return p.Success
}
func (p *TAppVersionServiceSelectAppVersionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAppVersionServiceSelectAppVersionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAppVersionServiceSelectAppVersionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAppVersion, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &TAppVersion{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Success = append(p.Success, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAppVersionServiceSelectAppVersionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectAppVersions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppVersionServiceSelectAppVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAppVersionServiceSelectAppVersionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppVersionServiceSelectAppVersionsResult(%+v)", *p)
}


