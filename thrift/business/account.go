// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package business

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Mobile
//  - Email
//  - Password
//  - Enabled
//  - Language
//  - ErrorCount
//  - ErrorStartAt
type TUser struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Mobile string `thrift:"mobile,2" db:"mobile" json:"mobile"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Password string `thrift:"password,4" db:"password" json:"password"`
  Enabled bool `thrift:"enabled,5" db:"enabled" json:"enabled"`
  Language string `thrift:"language,6" db:"language" json:"language"`
  ErrorCount int32 `thrift:"error_count,7" db:"error_count" json:"error_count"`
  ErrorStartAt string `thrift:"error_start_at,8" db:"error_start_at" json:"error_start_at"`
}

func NewTUser() *TUser {
  return &TUser{}
}


func (p *TUser) GetID() int32 {
  return p.ID
}

func (p *TUser) GetMobile() string {
  return p.Mobile
}

func (p *TUser) GetEmail() string {
  return p.Email
}

func (p *TUser) GetPassword() string {
  return p.Password
}

func (p *TUser) GetEnabled() bool {
  return p.Enabled
}

func (p *TUser) GetLanguage() string {
  return p.Language
}

func (p *TUser) GetErrorCount() int32 {
  return p.ErrorCount
}

func (p *TUser) GetErrorStartAt() string {
  return p.ErrorStartAt
}
func (p *TUser) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUser)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUser)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUser)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUser)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TUser)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Enabled = v
}
  return nil
}

func (p *TUser)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *TUser)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ErrorCount = v
}
  return nil
}

func (p *TUser)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ErrorStartAt = v
}
  return nil
}

func (p *TUser) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUser) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUser) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mobile: ", p), err) }
  return err
}

func (p *TUser) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUser) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err) }
  return err
}

func (p *TUser) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:enabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enabled (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:enabled: ", p), err) }
  return err
}

func (p *TUser) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("language", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:language: ", p), err) }
  if err := oprot.WriteString(string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:language: ", p), err) }
  return err
}

func (p *TUser) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_count", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:error_count: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_count (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:error_count: ", p), err) }
  return err
}

func (p *TUser) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_start_at", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:error_start_at: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorStartAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_start_at (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:error_start_at: ", p), err) }
  return err
}

func (p *TUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUser(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Secret
//  - Enable
//  - LoginVerified
//  - WithdrawVerified
type TGoogleAuth struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Secret string `thrift:"secret,2" db:"secret" json:"secret"`
  Enable bool `thrift:"enable,3" db:"enable" json:"enable"`
  LoginVerified bool `thrift:"loginVerified,4" db:"loginVerified" json:"loginVerified"`
  WithdrawVerified bool `thrift:"withdrawVerified,5" db:"withdrawVerified" json:"withdrawVerified"`
}

func NewTGoogleAuth() *TGoogleAuth {
  return &TGoogleAuth{}
}


func (p *TGoogleAuth) GetUserId() int32 {
  return p.UserId
}

func (p *TGoogleAuth) GetSecret() string {
  return p.Secret
}

func (p *TGoogleAuth) GetEnable() bool {
  return p.Enable
}

func (p *TGoogleAuth) GetLoginVerified() bool {
  return p.LoginVerified
}

func (p *TGoogleAuth) GetWithdrawVerified() bool {
  return p.WithdrawVerified
}
func (p *TGoogleAuth) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuth)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TGoogleAuth)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *TGoogleAuth)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Enable = v
}
  return nil
}

func (p *TGoogleAuth)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LoginVerified = v
}
  return nil
}

func (p *TGoogleAuth)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WithdrawVerified = v
}
  return nil
}

func (p *TGoogleAuth) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGoogleAuth"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuth) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TGoogleAuth) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secret", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:secret: ", p), err) }
  if err := oprot.WriteString(string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:secret: ", p), err) }
  return err
}

func (p *TGoogleAuth) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enable", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:enable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Enable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enable (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:enable: ", p), err) }
  return err
}

func (p *TGoogleAuth) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginVerified", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:loginVerified: ", p), err) }
  if err := oprot.WriteBool(bool(p.LoginVerified)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginVerified (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:loginVerified: ", p), err) }
  return err
}

func (p *TGoogleAuth) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawVerified", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withdrawVerified: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithdrawVerified)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawVerified (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withdrawVerified: ", p), err) }
  return err
}

func (p *TGoogleAuth) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuth(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Password
//  - Enabled
//  - TradeVerified
//  - WithdrawVerified
type TTradePasswordAuth struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Password string `thrift:"password,2" db:"password" json:"password"`
  Enabled bool `thrift:"enabled,3" db:"enabled" json:"enabled"`
  TradeVerified bool `thrift:"tradeVerified,4" db:"tradeVerified" json:"tradeVerified"`
  WithdrawVerified bool `thrift:"withdrawVerified,5" db:"withdrawVerified" json:"withdrawVerified"`
}

func NewTTradePasswordAuth() *TTradePasswordAuth {
  return &TTradePasswordAuth{}
}


func (p *TTradePasswordAuth) GetUserId() int32 {
  return p.UserId
}

func (p *TTradePasswordAuth) GetPassword() string {
  return p.Password
}

func (p *TTradePasswordAuth) GetEnabled() bool {
  return p.Enabled
}

func (p *TTradePasswordAuth) GetTradeVerified() bool {
  return p.TradeVerified
}

func (p *TTradePasswordAuth) GetWithdrawVerified() bool {
  return p.WithdrawVerified
}
func (p *TTradePasswordAuth) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordAuth)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TTradePasswordAuth)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TTradePasswordAuth)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Enabled = v
}
  return nil
}

func (p *TTradePasswordAuth)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TradeVerified = v
}
  return nil
}

func (p *TTradePasswordAuth)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WithdrawVerified = v
}
  return nil
}

func (p *TTradePasswordAuth) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTradePasswordAuth"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordAuth) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TTradePasswordAuth) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *TTradePasswordAuth) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:enabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enabled (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:enabled: ", p), err) }
  return err
}

func (p *TTradePasswordAuth) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeVerified", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tradeVerified: ", p), err) }
  if err := oprot.WriteBool(bool(p.TradeVerified)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeVerified (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tradeVerified: ", p), err) }
  return err
}

func (p *TTradePasswordAuth) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawVerified", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withdrawVerified: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithdrawVerified)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawVerified (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withdrawVerified: ", p), err) }
  return err
}

func (p *TTradePasswordAuth) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordAuth(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Account
//  - Password
//  - Type
type TEngine struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Account string `thrift:"account,2" db:"account" json:"account"`
  Password string `thrift:"password,3" db:"password" json:"password"`
  Type int32 `thrift:"type,4" db:"type" json:"type"`
}

func NewTEngine() *TEngine {
  return &TEngine{}
}


func (p *TEngine) GetUserId() int32 {
  return p.UserId
}

func (p *TEngine) GetAccount() string {
  return p.Account
}

func (p *TEngine) GetPassword() string {
  return p.Password
}

func (p *TEngine) GetType() int32 {
  return p.Type
}
func (p *TEngine) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEngine)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TEngine)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *TEngine)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TEngine)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TEngine) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEngine"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEngine) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TEngine) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *TEngine) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TEngine) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  return err
}

func (p *TEngine) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEngine(%+v)", *p)
}

// Attributes:
//  - UserId
//  - VerifiedType
//  - Status
//  - Gender
//  - CardId
//  - CardRealName
//  - PassportId
//  - PassportLastName
//  - PassportFirstName
//  - CardFrontFigure
//  - CardBackFigure
//  - CardHoldFigure
//  - PassportFrontFigure
//  - PassportInnerFigure
//  - PassportHoldFigure
type TKyc struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  VerifiedType int32 `thrift:"verifiedType,2" db:"verifiedType" json:"verifiedType"`
  Status int32 `thrift:"status,3" db:"status" json:"status"`
  Gender int32 `thrift:"gender,4" db:"gender" json:"gender"`
  CardId string `thrift:"cardId,5" db:"cardId" json:"cardId"`
  CardRealName string `thrift:"cardRealName,6" db:"cardRealName" json:"cardRealName"`
  PassportId string `thrift:"passportId,7" db:"passportId" json:"passportId"`
  PassportLastName string `thrift:"passportLastName,8" db:"passportLastName" json:"passportLastName"`
  PassportFirstName string `thrift:"passportFirstName,9" db:"passportFirstName" json:"passportFirstName"`
  CardFrontFigure string `thrift:"cardFrontFigure,10" db:"cardFrontFigure" json:"cardFrontFigure"`
  CardBackFigure string `thrift:"cardBackFigure,11" db:"cardBackFigure" json:"cardBackFigure"`
  CardHoldFigure string `thrift:"cardHoldFigure,12" db:"cardHoldFigure" json:"cardHoldFigure"`
  PassportFrontFigure string `thrift:"passportFrontFigure,13" db:"passportFrontFigure" json:"passportFrontFigure"`
  PassportInnerFigure string `thrift:"passportInnerFigure,14" db:"passportInnerFigure" json:"passportInnerFigure"`
  PassportHoldFigure string `thrift:"passportHoldFigure,15" db:"passportHoldFigure" json:"passportHoldFigure"`
}

func NewTKyc() *TKyc {
  return &TKyc{}
}


func (p *TKyc) GetUserId() int32 {
  return p.UserId
}

func (p *TKyc) GetVerifiedType() int32 {
  return p.VerifiedType
}

func (p *TKyc) GetStatus() int32 {
  return p.Status
}

func (p *TKyc) GetGender() int32 {
  return p.Gender
}

func (p *TKyc) GetCardId() string {
  return p.CardId
}

func (p *TKyc) GetCardRealName() string {
  return p.CardRealName
}

func (p *TKyc) GetPassportId() string {
  return p.PassportId
}

func (p *TKyc) GetPassportLastName() string {
  return p.PassportLastName
}

func (p *TKyc) GetPassportFirstName() string {
  return p.PassportFirstName
}

func (p *TKyc) GetCardFrontFigure() string {
  return p.CardFrontFigure
}

func (p *TKyc) GetCardBackFigure() string {
  return p.CardBackFigure
}

func (p *TKyc) GetCardHoldFigure() string {
  return p.CardHoldFigure
}

func (p *TKyc) GetPassportFrontFigure() string {
  return p.PassportFrontFigure
}

func (p *TKyc) GetPassportInnerFigure() string {
  return p.PassportInnerFigure
}

func (p *TKyc) GetPassportHoldFigure() string {
  return p.PassportHoldFigure
}
func (p *TKyc) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKyc)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TKyc)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VerifiedType = v
}
  return nil
}

func (p *TKyc)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TKyc)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Gender = v
}
  return nil
}

func (p *TKyc)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CardId = v
}
  return nil
}

func (p *TKyc)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CardRealName = v
}
  return nil
}

func (p *TKyc)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PassportId = v
}
  return nil
}

func (p *TKyc)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PassportLastName = v
}
  return nil
}

func (p *TKyc)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PassportFirstName = v
}
  return nil
}

func (p *TKyc)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CardFrontFigure = v
}
  return nil
}

func (p *TKyc)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CardBackFigure = v
}
  return nil
}

func (p *TKyc)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.CardHoldFigure = v
}
  return nil
}

func (p *TKyc)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PassportFrontFigure = v
}
  return nil
}

func (p *TKyc)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.PassportInnerFigure = v
}
  return nil
}

func (p *TKyc)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PassportHoldFigure = v
}
  return nil
}

func (p *TKyc) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TKyc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKyc) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TKyc) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifiedType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifiedType: ", p), err) }
  if err := oprot.WriteI32(int32(p.VerifiedType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifiedType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifiedType: ", p), err) }
  return err
}

func (p *TKyc) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TKyc) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gender", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gender: ", p), err) }
  if err := oprot.WriteI32(int32(p.Gender)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gender (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gender: ", p), err) }
  return err
}

func (p *TKyc) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cardId: ", p), err) }
  if err := oprot.WriteString(string(p.CardId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cardId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cardId: ", p), err) }
  return err
}

func (p *TKyc) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardRealName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cardRealName: ", p), err) }
  if err := oprot.WriteString(string(p.CardRealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cardRealName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cardRealName: ", p), err) }
  return err
}

func (p *TKyc) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportId", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:passportId: ", p), err) }
  if err := oprot.WriteString(string(p.PassportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:passportId: ", p), err) }
  return err
}

func (p *TKyc) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportLastName", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:passportLastName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportLastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportLastName (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:passportLastName: ", p), err) }
  return err
}

func (p *TKyc) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportFirstName", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:passportFirstName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportFirstName (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:passportFirstName: ", p), err) }
  return err
}

func (p *TKyc) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardFrontFigure", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:cardFrontFigure: ", p), err) }
  if err := oprot.WriteString(string(p.CardFrontFigure)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cardFrontFigure (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:cardFrontFigure: ", p), err) }
  return err
}

func (p *TKyc) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardBackFigure", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:cardBackFigure: ", p), err) }
  if err := oprot.WriteString(string(p.CardBackFigure)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cardBackFigure (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:cardBackFigure: ", p), err) }
  return err
}

func (p *TKyc) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cardHoldFigure", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:cardHoldFigure: ", p), err) }
  if err := oprot.WriteString(string(p.CardHoldFigure)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cardHoldFigure (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:cardHoldFigure: ", p), err) }
  return err
}

func (p *TKyc) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportFrontFigure", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:passportFrontFigure: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFrontFigure)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportFrontFigure (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:passportFrontFigure: ", p), err) }
  return err
}

func (p *TKyc) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportInnerFigure", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:passportInnerFigure: ", p), err) }
  if err := oprot.WriteString(string(p.PassportInnerFigure)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportInnerFigure (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:passportInnerFigure: ", p), err) }
  return err
}

func (p *TKyc) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportHoldFigure", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:passportHoldFigure: ", p), err) }
  if err := oprot.WriteString(string(p.PassportHoldFigure)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportHoldFigure (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:passportHoldFigure: ", p), err) }
  return err
}

func (p *TKyc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKyc(%+v)", *p)
}

// Attributes:
//  - Mobile
//  - Email
//  - Enabled
//  - GoogleAuthEnabled
//  - LoginVerifiedByGoogleAuth
//  - WithdrawVerifiedByGoogleAuth
//  - TradePasswordEnabled
//  - TradeVerifiedByTradePassword
//  - WithdrawVerifiedByTradePassword
//  - EngineAccount
//  - EnginePassword
//  - EngineType
//  - KycStatus
type TAccount struct {
  Mobile string `thrift:"mobile,1" db:"mobile" json:"mobile"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  Enabled bool `thrift:"enabled,3" db:"enabled" json:"enabled"`
  GoogleAuthEnabled bool `thrift:"googleAuthEnabled,4" db:"googleAuthEnabled" json:"googleAuthEnabled"`
  LoginVerifiedByGoogleAuth bool `thrift:"loginVerifiedByGoogleAuth,5" db:"loginVerifiedByGoogleAuth" json:"loginVerifiedByGoogleAuth"`
  WithdrawVerifiedByGoogleAuth bool `thrift:"withdrawVerifiedByGoogleAuth,6" db:"withdrawVerifiedByGoogleAuth" json:"withdrawVerifiedByGoogleAuth"`
  TradePasswordEnabled bool `thrift:"tradePasswordEnabled,7" db:"tradePasswordEnabled" json:"tradePasswordEnabled"`
  TradeVerifiedByTradePassword bool `thrift:"tradeVerifiedByTradePassword,8" db:"tradeVerifiedByTradePassword" json:"tradeVerifiedByTradePassword"`
  WithdrawVerifiedByTradePassword bool `thrift:"withdrawVerifiedByTradePassword,9" db:"withdrawVerifiedByTradePassword" json:"withdrawVerifiedByTradePassword"`
  EngineAccount string `thrift:"engineAccount,10" db:"engineAccount" json:"engineAccount"`
  EnginePassword string `thrift:"enginePassword,11" db:"enginePassword" json:"enginePassword"`
  EngineType int32 `thrift:"engineType,12" db:"engineType" json:"engineType"`
  KycStatus int32 `thrift:"kycStatus,13" db:"kycStatus" json:"kycStatus"`
}

func NewTAccount() *TAccount {
  return &TAccount{}
}


func (p *TAccount) GetMobile() string {
  return p.Mobile
}

func (p *TAccount) GetEmail() string {
  return p.Email
}

func (p *TAccount) GetEnabled() bool {
  return p.Enabled
}

func (p *TAccount) GetGoogleAuthEnabled() bool {
  return p.GoogleAuthEnabled
}

func (p *TAccount) GetLoginVerifiedByGoogleAuth() bool {
  return p.LoginVerifiedByGoogleAuth
}

func (p *TAccount) GetWithdrawVerifiedByGoogleAuth() bool {
  return p.WithdrawVerifiedByGoogleAuth
}

func (p *TAccount) GetTradePasswordEnabled() bool {
  return p.TradePasswordEnabled
}

func (p *TAccount) GetTradeVerifiedByTradePassword() bool {
  return p.TradeVerifiedByTradePassword
}

func (p *TAccount) GetWithdrawVerifiedByTradePassword() bool {
  return p.WithdrawVerifiedByTradePassword
}

func (p *TAccount) GetEngineAccount() string {
  return p.EngineAccount
}

func (p *TAccount) GetEnginePassword() string {
  return p.EnginePassword
}

func (p *TAccount) GetEngineType() int32 {
  return p.EngineType
}

func (p *TAccount) GetKycStatus() int32 {
  return p.KycStatus
}
func (p *TAccount) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccount)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TAccount)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TAccount)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Enabled = v
}
  return nil
}

func (p *TAccount)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GoogleAuthEnabled = v
}
  return nil
}

func (p *TAccount)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LoginVerifiedByGoogleAuth = v
}
  return nil
}

func (p *TAccount)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.WithdrawVerifiedByGoogleAuth = v
}
  return nil
}

func (p *TAccount)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TradePasswordEnabled = v
}
  return nil
}

func (p *TAccount)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TradeVerifiedByTradePassword = v
}
  return nil
}

func (p *TAccount)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.WithdrawVerifiedByTradePassword = v
}
  return nil
}

func (p *TAccount)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EngineAccount = v
}
  return nil
}

func (p *TAccount)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.EnginePassword = v
}
  return nil
}

func (p *TAccount)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.EngineType = v
}
  return nil
}

func (p *TAccount)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.KycStatus = v
}
  return nil
}

func (p *TAccount) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAccount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccount) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mobile: ", p), err) }
  return err
}

func (p *TAccount) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *TAccount) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enabled", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:enabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.Enabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enabled (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:enabled: ", p), err) }
  return err
}

func (p *TAccount) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleAuthEnabled", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:googleAuthEnabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.GoogleAuthEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.googleAuthEnabled (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:googleAuthEnabled: ", p), err) }
  return err
}

func (p *TAccount) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginVerifiedByGoogleAuth", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:loginVerifiedByGoogleAuth: ", p), err) }
  if err := oprot.WriteBool(bool(p.LoginVerifiedByGoogleAuth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginVerifiedByGoogleAuth (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:loginVerifiedByGoogleAuth: ", p), err) }
  return err
}

func (p *TAccount) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawVerifiedByGoogleAuth", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:withdrawVerifiedByGoogleAuth: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithdrawVerifiedByGoogleAuth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawVerifiedByGoogleAuth (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:withdrawVerifiedByGoogleAuth: ", p), err) }
  return err
}

func (p *TAccount) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePasswordEnabled", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tradePasswordEnabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.TradePasswordEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradePasswordEnabled (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tradePasswordEnabled: ", p), err) }
  return err
}

func (p *TAccount) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeVerifiedByTradePassword", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:tradeVerifiedByTradePassword: ", p), err) }
  if err := oprot.WriteBool(bool(p.TradeVerifiedByTradePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeVerifiedByTradePassword (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:tradeVerifiedByTradePassword: ", p), err) }
  return err
}

func (p *TAccount) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawVerifiedByTradePassword", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:withdrawVerifiedByTradePassword: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithdrawVerifiedByTradePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawVerifiedByTradePassword (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:withdrawVerifiedByTradePassword: ", p), err) }
  return err
}

func (p *TAccount) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("engineAccount", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:engineAccount: ", p), err) }
  if err := oprot.WriteString(string(p.EngineAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.engineAccount (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:engineAccount: ", p), err) }
  return err
}

func (p *TAccount) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enginePassword", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:enginePassword: ", p), err) }
  if err := oprot.WriteString(string(p.EnginePassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enginePassword (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:enginePassword: ", p), err) }
  return err
}

func (p *TAccount) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("engineType", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:engineType: ", p), err) }
  if err := oprot.WriteI32(int32(p.EngineType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.engineType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:engineType: ", p), err) }
  return err
}

func (p *TAccount) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycStatus", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:kycStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.KycStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycStatus (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:kycStatus: ", p), err) }
  return err
}

func (p *TAccount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccount(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - Type
//  - Currency
//  - Amount
//  - Status
//  - SourceAddress
//  - Address
//  - TxID
//  - Confirmations
//  - OutputIndex
//  - Fee
//  - NetworkFee
//  - DestinationTag
//  - Mark
//  - CreatedAt
//  - UpdatedAt
//  - TypeName
//  - Detail
type TDepositWithdraw struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Type string `thrift:"type,3" db:"type" json:"type"`
  Currency string `thrift:"currency,4" db:"currency" json:"currency"`
  Amount string `thrift:"amount,5" db:"amount" json:"amount"`
  Status string `thrift:"status,6" db:"status" json:"status"`
  SourceAddress string `thrift:"source_address,7" db:"source_address" json:"source_address"`
  Address string `thrift:"address,8" db:"address" json:"address"`
  TxID string `thrift:"tx_id,9" db:"tx_id" json:"tx_id"`
  Confirmations int32 `thrift:"confirmations,10" db:"confirmations" json:"confirmations"`
  OutputIndex int32 `thrift:"output_index,11" db:"output_index" json:"output_index"`
  Fee string `thrift:"fee,12" db:"fee" json:"fee"`
  NetworkFee string `thrift:"network_fee,13" db:"network_fee" json:"network_fee"`
  DestinationTag int32 `thrift:"destination_tag,14" db:"destination_tag" json:"destination_tag"`
  Mark string `thrift:"mark,15" db:"mark" json:"mark"`
  CreatedAt string `thrift:"created_at,16" db:"created_at" json:"created_at"`
  UpdatedAt string `thrift:"updated_at,17" db:"updated_at" json:"updated_at"`
  TypeName string `thrift:"type_name,18" db:"type_name" json:"type_name"`
  Detail int32 `thrift:"detail,19" db:"detail" json:"detail"`
}

func NewTDepositWithdraw() *TDepositWithdraw {
  return &TDepositWithdraw{}
}


func (p *TDepositWithdraw) GetID() int32 {
  return p.ID
}

func (p *TDepositWithdraw) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositWithdraw) GetType() string {
  return p.Type
}

func (p *TDepositWithdraw) GetCurrency() string {
  return p.Currency
}

func (p *TDepositWithdraw) GetAmount() string {
  return p.Amount
}

func (p *TDepositWithdraw) GetStatus() string {
  return p.Status
}

func (p *TDepositWithdraw) GetSourceAddress() string {
  return p.SourceAddress
}

func (p *TDepositWithdraw) GetAddress() string {
  return p.Address
}

func (p *TDepositWithdraw) GetTxID() string {
  return p.TxID
}

func (p *TDepositWithdraw) GetConfirmations() int32 {
  return p.Confirmations
}

func (p *TDepositWithdraw) GetOutputIndex() int32 {
  return p.OutputIndex
}

func (p *TDepositWithdraw) GetFee() string {
  return p.Fee
}

func (p *TDepositWithdraw) GetNetworkFee() string {
  return p.NetworkFee
}

func (p *TDepositWithdraw) GetDestinationTag() int32 {
  return p.DestinationTag
}

func (p *TDepositWithdraw) GetMark() string {
  return p.Mark
}

func (p *TDepositWithdraw) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TDepositWithdraw) GetUpdatedAt() string {
  return p.UpdatedAt
}

func (p *TDepositWithdraw) GetTypeName() string {
  return p.TypeName
}

func (p *TDepositWithdraw) GetDetail() int32 {
  return p.Detail
}
func (p *TDepositWithdraw) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositWithdraw)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SourceAddress = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.TxID = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Confirmations = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OutputIndex = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NetworkFee = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.DestinationTag = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.TypeName = v
}
  return nil
}

func (p *TDepositWithdraw)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Detail = v
}
  return nil
}

func (p *TDepositWithdraw) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDepositWithdraw"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositWithdraw) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:currency: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source_address", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:source_address: ", p), err) }
  if err := oprot.WriteString(string(p.SourceAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source_address (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:source_address: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:address: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tx_id", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:tx_id: ", p), err) }
  if err := oprot.WriteString(string(p.TxID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tx_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:tx_id: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("confirmations", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:confirmations: ", p), err) }
  if err := oprot.WriteI32(int32(p.Confirmations)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.confirmations (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:confirmations: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("output_index", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:output_index: ", p), err) }
  if err := oprot.WriteI32(int32(p.OutputIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.output_index (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:output_index: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:fee: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("network_fee", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:network_fee: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.network_fee (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:network_fee: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("destination_tag", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:destination_tag: ", p), err) }
  if err := oprot.WriteI32(int32(p.DestinationTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.destination_tag (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:destination_tag: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:mark: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:created_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:created_at: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:updated_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:updated_at: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type_name", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:type_name: ", p), err) }
  if err := oprot.WriteString(string(p.TypeName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type_name (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:type_name: ", p), err) }
  return err
}

func (p *TDepositWithdraw) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("detail", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:detail: ", p), err) }
  if err := oprot.WriteI32(int32(p.Detail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.detail (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:detail: ", p), err) }
  return err
}

func (p *TDepositWithdraw) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositWithdraw(%+v)", *p)
}

// Attributes:
//  - ID
//  - Symbol
//  - Name
//  - WithdrawFee
//  - DepositEnable
//  - WithdrawEnable
//  - TradeEnable
//  - TradeTo
//  - Status
//  - CreatedAt
//  - UpdatedAt
//  - WithdrawMaxLimit
type TCurrency struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Symbol string `thrift:"symbol,2" db:"symbol" json:"symbol"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  WithdrawFee string `thrift:"withdraw_fee,4" db:"withdraw_fee" json:"withdraw_fee"`
  DepositEnable int32 `thrift:"deposit_enable,5" db:"deposit_enable" json:"deposit_enable"`
  WithdrawEnable int32 `thrift:"withdraw_enable,6" db:"withdraw_enable" json:"withdraw_enable"`
  TradeEnable int32 `thrift:"trade_enable,7" db:"trade_enable" json:"trade_enable"`
  TradeTo string `thrift:"trade_to,8" db:"trade_to" json:"trade_to"`
  Status int32 `thrift:"status,9" db:"status" json:"status"`
  CreatedAt string `thrift:"created_at,10" db:"created_at" json:"created_at"`
  UpdatedAt string `thrift:"updated_at,11" db:"updated_at" json:"updated_at"`
  WithdrawMaxLimit string `thrift:"withdraw_max_limit,12" db:"withdraw_max_limit" json:"withdraw_max_limit"`
}

func NewTCurrency() *TCurrency {
  return &TCurrency{}
}


func (p *TCurrency) GetID() int32 {
  return p.ID
}

func (p *TCurrency) GetSymbol() string {
  return p.Symbol
}

func (p *TCurrency) GetName() string {
  return p.Name
}

func (p *TCurrency) GetWithdrawFee() string {
  return p.WithdrawFee
}

func (p *TCurrency) GetDepositEnable() int32 {
  return p.DepositEnable
}

func (p *TCurrency) GetWithdrawEnable() int32 {
  return p.WithdrawEnable
}

func (p *TCurrency) GetTradeEnable() int32 {
  return p.TradeEnable
}

func (p *TCurrency) GetTradeTo() string {
  return p.TradeTo
}

func (p *TCurrency) GetStatus() int32 {
  return p.Status
}

func (p *TCurrency) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TCurrency) GetUpdatedAt() string {
  return p.UpdatedAt
}

func (p *TCurrency) GetWithdrawMaxLimit() string {
  return p.WithdrawMaxLimit
}
func (p *TCurrency) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCurrency)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TCurrency)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TCurrency)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TCurrency)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.WithdrawFee = v
}
  return nil
}

func (p *TCurrency)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DepositEnable = v
}
  return nil
}

func (p *TCurrency)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.WithdrawEnable = v
}
  return nil
}

func (p *TCurrency)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TradeEnable = v
}
  return nil
}

func (p *TCurrency)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TradeTo = v
}
  return nil
}

func (p *TCurrency)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TCurrency)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TCurrency)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TCurrency)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.WithdrawMaxLimit = v
}
  return nil
}

func (p *TCurrency) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCurrency"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCurrency) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TCurrency) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:symbol: ", p), err) }
  return err
}

func (p *TCurrency) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *TCurrency) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdraw_fee", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:withdraw_fee: ", p), err) }
  if err := oprot.WriteString(string(p.WithdrawFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdraw_fee (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:withdraw_fee: ", p), err) }
  return err
}

func (p *TCurrency) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deposit_enable", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:deposit_enable: ", p), err) }
  if err := oprot.WriteI32(int32(p.DepositEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deposit_enable (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:deposit_enable: ", p), err) }
  return err
}

func (p *TCurrency) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdraw_enable", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:withdraw_enable: ", p), err) }
  if err := oprot.WriteI32(int32(p.WithdrawEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdraw_enable (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:withdraw_enable: ", p), err) }
  return err
}

func (p *TCurrency) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_enable", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:trade_enable: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_enable (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:trade_enable: ", p), err) }
  return err
}

func (p *TCurrency) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_to", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:trade_to: ", p), err) }
  if err := oprot.WriteString(string(p.TradeTo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_to (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:trade_to: ", p), err) }
  return err
}

func (p *TCurrency) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err) }
  return err
}

func (p *TCurrency) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:created_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:created_at: ", p), err) }
  return err
}

func (p *TCurrency) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updated_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updated_at: ", p), err) }
  return err
}

func (p *TCurrency) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdraw_max_limit", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:withdraw_max_limit: ", p), err) }
  if err := oprot.WriteString(string(p.WithdrawMaxLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdraw_max_limit (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:withdraw_max_limit: ", p), err) }
  return err
}

func (p *TCurrency) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCurrency(%+v)", *p)
}

// Attributes:
//  - UserID
//  - VerifyType
//  - Status
//  - CountryCode
//  - IDRealName
//  - IDNumber
//  - IDPicFront
//  - IDPicBack
//  - IDPicHold
//  - PassportID
//  - PassportLastName
//  - PassportFirstName
//  - PassportSex
//  - PassportPicFront
//  - PassportPicInfo
//  - PassportPicHold
//  - CreatedAt
//  - UpdatedAt
//  - ID
type TUserKyc struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  VerifyType int32 `thrift:"verify_type,2" db:"verify_type" json:"verify_type"`
  Status int32 `thrift:"status,3" db:"status" json:"status"`
  CountryCode string `thrift:"country_code,4" db:"country_code" json:"country_code"`
  IDRealName string `thrift:"id_real_name,5" db:"id_real_name" json:"id_real_name"`
  IDNumber string `thrift:"id_number,6" db:"id_number" json:"id_number"`
  IDPicFront string `thrift:"id_pic_front,7" db:"id_pic_front" json:"id_pic_front"`
  IDPicBack string `thrift:"id_pic_back,8" db:"id_pic_back" json:"id_pic_back"`
  IDPicHold string `thrift:"id_pic_hold,9" db:"id_pic_hold" json:"id_pic_hold"`
  PassportID string `thrift:"passport_id,10" db:"passport_id" json:"passport_id"`
  PassportLastName string `thrift:"passport_last_name,11" db:"passport_last_name" json:"passport_last_name"`
  PassportFirstName string `thrift:"passport_first_name,12" db:"passport_first_name" json:"passport_first_name"`
  PassportSex int32 `thrift:"passport_sex,13" db:"passport_sex" json:"passport_sex"`
  PassportPicFront string `thrift:"passport_pic_front,14" db:"passport_pic_front" json:"passport_pic_front"`
  PassportPicInfo string `thrift:"passport_pic_info,15" db:"passport_pic_info" json:"passport_pic_info"`
  PassportPicHold string `thrift:"passport_pic_hold,16" db:"passport_pic_hold" json:"passport_pic_hold"`
  // unused field # 17
  CreatedAt string `thrift:"created_at,18" db:"created_at" json:"created_at"`
  UpdatedAt string `thrift:"updated_at,19" db:"updated_at" json:"updated_at"`
  ID int32 `thrift:"id,20" db:"id" json:"id"`
}

func NewTUserKyc() *TUserKyc {
  return &TUserKyc{}
}


func (p *TUserKyc) GetUserID() int32 {
  return p.UserID
}

func (p *TUserKyc) GetVerifyType() int32 {
  return p.VerifyType
}

func (p *TUserKyc) GetStatus() int32 {
  return p.Status
}

func (p *TUserKyc) GetCountryCode() string {
  return p.CountryCode
}

func (p *TUserKyc) GetIDRealName() string {
  return p.IDRealName
}

func (p *TUserKyc) GetIDNumber() string {
  return p.IDNumber
}

func (p *TUserKyc) GetIDPicFront() string {
  return p.IDPicFront
}

func (p *TUserKyc) GetIDPicBack() string {
  return p.IDPicBack
}

func (p *TUserKyc) GetIDPicHold() string {
  return p.IDPicHold
}

func (p *TUserKyc) GetPassportID() string {
  return p.PassportID
}

func (p *TUserKyc) GetPassportLastName() string {
  return p.PassportLastName
}

func (p *TUserKyc) GetPassportFirstName() string {
  return p.PassportFirstName
}

func (p *TUserKyc) GetPassportSex() int32 {
  return p.PassportSex
}

func (p *TUserKyc) GetPassportPicFront() string {
  return p.PassportPicFront
}

func (p *TUserKyc) GetPassportPicInfo() string {
  return p.PassportPicInfo
}

func (p *TUserKyc) GetPassportPicHold() string {
  return p.PassportPicHold
}

func (p *TUserKyc) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserKyc) GetUpdatedAt() string {
  return p.UpdatedAt
}

func (p *TUserKyc) GetID() int32 {
  return p.ID
}
func (p *TUserKyc) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKyc)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TUserKyc)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VerifyType = v
}
  return nil
}

func (p *TUserKyc)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUserKyc)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *TUserKyc)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IDRealName = v
}
  return nil
}

func (p *TUserKyc)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IDNumber = v
}
  return nil
}

func (p *TUserKyc)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IDPicFront = v
}
  return nil
}

func (p *TUserKyc)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IDPicBack = v
}
  return nil
}

func (p *TUserKyc)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IDPicHold = v
}
  return nil
}

func (p *TUserKyc)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PassportID = v
}
  return nil
}

func (p *TUserKyc)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PassportLastName = v
}
  return nil
}

func (p *TUserKyc)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PassportFirstName = v
}
  return nil
}

func (p *TUserKyc)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PassportSex = v
}
  return nil
}

func (p *TUserKyc)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.PassportPicFront = v
}
  return nil
}

func (p *TUserKyc)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PassportPicInfo = v
}
  return nil
}

func (p *TUserKyc)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.PassportPicHold = v
}
  return nil
}

func (p *TUserKyc)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserKyc)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TUserKyc)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserKyc) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserKyc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKyc) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TUserKyc) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verify_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verify_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.VerifyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verify_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verify_type: ", p), err) }
  return err
}

func (p *TUserKyc) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TUserKyc) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("country_code", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:country_code: ", p), err) }
  if err := oprot.WriteString(string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country_code (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:country_code: ", p), err) }
  return err
}

func (p *TUserKyc) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id_real_name", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:id_real_name: ", p), err) }
  if err := oprot.WriteString(string(p.IDRealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id_real_name (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:id_real_name: ", p), err) }
  return err
}

func (p *TUserKyc) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id_number", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:id_number: ", p), err) }
  if err := oprot.WriteString(string(p.IDNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id_number (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:id_number: ", p), err) }
  return err
}

func (p *TUserKyc) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id_pic_front", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:id_pic_front: ", p), err) }
  if err := oprot.WriteString(string(p.IDPicFront)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id_pic_front (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:id_pic_front: ", p), err) }
  return err
}

func (p *TUserKyc) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id_pic_back", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:id_pic_back: ", p), err) }
  if err := oprot.WriteString(string(p.IDPicBack)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id_pic_back (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:id_pic_back: ", p), err) }
  return err
}

func (p *TUserKyc) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id_pic_hold", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:id_pic_hold: ", p), err) }
  if err := oprot.WriteString(string(p.IDPicHold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id_pic_hold (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:id_pic_hold: ", p), err) }
  return err
}

func (p *TUserKyc) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport_id", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:passport_id: ", p), err) }
  if err := oprot.WriteString(string(p.PassportID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport_id (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:passport_id: ", p), err) }
  return err
}

func (p *TUserKyc) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport_last_name", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:passport_last_name: ", p), err) }
  if err := oprot.WriteString(string(p.PassportLastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport_last_name (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:passport_last_name: ", p), err) }
  return err
}

func (p *TUserKyc) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport_first_name", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:passport_first_name: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport_first_name (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:passport_first_name: ", p), err) }
  return err
}

func (p *TUserKyc) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport_sex", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:passport_sex: ", p), err) }
  if err := oprot.WriteI32(int32(p.PassportSex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport_sex (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:passport_sex: ", p), err) }
  return err
}

func (p *TUserKyc) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport_pic_front", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:passport_pic_front: ", p), err) }
  if err := oprot.WriteString(string(p.PassportPicFront)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport_pic_front (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:passport_pic_front: ", p), err) }
  return err
}

func (p *TUserKyc) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport_pic_info", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:passport_pic_info: ", p), err) }
  if err := oprot.WriteString(string(p.PassportPicInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport_pic_info (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:passport_pic_info: ", p), err) }
  return err
}

func (p *TUserKyc) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passport_pic_hold", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:passport_pic_hold: ", p), err) }
  if err := oprot.WriteString(string(p.PassportPicHold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passport_pic_hold (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:passport_pic_hold: ", p), err) }
  return err
}

func (p *TUserKyc) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:created_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:created_at: ", p), err) }
  return err
}

func (p *TUserKyc) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:updated_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:updated_at: ", p), err) }
  return err
}

func (p *TUserKyc) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:id: ", p), err) }
  return err
}

func (p *TUserKyc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKyc(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Secret
//  - Status
//  - CreatedAt
//  - UpdatedAt
type TGoogleEntity struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Secret string `thrift:"secret,2" db:"secret" json:"secret"`
  Status int32 `thrift:"status,3" db:"status" json:"status"`
  CreatedAt string `thrift:"created_at,4" db:"created_at" json:"created_at"`
  UpdatedAt string `thrift:"updated_at,5" db:"updated_at" json:"updated_at"`
}

func NewTGoogleEntity() *TGoogleEntity {
  return &TGoogleEntity{}
}


func (p *TGoogleEntity) GetUserID() int32 {
  return p.UserID
}

func (p *TGoogleEntity) GetSecret() string {
  return p.Secret
}

func (p *TGoogleEntity) GetStatus() int32 {
  return p.Status
}

func (p *TGoogleEntity) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TGoogleEntity) GetUpdatedAt() string {
  return p.UpdatedAt
}
func (p *TGoogleEntity) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleEntity)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleEntity)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *TGoogleEntity)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TGoogleEntity)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TGoogleEntity)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TGoogleEntity) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGoogleEntity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleEntity) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TGoogleEntity) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secret", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:secret: ", p), err) }
  if err := oprot.WriteString(string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:secret: ", p), err) }
  return err
}

func (p *TGoogleEntity) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TGoogleEntity) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:created_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:created_at: ", p), err) }
  return err
}

func (p *TGoogleEntity) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updated_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updated_at: ", p), err) }
  return err
}

func (p *TGoogleEntity) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleEntity(%+v)", *p)
}

// Attributes:
//  - Title
//  - Content
//  - PhotoAddress
//  - LinkAddress
//  - AppID
//  - Status
//  - Type
//  - CreatedAt
//  - EndAt
//  - Language
type TBanner struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Content string `thrift:"content,2" db:"content" json:"content"`
  PhotoAddress string `thrift:"photo_address,3" db:"photo_address" json:"photo_address"`
  LinkAddress string `thrift:"link_address,4" db:"link_address" json:"link_address"`
  AppID string `thrift:"app_id,5" db:"app_id" json:"app_id"`
  Status int32 `thrift:"status,6" db:"status" json:"status"`
  Type int32 `thrift:"type,7" db:"type" json:"type"`
  CreatedAt string `thrift:"created_at,8" db:"created_at" json:"created_at"`
  EndAt string `thrift:"end_at,9" db:"end_at" json:"end_at"`
  Language string `thrift:"language,10" db:"language" json:"language"`
}

func NewTBanner() *TBanner {
  return &TBanner{}
}


func (p *TBanner) GetTitle() string {
  return p.Title
}

func (p *TBanner) GetContent() string {
  return p.Content
}

func (p *TBanner) GetPhotoAddress() string {
  return p.PhotoAddress
}

func (p *TBanner) GetLinkAddress() string {
  return p.LinkAddress
}

func (p *TBanner) GetAppID() string {
  return p.AppID
}

func (p *TBanner) GetStatus() int32 {
  return p.Status
}

func (p *TBanner) GetType() int32 {
  return p.Type
}

func (p *TBanner) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TBanner) GetEndAt() string {
  return p.EndAt
}

func (p *TBanner) GetLanguage() string {
  return p.Language
}
func (p *TBanner) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBanner)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *TBanner)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *TBanner)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PhotoAddress = v
}
  return nil
}

func (p *TBanner)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LinkAddress = v
}
  return nil
}

func (p *TBanner)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *TBanner)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TBanner)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TBanner)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TBanner)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.EndAt = v
}
  return nil
}

func (p *TBanner)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *TBanner) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TBanner"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBanner) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *TBanner) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err) }
  return err
}

func (p *TBanner) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("photo_address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:photo_address: ", p), err) }
  if err := oprot.WriteString(string(p.PhotoAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.photo_address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:photo_address: ", p), err) }
  return err
}

func (p *TBanner) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("link_address", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:link_address: ", p), err) }
  if err := oprot.WriteString(string(p.LinkAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.link_address (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:link_address: ", p), err) }
  return err
}

func (p *TBanner) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("app_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:app_id: ", p), err) }
  if err := oprot.WriteString(string(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:app_id: ", p), err) }
  return err
}

func (p *TBanner) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *TBanner) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:type: ", p), err) }
  return err
}

func (p *TBanner) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:created_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:created_at: ", p), err) }
  return err
}

func (p *TBanner) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("end_at", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:end_at: ", p), err) }
  if err := oprot.WriteString(string(p.EndAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end_at (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:end_at: ", p), err) }
  return err
}

func (p *TBanner) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("language", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:language: ", p), err) }
  if err := oprot.WriteString(string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:language: ", p), err) }
  return err
}

func (p *TBanner) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBanner(%+v)", *p)
}

// Attributes:
//  - ID
//  - Mobile
//  - Email
//  - Lang
//  - LoginPwd
//  - LoginPwdSalt
//  - TradePwd
//  - TradePwdSalt
//  - Status
//  - CreatedAt
//  - UpdatedAt
//  - ErrorCount
//  - ErrorStartAt
type TUserEntity struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Mobile string `thrift:"mobile,2" db:"mobile" json:"mobile"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Lang string `thrift:"lang,4" db:"lang" json:"lang"`
  LoginPwd string `thrift:"login_pwd,5" db:"login_pwd" json:"login_pwd"`
  LoginPwdSalt string `thrift:"login_pwd_salt,6" db:"login_pwd_salt" json:"login_pwd_salt"`
  TradePwd string `thrift:"trade_pwd,7" db:"trade_pwd" json:"trade_pwd"`
  TradePwdSalt string `thrift:"trade_pwd_salt,8" db:"trade_pwd_salt" json:"trade_pwd_salt"`
  Status int32 `thrift:"status,9" db:"status" json:"status"`
  CreatedAt string `thrift:"created_at,10" db:"created_at" json:"created_at"`
  UpdatedAt string `thrift:"updated_at,11" db:"updated_at" json:"updated_at"`
  ErrorCount int32 `thrift:"error_count,12" db:"error_count" json:"error_count"`
  ErrorStartAt string `thrift:"error_start_at,13" db:"error_start_at" json:"error_start_at"`
}

func NewTUserEntity() *TUserEntity {
  return &TUserEntity{}
}


func (p *TUserEntity) GetID() int32 {
  return p.ID
}

func (p *TUserEntity) GetMobile() string {
  return p.Mobile
}

func (p *TUserEntity) GetEmail() string {
  return p.Email
}

func (p *TUserEntity) GetLang() string {
  return p.Lang
}

func (p *TUserEntity) GetLoginPwd() string {
  return p.LoginPwd
}

func (p *TUserEntity) GetLoginPwdSalt() string {
  return p.LoginPwdSalt
}

func (p *TUserEntity) GetTradePwd() string {
  return p.TradePwd
}

func (p *TUserEntity) GetTradePwdSalt() string {
  return p.TradePwdSalt
}

func (p *TUserEntity) GetStatus() int32 {
  return p.Status
}

func (p *TUserEntity) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserEntity) GetUpdatedAt() string {
  return p.UpdatedAt
}

func (p *TUserEntity) GetErrorCount() int32 {
  return p.ErrorCount
}

func (p *TUserEntity) GetErrorStartAt() string {
  return p.ErrorStartAt
}
func (p *TUserEntity) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserEntity)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserEntity)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserEntity)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserEntity)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *TUserEntity)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LoginPwd = v
}
  return nil
}

func (p *TUserEntity)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LoginPwdSalt = v
}
  return nil
}

func (p *TUserEntity)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TradePwd = v
}
  return nil
}

func (p *TUserEntity)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TradePwdSalt = v
}
  return nil
}

func (p *TUserEntity)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUserEntity)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserEntity)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TUserEntity)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ErrorCount = v
}
  return nil
}

func (p *TUserEntity)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ErrorStartAt = v
}
  return nil
}

func (p *TUserEntity) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserEntity"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserEntity) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserEntity) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mobile: ", p), err) }
  return err
}

func (p *TUserEntity) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUserEntity) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lang: ", p), err) }
  return err
}

func (p *TUserEntity) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("login_pwd", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:login_pwd: ", p), err) }
  if err := oprot.WriteString(string(p.LoginPwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login_pwd (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:login_pwd: ", p), err) }
  return err
}

func (p *TUserEntity) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("login_pwd_salt", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:login_pwd_salt: ", p), err) }
  if err := oprot.WriteString(string(p.LoginPwdSalt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login_pwd_salt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:login_pwd_salt: ", p), err) }
  return err
}

func (p *TUserEntity) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_pwd", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:trade_pwd: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_pwd (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:trade_pwd: ", p), err) }
  return err
}

func (p *TUserEntity) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trade_pwd_salt", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:trade_pwd_salt: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwdSalt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trade_pwd_salt (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:trade_pwd_salt: ", p), err) }
  return err
}

func (p *TUserEntity) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err) }
  return err
}

func (p *TUserEntity) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:created_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:created_at: ", p), err) }
  return err
}

func (p *TUserEntity) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updated_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updated_at: ", p), err) }
  return err
}

func (p *TUserEntity) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_count", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:error_count: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_count (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:error_count: ", p), err) }
  return err
}

func (p *TUserEntity) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_start_at", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:error_start_at: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorStartAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_start_at (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:error_start_at: ", p), err) }
  return err
}

func (p *TUserEntity) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserEntity(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - Key
//  - Value
//  - CreatedAt
//  - UpdatedAt
type TUserConfig struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Key string `thrift:"key,3" db:"key" json:"key"`
  Value string `thrift:"value,4" db:"value" json:"value"`
  CreatedAt string `thrift:"created_at,5" db:"created_at" json:"created_at"`
  UpdatedAt string `thrift:"updated_at,6" db:"updated_at" json:"updated_at"`
}

func NewTUserConfig() *TUserConfig {
  return &TUserConfig{}
}


func (p *TUserConfig) GetID() int32 {
  return p.ID
}

func (p *TUserConfig) GetUserID() int32 {
  return p.UserID
}

func (p *TUserConfig) GetKey() string {
  return p.Key
}

func (p *TUserConfig) GetValue() string {
  return p.Value
}

func (p *TUserConfig) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserConfig) GetUpdatedAt() string {
  return p.UpdatedAt
}
func (p *TUserConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TUserConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TUserConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TUserConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserConfig)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TUserConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TUserConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err) }
  return err
}

func (p *TUserConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *TUserConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:created_at: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created_at (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:created_at: ", p), err) }
  return err
}

func (p *TUserConfig) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updated_at", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:updated_at: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updated_at (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:updated_at: ", p), err) }
  return err
}

func (p *TUserConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserConfig(%+v)", *p)
}

// Attributes:
//  - Amount
//  - Address
//  - Symbol
//  - UserID
//  - WithdrawToken
type TWithdrawMessage struct {
  Amount string `thrift:"amount,1" db:"amount" json:"amount"`
  Address string `thrift:"address,2" db:"address" json:"address"`
  Symbol string `thrift:"symbol,3" db:"symbol" json:"symbol"`
  UserID int32 `thrift:"user_id,4" db:"user_id" json:"user_id"`
  WithdrawToken string `thrift:"withdrawToken,5" db:"withdrawToken" json:"withdrawToken"`
}

func NewTWithdrawMessage() *TWithdrawMessage {
  return &TWithdrawMessage{}
}


func (p *TWithdrawMessage) GetAmount() string {
  return p.Amount
}

func (p *TWithdrawMessage) GetAddress() string {
  return p.Address
}

func (p *TWithdrawMessage) GetSymbol() string {
  return p.Symbol
}

func (p *TWithdrawMessage) GetUserID() int32 {
  return p.UserID
}

func (p *TWithdrawMessage) GetWithdrawToken() string {
  return p.WithdrawToken
}
func (p *TWithdrawMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TWithdrawMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TWithdrawMessage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TWithdrawMessage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TWithdrawMessage)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TWithdrawMessage)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WithdrawToken = v
}
  return nil
}

func (p *TWithdrawMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TWithdrawMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TWithdrawMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:amount: ", p), err) }
  return err
}

func (p *TWithdrawMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *TWithdrawMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:symbol: ", p), err) }
  return err
}

func (p *TWithdrawMessage) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_id: ", p), err) }
  return err
}

func (p *TWithdrawMessage) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawToken", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withdrawToken: ", p), err) }
  if err := oprot.WriteString(string(p.WithdrawToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawToken (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withdrawToken: ", p), err) }
  return err
}

func (p *TWithdrawMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TWithdrawMessage(%+v)", *p)
}

// Attributes:
//  - GoogleStatus
//  - GoogleLoginStatus
//  - GoogleWithdrawStatus
//  - TradeStatus
//  - TradeTradeStatus
//  - TradeWithdrawStatus
//  - Empty
type TUserConfigStatus struct {
  GoogleStatus int32 `thrift:"googleStatus,1" db:"googleStatus" json:"googleStatus"`
  GoogleLoginStatus int32 `thrift:"googleLoginStatus,2" db:"googleLoginStatus" json:"googleLoginStatus"`
  GoogleWithdrawStatus int32 `thrift:"googleWithdrawStatus,3" db:"googleWithdrawStatus" json:"googleWithdrawStatus"`
  TradeStatus int32 `thrift:"tradeStatus,4" db:"tradeStatus" json:"tradeStatus"`
  TradeTradeStatus int32 `thrift:"tradeTradeStatus,5" db:"tradeTradeStatus" json:"tradeTradeStatus"`
  TradeWithdrawStatus int32 `thrift:"tradeWithdrawStatus,6" db:"tradeWithdrawStatus" json:"tradeWithdrawStatus"`
  Empty bool `thrift:"empty,7" db:"empty" json:"empty,omitempty"`
}

func NewTUserConfigStatus() *TUserConfigStatus {
  return &TUserConfigStatus{}
}


func (p *TUserConfigStatus) GetGoogleStatus() int32 {
  return p.GoogleStatus
}

func (p *TUserConfigStatus) GetGoogleLoginStatus() int32 {
  return p.GoogleLoginStatus
}

func (p *TUserConfigStatus) GetGoogleWithdrawStatus() int32 {
  return p.GoogleWithdrawStatus
}

func (p *TUserConfigStatus) GetTradeStatus() int32 {
  return p.TradeStatus
}

func (p *TUserConfigStatus) GetTradeTradeStatus() int32 {
  return p.TradeTradeStatus
}

func (p *TUserConfigStatus) GetTradeWithdrawStatus() int32 {
  return p.TradeWithdrawStatus
}
var TUserConfigStatus_Empty_DEFAULT bool = false

func (p *TUserConfigStatus) GetEmpty() bool {
  return p.Empty
}
func (p *TUserConfigStatus) IsSetEmpty() bool {
  return p.Empty != TUserConfigStatus_Empty_DEFAULT
}

func (p *TUserConfigStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserConfigStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GoogleStatus = v
}
  return nil
}

func (p *TUserConfigStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GoogleLoginStatus = v
}
  return nil
}

func (p *TUserConfigStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GoogleWithdrawStatus = v
}
  return nil
}

func (p *TUserConfigStatus)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TradeStatus = v
}
  return nil
}

func (p *TUserConfigStatus)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TradeTradeStatus = v
}
  return nil
}

func (p *TUserConfigStatus)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TradeWithdrawStatus = v
}
  return nil
}

func (p *TUserConfigStatus)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TUserConfigStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserConfigStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserConfigStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleStatus", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:googleStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.GoogleStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.googleStatus (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:googleStatus: ", p), err) }
  return err
}

func (p *TUserConfigStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleLoginStatus", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:googleLoginStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.GoogleLoginStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.googleLoginStatus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:googleLoginStatus: ", p), err) }
  return err
}

func (p *TUserConfigStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleWithdrawStatus", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:googleWithdrawStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.GoogleWithdrawStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.googleWithdrawStatus (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:googleWithdrawStatus: ", p), err) }
  return err
}

func (p *TUserConfigStatus) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeStatus", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tradeStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeStatus (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tradeStatus: ", p), err) }
  return err
}

func (p *TUserConfigStatus) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeTradeStatus", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tradeTradeStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeTradeStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeTradeStatus (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tradeTradeStatus: ", p), err) }
  return err
}

func (p *TUserConfigStatus) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeWithdrawStatus", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tradeWithdrawStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.TradeWithdrawStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeWithdrawStatus (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tradeWithdrawStatus: ", p), err) }
  return err
}

func (p *TUserConfigStatus) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:empty: ", p), err) }
  }
  return err
}

func (p *TUserConfigStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserConfigStatus(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Email
//  - Mobile
//  - KycStatus
//  - TradePwd
type TAccountBaseInfo struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  Mobile string `thrift:"mobile,3" db:"mobile" json:"mobile"`
  KycStatus int32 `thrift:"kycStatus,4" db:"kycStatus" json:"kycStatus"`
  TradePwd string `thrift:"tradePwd,5" db:"tradePwd" json:"tradePwd"`
}

func NewTAccountBaseInfo() *TAccountBaseInfo {
  return &TAccountBaseInfo{}
}


func (p *TAccountBaseInfo) GetUserId() int32 {
  return p.UserId
}

func (p *TAccountBaseInfo) GetEmail() string {
  return p.Email
}

func (p *TAccountBaseInfo) GetMobile() string {
  return p.Mobile
}

func (p *TAccountBaseInfo) GetKycStatus() int32 {
  return p.KycStatus
}

func (p *TAccountBaseInfo) GetTradePwd() string {
  return p.TradePwd
}
func (p *TAccountBaseInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountBaseInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TAccountBaseInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TAccountBaseInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TAccountBaseInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KycStatus = v
}
  return nil
}

func (p *TAccountBaseInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TradePwd = v
}
  return nil
}

func (p *TAccountBaseInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAccountBaseInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountBaseInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TAccountBaseInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *TAccountBaseInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mobile: ", p), err) }
  return err
}

func (p *TAccountBaseInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycStatus", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:kycStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.KycStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycStatus (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:kycStatus: ", p), err) }
  return err
}

func (p *TAccountBaseInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePwd", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tradePwd: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradePwd (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tradePwd: ", p), err) }
  return err
}

func (p *TAccountBaseInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountBaseInfo(%+v)", *p)
}

// Attributes:
//  - AndroidStatus
//  - IosStatus
//  - PcStatus
//  - IntefaceID
type TMaintenance struct {
  AndroidStatus int32 `thrift:"android_status,1" db:"android_status" json:"android_status"`
  IosStatus int32 `thrift:"ios_status,2" db:"ios_status" json:"ios_status"`
  PcStatus int32 `thrift:"pc_status,3" db:"pc_status" json:"pc_status"`
  IntefaceID int32 `thrift:"inteface_id,4" db:"inteface_id" json:"inteface_id"`
}

func NewTMaintenance() *TMaintenance {
  return &TMaintenance{}
}


func (p *TMaintenance) GetAndroidStatus() int32 {
  return p.AndroidStatus
}

func (p *TMaintenance) GetIosStatus() int32 {
  return p.IosStatus
}

func (p *TMaintenance) GetPcStatus() int32 {
  return p.PcStatus
}

func (p *TMaintenance) GetIntefaceID() int32 {
  return p.IntefaceID
}
func (p *TMaintenance) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMaintenance)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AndroidStatus = v
}
  return nil
}

func (p *TMaintenance)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IosStatus = v
}
  return nil
}

func (p *TMaintenance)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PcStatus = v
}
  return nil
}

func (p *TMaintenance)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IntefaceID = v
}
  return nil
}

func (p *TMaintenance) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMaintenance"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMaintenance) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("android_status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:android_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.AndroidStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.android_status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:android_status: ", p), err) }
  return err
}

func (p *TMaintenance) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ios_status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ios_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.IosStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ios_status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ios_status: ", p), err) }
  return err
}

func (p *TMaintenance) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pc_status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pc_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.PcStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pc_status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pc_status: ", p), err) }
  return err
}

func (p *TMaintenance) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inteface_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:inteface_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.IntefaceID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inteface_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:inteface_id: ", p), err) }
  return err
}

func (p *TMaintenance) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMaintenance(%+v)", *p)
}

// Attributes:
//  - MO_AMOUNT
//  - M1_AMOUNT
//  - M2_AMOUNT
//  - SOURCE_TYPE
//  - StartTime
//  - EndTime
type TCandyParameter struct {
  MO_AMOUNT int32 `thrift:"MO_AMOUNT,1" db:"MO_AMOUNT" json:"MO_AMOUNT"`
  M1_AMOUNT int32 `thrift:"M1_AMOUNT,2" db:"M1_AMOUNT" json:"M1_AMOUNT"`
  M2_AMOUNT int32 `thrift:"M2_AMOUNT,3" db:"M2_AMOUNT" json:"M2_AMOUNT"`
  SOURCE_TYPE int32 `thrift:"SOURCE_TYPE,4" db:"SOURCE_TYPE" json:"SOURCE_TYPE"`
  StartTime int64 `thrift:"start_time,5" db:"start_time" json:"start_time"`
  EndTime int64 `thrift:"end_time,6" db:"end_time" json:"end_time"`
}

func NewTCandyParameter() *TCandyParameter {
  return &TCandyParameter{}
}


func (p *TCandyParameter) GetMO_AMOUNT() int32 {
  return p.MO_AMOUNT
}

func (p *TCandyParameter) GetM1_AMOUNT() int32 {
  return p.M1_AMOUNT
}

func (p *TCandyParameter) GetM2_AMOUNT() int32 {
  return p.M2_AMOUNT
}

func (p *TCandyParameter) GetSOURCE_TYPE() int32 {
  return p.SOURCE_TYPE
}

func (p *TCandyParameter) GetStartTime() int64 {
  return p.StartTime
}

func (p *TCandyParameter) GetEndTime() int64 {
  return p.EndTime
}
func (p *TCandyParameter) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCandyParameter)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MO_AMOUNT = v
}
  return nil
}

func (p *TCandyParameter)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.M1_AMOUNT = v
}
  return nil
}

func (p *TCandyParameter)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.M2_AMOUNT = v
}
  return nil
}

func (p *TCandyParameter)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SOURCE_TYPE = v
}
  return nil
}

func (p *TCandyParameter)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TCandyParameter)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TCandyParameter) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCandyParameter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCandyParameter) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MO_AMOUNT", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MO_AMOUNT: ", p), err) }
  if err := oprot.WriteI32(int32(p.MO_AMOUNT)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MO_AMOUNT (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MO_AMOUNT: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("M1_AMOUNT", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:M1_AMOUNT: ", p), err) }
  if err := oprot.WriteI32(int32(p.M1_AMOUNT)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.M1_AMOUNT (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:M1_AMOUNT: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("M2_AMOUNT", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:M2_AMOUNT: ", p), err) }
  if err := oprot.WriteI32(int32(p.M2_AMOUNT)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.M2_AMOUNT (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:M2_AMOUNT: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SOURCE_TYPE", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:SOURCE_TYPE: ", p), err) }
  if err := oprot.WriteI32(int32(p.SOURCE_TYPE)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SOURCE_TYPE (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:SOURCE_TYPE: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:start_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:start_time: ", p), err) }
  return err
}

func (p *TCandyParameter) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("end_time", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:end_time: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end_time (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:end_time: ", p), err) }
  return err
}

func (p *TCandyParameter) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCandyParameter(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Currency
type TWithdrawTransactional struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Currency string `thrift:"currency,2" db:"currency" json:"currency"`
}

func NewTWithdrawTransactional() *TWithdrawTransactional {
  return &TWithdrawTransactional{}
}


func (p *TWithdrawTransactional) GetUserID() int32 {
  return p.UserID
}

func (p *TWithdrawTransactional) GetCurrency() string {
  return p.Currency
}
func (p *TWithdrawTransactional) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TWithdrawTransactional)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TWithdrawTransactional)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TWithdrawTransactional) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TWithdrawTransactional"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TWithdrawTransactional) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TWithdrawTransactional) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currency: ", p), err) }
  return err
}

func (p *TWithdrawTransactional) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TWithdrawTransactional(%+v)", *p)
}

type TAccountService interface {
  // Parameters:
  //  - TraceId
  //  - Username
  SelectUserByUsername(ctx context.Context, traceId string, username string) (r *TUser, err error)
  // Parameters:
  //  - TraceId
  //  - Username
  //  - Password
  SelectUserByUsernameAndPassword(ctx context.Context, traceId string, username string, password string) (r *TUser, err error)
  // Parameters:
  //  - TraceId
  //  - Token
  GetUsernameByToken(ctx context.Context, traceId string, token string) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - Token
  IsTokenNotExpired(ctx context.Context, traceId string, token string) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - Username
  GetTokenByUsername(ctx context.Context, traceId string, username string) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - ID
  SelectAccountByUserId(ctx context.Context, traceId string, id int32) (r *TAccount, err error)
  // Parameters:
  //  - TraceId
  //  - User
  InsertUser(ctx context.Context, traceId string, user *TUser) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - User
  UpdateUser(ctx context.Context, traceId string, user *TUser) (err error)
  // Parameters:
  //  - TraceId
  //  - GoogleAuth
  InsertGoogleAuth(ctx context.Context, traceId string, googleAuth *TGoogleAuth) (err error)
  // Parameters:
  //  - TraceId
  //  - GoogleAuth
  UpdateGoogleAuth(ctx context.Context, traceId string, googleAuth *TGoogleAuth) (err error)
  // Parameters:
  //  - TraceId
  //  - TradePasswordAuth
  InsertTradePasswordAuth(ctx context.Context, traceId string, tradePasswordAuth *TTradePasswordAuth) (err error)
  // Parameters:
  //  - TraceId
  //  - TradePasswordAuth
  UpdateTradePasswordAuth(ctx context.Context, traceId string, tradePasswordAuth *TTradePasswordAuth) (err error)
  // Parameters:
  //  - TraceId
  //  - Engine
  InsertEngine(ctx context.Context, traceId string, engine *TEngine) (err error)
  // Parameters:
  //  - TraceId
  //  - Engine
  UpdateEngine(ctx context.Context, traceId string, engine *TEngine) (err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectKycByUserId(ctx context.Context, traceId string, userId int32) (r *TKyc, err error)
  // Parameters:
  //  - TraceId
  //  - Kyc
  InsertKyc(ctx context.Context, traceId string, kyc *TKyc) (err error)
  // Parameters:
  //  - TraceId
  //  - Kyc
  UpdateKyc(ctx context.Context, traceId string, kyc *TKyc) (err error)
  // Parameters:
  //  - UserName
  SelectUserKycStatusByUserName(ctx context.Context, userName string) (r string, err error)
  // Parameters:
  //  - UserID
  AddCaptchaErrorCount(ctx context.Context, user_id string) (err error)
  // Parameters:
  //  - UserID
  GetUserInfo(ctx context.Context, user_id string) (r *TUser, err error)
  // Parameters:
  //  - UserID
  LockUser(ctx context.Context, user_id string) (err error)
  GetCurrencyInfo(ctx context.Context) (r []*TCurrency, err error)
  // Parameters:
  //  - UserID
  UnlockUser(ctx context.Context, user_id int32) (err error)
  // Parameters:
  //  - UserID
  GetEngineInfoByUserId(ctx context.Context, user_id string) (r *TEngine, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - AccountInfoUrl
  CreateEngineAccountByUserId(ctx context.Context, traceId string, user_id int32, accountInfoUrl string) (r bool, err error)
  // Parameters:
  //  - Email
  //  - LoginPwd
  UpdatePasswordByEmail(ctx context.Context, email string, loginPwd string) (r int32, err error)
  // Parameters:
  //  - UserID
  //  - AccountInfoUrl
  CreateEngineAccount(ctx context.Context, user_id string, accountInfoUrl string) (r *TEngine, err error)
  // Parameters:
  //  - TraceId
  //  - Username
  SelectCodeUserByUsername(ctx context.Context, traceId string, username string) (r *TUser, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Password
  UpdateLoginPassword(ctx context.Context, traceId string, user_id string, password string) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Password
  CheckPasswordByUserId(ctx context.Context, traceId string, user_id string, password string) (r *TUserEntity, err error)
  // Parameters:
  //  - UserId
  SelectUserConfigStatusByUserId(ctx context.Context, userId int32) (r *TUserConfigStatus, err error)
  // Parameters:
  //  - UserId
  SelectAccountBaseInfoByUserId(ctx context.Context, userId int32) (r *TAccountBaseInfo, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Mobile
  UpdateMobile(ctx context.Context, traceId string, user_id int32, mobile string) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  RemoveMobile(ctx context.Context, traceId string, user_id int32) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  SelectUserById(ctx context.Context, traceId string, user_id int32) (r *TUser, err error)
  // Parameters:
  //  - TraceId
  //  - Username
  SelectTUserByUsername(ctx context.Context, traceId string, username string) (r *TUser, err error)
}

type TAccountServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTAccountService instead
func NewTAccountServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TAccountServiceClient {
  return &TAccountServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTAccountService instead
func NewTAccountServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TAccountServiceClient {
  return &TAccountServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTAccountServiceClient(c thrift.TClient) *TAccountServiceClient {
  return &TAccountServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - Username
func (p *TAccountServiceClient) SelectUserByUsername(ctx context.Context, traceId string, username string) (r *TUser, err error) {
  var _args0 TAccountServiceSelectUserByUsernameArgs
  _args0.TraceId = traceId
  _args0.Username = username
  var _result1 TAccountServiceSelectUserByUsernameResult
  if err = p.c.Call(ctx, "SelectUserByUsername", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Username
//  - Password
func (p *TAccountServiceClient) SelectUserByUsernameAndPassword(ctx context.Context, traceId string, username string, password string) (r *TUser, err error) {
  var _args2 TAccountServiceSelectUserByUsernameAndPasswordArgs
  _args2.TraceId = traceId
  _args2.Username = username
  _args2.Password = password
  var _result3 TAccountServiceSelectUserByUsernameAndPasswordResult
  if err = p.c.Call(ctx, "SelectUserByUsernameAndPassword", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Token
func (p *TAccountServiceClient) GetUsernameByToken(ctx context.Context, traceId string, token string) (r string, err error) {
  var _args4 TAccountServiceGetUsernameByTokenArgs
  _args4.TraceId = traceId
  _args4.Token = token
  var _result5 TAccountServiceGetUsernameByTokenResult
  if err = p.c.Call(ctx, "GetUsernameByToken", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Token
func (p *TAccountServiceClient) IsTokenNotExpired(ctx context.Context, traceId string, token string) (r bool, err error) {
  var _args6 TAccountServiceIsTokenNotExpiredArgs
  _args6.TraceId = traceId
  _args6.Token = token
  var _result7 TAccountServiceIsTokenNotExpiredResult
  if err = p.c.Call(ctx, "IsTokenNotExpired", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Username
func (p *TAccountServiceClient) GetTokenByUsername(ctx context.Context, traceId string, username string) (r string, err error) {
  var _args8 TAccountServiceGetTokenByUsernameArgs
  _args8.TraceId = traceId
  _args8.Username = username
  var _result9 TAccountServiceGetTokenByUsernameResult
  if err = p.c.Call(ctx, "GetTokenByUsername", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - ID
func (p *TAccountServiceClient) SelectAccountByUserId(ctx context.Context, traceId string, id int32) (r *TAccount, err error) {
  var _args10 TAccountServiceSelectAccountByUserIdArgs
  _args10.TraceId = traceId
  _args10.ID = id
  var _result11 TAccountServiceSelectAccountByUserIdResult
  if err = p.c.Call(ctx, "SelectAccountByUserId", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - User
func (p *TAccountServiceClient) InsertUser(ctx context.Context, traceId string, user *TUser) (r int32, err error) {
  var _args12 TAccountServiceInsertUserArgs
  _args12.TraceId = traceId
  _args12.User = user
  var _result13 TAccountServiceInsertUserResult
  if err = p.c.Call(ctx, "InsertUser", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - User
func (p *TAccountServiceClient) UpdateUser(ctx context.Context, traceId string, user *TUser) (err error) {
  var _args14 TAccountServiceUpdateUserArgs
  _args14.TraceId = traceId
  _args14.User = user
  var _result15 TAccountServiceUpdateUserResult
  if err = p.c.Call(ctx, "UpdateUser", &_args14, &_result15); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - GoogleAuth
func (p *TAccountServiceClient) InsertGoogleAuth(ctx context.Context, traceId string, googleAuth *TGoogleAuth) (err error) {
  var _args16 TAccountServiceInsertGoogleAuthArgs
  _args16.TraceId = traceId
  _args16.GoogleAuth = googleAuth
  var _result17 TAccountServiceInsertGoogleAuthResult
  if err = p.c.Call(ctx, "InsertGoogleAuth", &_args16, &_result17); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - GoogleAuth
func (p *TAccountServiceClient) UpdateGoogleAuth(ctx context.Context, traceId string, googleAuth *TGoogleAuth) (err error) {
  var _args18 TAccountServiceUpdateGoogleAuthArgs
  _args18.TraceId = traceId
  _args18.GoogleAuth = googleAuth
  var _result19 TAccountServiceUpdateGoogleAuthResult
  if err = p.c.Call(ctx, "UpdateGoogleAuth", &_args18, &_result19); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - TradePasswordAuth
func (p *TAccountServiceClient) InsertTradePasswordAuth(ctx context.Context, traceId string, tradePasswordAuth *TTradePasswordAuth) (err error) {
  var _args20 TAccountServiceInsertTradePasswordAuthArgs
  _args20.TraceId = traceId
  _args20.TradePasswordAuth = tradePasswordAuth
  var _result21 TAccountServiceInsertTradePasswordAuthResult
  if err = p.c.Call(ctx, "InsertTradePasswordAuth", &_args20, &_result21); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - TradePasswordAuth
func (p *TAccountServiceClient) UpdateTradePasswordAuth(ctx context.Context, traceId string, tradePasswordAuth *TTradePasswordAuth) (err error) {
  var _args22 TAccountServiceUpdateTradePasswordAuthArgs
  _args22.TraceId = traceId
  _args22.TradePasswordAuth = tradePasswordAuth
  var _result23 TAccountServiceUpdateTradePasswordAuthResult
  if err = p.c.Call(ctx, "UpdateTradePasswordAuth", &_args22, &_result23); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - Engine
func (p *TAccountServiceClient) InsertEngine(ctx context.Context, traceId string, engine *TEngine) (err error) {
  var _args24 TAccountServiceInsertEngineArgs
  _args24.TraceId = traceId
  _args24.Engine = engine
  var _result25 TAccountServiceInsertEngineResult
  if err = p.c.Call(ctx, "InsertEngine", &_args24, &_result25); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - Engine
func (p *TAccountServiceClient) UpdateEngine(ctx context.Context, traceId string, engine *TEngine) (err error) {
  var _args26 TAccountServiceUpdateEngineArgs
  _args26.TraceId = traceId
  _args26.Engine = engine
  var _result27 TAccountServiceUpdateEngineResult
  if err = p.c.Call(ctx, "UpdateEngine", &_args26, &_result27); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TAccountServiceClient) SelectKycByUserId(ctx context.Context, traceId string, userId int32) (r *TKyc, err error) {
  var _args28 TAccountServiceSelectKycByUserIdArgs
  _args28.TraceId = traceId
  _args28.UserId = userId
  var _result29 TAccountServiceSelectKycByUserIdResult
  if err = p.c.Call(ctx, "SelectKycByUserId", &_args28, &_result29); err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Kyc
func (p *TAccountServiceClient) InsertKyc(ctx context.Context, traceId string, kyc *TKyc) (err error) {
  var _args30 TAccountServiceInsertKycArgs
  _args30.TraceId = traceId
  _args30.Kyc = kyc
  var _result31 TAccountServiceInsertKycResult
  if err = p.c.Call(ctx, "InsertKyc", &_args30, &_result31); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - Kyc
func (p *TAccountServiceClient) UpdateKyc(ctx context.Context, traceId string, kyc *TKyc) (err error) {
  var _args32 TAccountServiceUpdateKycArgs
  _args32.TraceId = traceId
  _args32.Kyc = kyc
  var _result33 TAccountServiceUpdateKycResult
  if err = p.c.Call(ctx, "UpdateKyc", &_args32, &_result33); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserName
func (p *TAccountServiceClient) SelectUserKycStatusByUserName(ctx context.Context, userName string) (r string, err error) {
  var _args34 TAccountServiceSelectUserKycStatusByUserNameArgs
  _args34.UserName = userName
  var _result35 TAccountServiceSelectUserKycStatusByUserNameResult
  if err = p.c.Call(ctx, "selectUserKycStatusByUserName", &_args34, &_result35); err != nil {
    return
  }
  return _result35.GetSuccess(), nil
}

// Parameters:
//  - UserID
func (p *TAccountServiceClient) AddCaptchaErrorCount(ctx context.Context, user_id string) (err error) {
  var _args36 TAccountServiceAddCaptchaErrorCountArgs
  _args36.UserID = user_id
  var _result37 TAccountServiceAddCaptchaErrorCountResult
  if err = p.c.Call(ctx, "addCaptchaErrorCount", &_args36, &_result37); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserID
func (p *TAccountServiceClient) GetUserInfo(ctx context.Context, user_id string) (r *TUser, err error) {
  var _args38 TAccountServiceGetUserInfoArgs
  _args38.UserID = user_id
  var _result39 TAccountServiceGetUserInfoResult
  if err = p.c.Call(ctx, "getUserInfo", &_args38, &_result39); err != nil {
    return
  }
  return _result39.GetSuccess(), nil
}

// Parameters:
//  - UserID
func (p *TAccountServiceClient) LockUser(ctx context.Context, user_id string) (err error) {
  var _args40 TAccountServiceLockUserArgs
  _args40.UserID = user_id
  var _result41 TAccountServiceLockUserResult
  if err = p.c.Call(ctx, "lockUser", &_args40, &_result41); err != nil {
    return
  }
  return nil
}

func (p *TAccountServiceClient) GetCurrencyInfo(ctx context.Context) (r []*TCurrency, err error) {
  var _args42 TAccountServiceGetCurrencyInfoArgs
  var _result43 TAccountServiceGetCurrencyInfoResult
  if err = p.c.Call(ctx, "getCurrencyInfo", &_args42, &_result43); err != nil {
    return
  }
  return _result43.GetSuccess(), nil
}

// Parameters:
//  - UserID
func (p *TAccountServiceClient) UnlockUser(ctx context.Context, user_id int32) (err error) {
  var _args44 TAccountServiceUnlockUserArgs
  _args44.UserID = user_id
  var _result45 TAccountServiceUnlockUserResult
  if err = p.c.Call(ctx, "unlockUser", &_args44, &_result45); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserID
func (p *TAccountServiceClient) GetEngineInfoByUserId(ctx context.Context, user_id string) (r *TEngine, err error) {
  var _args46 TAccountServiceGetEngineInfoByUserIdArgs
  _args46.UserID = user_id
  var _result47 TAccountServiceGetEngineInfoByUserIdResult
  if err = p.c.Call(ctx, "getEngineInfoByUserId", &_args46, &_result47); err != nil {
    return
  }
  return _result47.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - AccountInfoUrl
func (p *TAccountServiceClient) CreateEngineAccountByUserId(ctx context.Context, traceId string, user_id int32, accountInfoUrl string) (r bool, err error) {
  var _args48 TAccountServiceCreateEngineAccountByUserIdArgs
  _args48.TraceId = traceId
  _args48.UserID = user_id
  _args48.AccountInfoUrl = accountInfoUrl
  var _result49 TAccountServiceCreateEngineAccountByUserIdResult
  if err = p.c.Call(ctx, "createEngineAccountByUserId", &_args48, &_result49); err != nil {
    return
  }
  return _result49.GetSuccess(), nil
}

// Parameters:
//  - Email
//  - LoginPwd
func (p *TAccountServiceClient) UpdatePasswordByEmail(ctx context.Context, email string, loginPwd string) (r int32, err error) {
  var _args50 TAccountServiceUpdatePasswordByEmailArgs
  _args50.Email = email
  _args50.LoginPwd = loginPwd
  var _result51 TAccountServiceUpdatePasswordByEmailResult
  if err = p.c.Call(ctx, "updatePasswordByEmail", &_args50, &_result51); err != nil {
    return
  }
  return _result51.GetSuccess(), nil
}

// Parameters:
//  - UserID
//  - AccountInfoUrl
func (p *TAccountServiceClient) CreateEngineAccount(ctx context.Context, user_id string, accountInfoUrl string) (r *TEngine, err error) {
  var _args52 TAccountServiceCreateEngineAccountArgs
  _args52.UserID = user_id
  _args52.AccountInfoUrl = accountInfoUrl
  var _result53 TAccountServiceCreateEngineAccountResult
  if err = p.c.Call(ctx, "createEngineAccount", &_args52, &_result53); err != nil {
    return
  }
  return _result53.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Username
func (p *TAccountServiceClient) SelectCodeUserByUsername(ctx context.Context, traceId string, username string) (r *TUser, err error) {
  var _args54 TAccountServiceSelectCodeUserByUsernameArgs
  _args54.TraceId = traceId
  _args54.Username = username
  var _result55 TAccountServiceSelectCodeUserByUsernameResult
  if err = p.c.Call(ctx, "selectCodeUserByUsername", &_args54, &_result55); err != nil {
    return
  }
  return _result55.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Password
func (p *TAccountServiceClient) UpdateLoginPassword(ctx context.Context, traceId string, user_id string, password string) (err error) {
  var _args56 TAccountServiceUpdateLoginPasswordArgs
  _args56.TraceId = traceId
  _args56.UserID = user_id
  _args56.Password = password
  var _result57 TAccountServiceUpdateLoginPasswordResult
  if err = p.c.Call(ctx, "updateLoginPassword", &_args56, &_result57); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Password
func (p *TAccountServiceClient) CheckPasswordByUserId(ctx context.Context, traceId string, user_id string, password string) (r *TUserEntity, err error) {
  var _args58 TAccountServiceCheckPasswordByUserIdArgs
  _args58.TraceId = traceId
  _args58.UserID = user_id
  _args58.Password = password
  var _result59 TAccountServiceCheckPasswordByUserIdResult
  if err = p.c.Call(ctx, "checkPasswordByUserId", &_args58, &_result59); err != nil {
    return
  }
  return _result59.GetSuccess(), nil
}

// Parameters:
//  - UserId
func (p *TAccountServiceClient) SelectUserConfigStatusByUserId(ctx context.Context, userId int32) (r *TUserConfigStatus, err error) {
  var _args60 TAccountServiceSelectUserConfigStatusByUserIdArgs
  _args60.UserId = userId
  var _result61 TAccountServiceSelectUserConfigStatusByUserIdResult
  if err = p.c.Call(ctx, "selectUserConfigStatusByUserId", &_args60, &_result61); err != nil {
    return
  }
  return _result61.GetSuccess(), nil
}

// Parameters:
//  - UserId
func (p *TAccountServiceClient) SelectAccountBaseInfoByUserId(ctx context.Context, userId int32) (r *TAccountBaseInfo, err error) {
  var _args62 TAccountServiceSelectAccountBaseInfoByUserIdArgs
  _args62.UserId = userId
  var _result63 TAccountServiceSelectAccountBaseInfoByUserIdResult
  if err = p.c.Call(ctx, "selectAccountBaseInfoByUserId", &_args62, &_result63); err != nil {
    return
  }
  return _result63.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Mobile
func (p *TAccountServiceClient) UpdateMobile(ctx context.Context, traceId string, user_id int32, mobile string) (err error) {
  var _args64 TAccountServiceUpdateMobileArgs
  _args64.TraceId = traceId
  _args64.UserID = user_id
  _args64.Mobile = mobile
  var _result65 TAccountServiceUpdateMobileResult
  if err = p.c.Call(ctx, "updateMobile", &_args64, &_result65); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
func (p *TAccountServiceClient) RemoveMobile(ctx context.Context, traceId string, user_id int32) (err error) {
  var _args66 TAccountServiceRemoveMobileArgs
  _args66.TraceId = traceId
  _args66.UserID = user_id
  var _result67 TAccountServiceRemoveMobileResult
  if err = p.c.Call(ctx, "removeMobile", &_args66, &_result67); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
func (p *TAccountServiceClient) SelectUserById(ctx context.Context, traceId string, user_id int32) (r *TUser, err error) {
  var _args68 TAccountServiceSelectUserByIdArgs
  _args68.TraceId = traceId
  _args68.UserID = user_id
  var _result69 TAccountServiceSelectUserByIdResult
  if err = p.c.Call(ctx, "selectUserById", &_args68, &_result69); err != nil {
    return
  }
  return _result69.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Username
func (p *TAccountServiceClient) SelectTUserByUsername(ctx context.Context, traceId string, username string) (r *TUser, err error) {
  var _args70 TAccountServiceSelectTUserByUsernameArgs
  _args70.TraceId = traceId
  _args70.Username = username
  var _result71 TAccountServiceSelectTUserByUsernameResult
  if err = p.c.Call(ctx, "SelectTUserByUsername", &_args70, &_result71); err != nil {
    return
  }
  return _result71.GetSuccess(), nil
}

type TAccountServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TAccountService
}

func (p *TAccountServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TAccountServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TAccountServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTAccountServiceProcessor(handler TAccountService) *TAccountServiceProcessor {

  self72 := &TAccountServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self72.processorMap["SelectUserByUsername"] = &tAccountServiceProcessorSelectUserByUsername{handler:handler}
  self72.processorMap["SelectUserByUsernameAndPassword"] = &tAccountServiceProcessorSelectUserByUsernameAndPassword{handler:handler}
  self72.processorMap["GetUsernameByToken"] = &tAccountServiceProcessorGetUsernameByToken{handler:handler}
  self72.processorMap["IsTokenNotExpired"] = &tAccountServiceProcessorIsTokenNotExpired{handler:handler}
  self72.processorMap["GetTokenByUsername"] = &tAccountServiceProcessorGetTokenByUsername{handler:handler}
  self72.processorMap["SelectAccountByUserId"] = &tAccountServiceProcessorSelectAccountByUserId{handler:handler}
  self72.processorMap["InsertUser"] = &tAccountServiceProcessorInsertUser{handler:handler}
  self72.processorMap["UpdateUser"] = &tAccountServiceProcessorUpdateUser{handler:handler}
  self72.processorMap["InsertGoogleAuth"] = &tAccountServiceProcessorInsertGoogleAuth{handler:handler}
  self72.processorMap["UpdateGoogleAuth"] = &tAccountServiceProcessorUpdateGoogleAuth{handler:handler}
  self72.processorMap["InsertTradePasswordAuth"] = &tAccountServiceProcessorInsertTradePasswordAuth{handler:handler}
  self72.processorMap["UpdateTradePasswordAuth"] = &tAccountServiceProcessorUpdateTradePasswordAuth{handler:handler}
  self72.processorMap["InsertEngine"] = &tAccountServiceProcessorInsertEngine{handler:handler}
  self72.processorMap["UpdateEngine"] = &tAccountServiceProcessorUpdateEngine{handler:handler}
  self72.processorMap["SelectKycByUserId"] = &tAccountServiceProcessorSelectKycByUserId{handler:handler}
  self72.processorMap["InsertKyc"] = &tAccountServiceProcessorInsertKyc{handler:handler}
  self72.processorMap["UpdateKyc"] = &tAccountServiceProcessorUpdateKyc{handler:handler}
  self72.processorMap["selectUserKycStatusByUserName"] = &tAccountServiceProcessorSelectUserKycStatusByUserName{handler:handler}
  self72.processorMap["addCaptchaErrorCount"] = &tAccountServiceProcessorAddCaptchaErrorCount{handler:handler}
  self72.processorMap["getUserInfo"] = &tAccountServiceProcessorGetUserInfo{handler:handler}
  self72.processorMap["lockUser"] = &tAccountServiceProcessorLockUser{handler:handler}
  self72.processorMap["getCurrencyInfo"] = &tAccountServiceProcessorGetCurrencyInfo{handler:handler}
  self72.processorMap["unlockUser"] = &tAccountServiceProcessorUnlockUser{handler:handler}
  self72.processorMap["getEngineInfoByUserId"] = &tAccountServiceProcessorGetEngineInfoByUserId{handler:handler}
  self72.processorMap["createEngineAccountByUserId"] = &tAccountServiceProcessorCreateEngineAccountByUserId{handler:handler}
  self72.processorMap["updatePasswordByEmail"] = &tAccountServiceProcessorUpdatePasswordByEmail{handler:handler}
  self72.processorMap["createEngineAccount"] = &tAccountServiceProcessorCreateEngineAccount{handler:handler}
  self72.processorMap["selectCodeUserByUsername"] = &tAccountServiceProcessorSelectCodeUserByUsername{handler:handler}
  self72.processorMap["updateLoginPassword"] = &tAccountServiceProcessorUpdateLoginPassword{handler:handler}
  self72.processorMap["checkPasswordByUserId"] = &tAccountServiceProcessorCheckPasswordByUserId{handler:handler}
  self72.processorMap["selectUserConfigStatusByUserId"] = &tAccountServiceProcessorSelectUserConfigStatusByUserId{handler:handler}
  self72.processorMap["selectAccountBaseInfoByUserId"] = &tAccountServiceProcessorSelectAccountBaseInfoByUserId{handler:handler}
  self72.processorMap["updateMobile"] = &tAccountServiceProcessorUpdateMobile{handler:handler}
  self72.processorMap["removeMobile"] = &tAccountServiceProcessorRemoveMobile{handler:handler}
  self72.processorMap["selectUserById"] = &tAccountServiceProcessorSelectUserById{handler:handler}
  self72.processorMap["SelectTUserByUsername"] = &tAccountServiceProcessorSelectTUserByUsername{handler:handler}
return self72
}

func (p *TAccountServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x73 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x73.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x73

}

type tAccountServiceProcessorSelectUserByUsername struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectUserByUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectUserByUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectUserByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectUserByUsernameResult{}
var retval *TUser
  var err2 error
  if retval, err2 = p.handler.SelectUserByUsername(ctx, args.TraceId, args.Username); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectUserByUsername: " + err2.Error())
    oprot.WriteMessageBegin("SelectUserByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectUserByUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectUserByUsernameAndPassword struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectUserByUsernameAndPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectUserByUsernameAndPasswordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectUserByUsernameAndPassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectUserByUsernameAndPasswordResult{}
var retval *TUser
  var err2 error
  if retval, err2 = p.handler.SelectUserByUsernameAndPassword(ctx, args.TraceId, args.Username, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectUserByUsernameAndPassword: " + err2.Error())
    oprot.WriteMessageBegin("SelectUserByUsernameAndPassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectUserByUsernameAndPassword", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorGetUsernameByToken struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorGetUsernameByToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceGetUsernameByTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetUsernameByToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceGetUsernameByTokenResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetUsernameByToken(ctx, args.TraceId, args.Token); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUsernameByToken: " + err2.Error())
    oprot.WriteMessageBegin("GetUsernameByToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetUsernameByToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorIsTokenNotExpired struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorIsTokenNotExpired) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceIsTokenNotExpiredArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("IsTokenNotExpired", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceIsTokenNotExpiredResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsTokenNotExpired(ctx, args.TraceId, args.Token); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsTokenNotExpired: " + err2.Error())
    oprot.WriteMessageBegin("IsTokenNotExpired", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("IsTokenNotExpired", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorGetTokenByUsername struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorGetTokenByUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceGetTokenByUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetTokenByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceGetTokenByUsernameResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetTokenByUsername(ctx, args.TraceId, args.Username); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTokenByUsername: " + err2.Error())
    oprot.WriteMessageBegin("GetTokenByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetTokenByUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectAccountByUserId struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectAccountByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectAccountByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectAccountByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectAccountByUserIdResult{}
var retval *TAccount
  var err2 error
  if retval, err2 = p.handler.SelectAccountByUserId(ctx, args.TraceId, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectAccountByUserId: " + err2.Error())
    oprot.WriteMessageBegin("SelectAccountByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectAccountByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorInsertUser struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorInsertUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceInsertUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InsertUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceInsertUserResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.InsertUser(ctx, args.TraceId, args.User); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertUser: " + err2.Error())
    oprot.WriteMessageBegin("InsertUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("InsertUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUpdateUser struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUpdateUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUpdateUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUpdateUserResult{}
  var err2 error
  if err2 = p.handler.UpdateUser(ctx, args.TraceId, args.User); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateUser: " + err2.Error())
    oprot.WriteMessageBegin("UpdateUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("UpdateUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorInsertGoogleAuth struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorInsertGoogleAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceInsertGoogleAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InsertGoogleAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceInsertGoogleAuthResult{}
  var err2 error
  if err2 = p.handler.InsertGoogleAuth(ctx, args.TraceId, args.GoogleAuth); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertGoogleAuth: " + err2.Error())
    oprot.WriteMessageBegin("InsertGoogleAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("InsertGoogleAuth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUpdateGoogleAuth struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUpdateGoogleAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUpdateGoogleAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateGoogleAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUpdateGoogleAuthResult{}
  var err2 error
  if err2 = p.handler.UpdateGoogleAuth(ctx, args.TraceId, args.GoogleAuth); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateGoogleAuth: " + err2.Error())
    oprot.WriteMessageBegin("UpdateGoogleAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("UpdateGoogleAuth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorInsertTradePasswordAuth struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorInsertTradePasswordAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceInsertTradePasswordAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InsertTradePasswordAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceInsertTradePasswordAuthResult{}
  var err2 error
  if err2 = p.handler.InsertTradePasswordAuth(ctx, args.TraceId, args.TradePasswordAuth); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertTradePasswordAuth: " + err2.Error())
    oprot.WriteMessageBegin("InsertTradePasswordAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("InsertTradePasswordAuth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUpdateTradePasswordAuth struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUpdateTradePasswordAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUpdateTradePasswordAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateTradePasswordAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUpdateTradePasswordAuthResult{}
  var err2 error
  if err2 = p.handler.UpdateTradePasswordAuth(ctx, args.TraceId, args.TradePasswordAuth); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateTradePasswordAuth: " + err2.Error())
    oprot.WriteMessageBegin("UpdateTradePasswordAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("UpdateTradePasswordAuth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorInsertEngine struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorInsertEngine) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceInsertEngineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InsertEngine", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceInsertEngineResult{}
  var err2 error
  if err2 = p.handler.InsertEngine(ctx, args.TraceId, args.Engine); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertEngine: " + err2.Error())
    oprot.WriteMessageBegin("InsertEngine", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("InsertEngine", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUpdateEngine struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUpdateEngine) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUpdateEngineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateEngine", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUpdateEngineResult{}
  var err2 error
  if err2 = p.handler.UpdateEngine(ctx, args.TraceId, args.Engine); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEngine: " + err2.Error())
    oprot.WriteMessageBegin("UpdateEngine", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("UpdateEngine", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectKycByUserId struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectKycByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectKycByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectKycByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectKycByUserIdResult{}
var retval *TKyc
  var err2 error
  if retval, err2 = p.handler.SelectKycByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectKycByUserId: " + err2.Error())
    oprot.WriteMessageBegin("SelectKycByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectKycByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorInsertKyc struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorInsertKyc) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceInsertKycArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("InsertKyc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceInsertKycResult{}
  var err2 error
  if err2 = p.handler.InsertKyc(ctx, args.TraceId, args.Kyc); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InsertKyc: " + err2.Error())
    oprot.WriteMessageBegin("InsertKyc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("InsertKyc", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUpdateKyc struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUpdateKyc) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUpdateKycArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("UpdateKyc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUpdateKycResult{}
  var err2 error
  if err2 = p.handler.UpdateKyc(ctx, args.TraceId, args.Kyc); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateKyc: " + err2.Error())
    oprot.WriteMessageBegin("UpdateKyc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("UpdateKyc", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectUserKycStatusByUserName struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectUserKycStatusByUserName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectUserKycStatusByUserNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserKycStatusByUserName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectUserKycStatusByUserNameResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SelectUserKycStatusByUserName(ctx, args.UserName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserKycStatusByUserName: " + err2.Error())
    oprot.WriteMessageBegin("selectUserKycStatusByUserName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectUserKycStatusByUserName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorAddCaptchaErrorCount struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorAddCaptchaErrorCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceAddCaptchaErrorCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addCaptchaErrorCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceAddCaptchaErrorCountResult{}
  var err2 error
  if err2 = p.handler.AddCaptchaErrorCount(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addCaptchaErrorCount: " + err2.Error())
    oprot.WriteMessageBegin("addCaptchaErrorCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("addCaptchaErrorCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorGetUserInfo struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorGetUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceGetUserInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceGetUserInfoResult{}
var retval *TUser
  var err2 error
  if retval, err2 = p.handler.GetUserInfo(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfo: " + err2.Error())
    oprot.WriteMessageBegin("getUserInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorLockUser struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorLockUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceLockUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("lockUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceLockUserResult{}
  var err2 error
  if err2 = p.handler.LockUser(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lockUser: " + err2.Error())
    oprot.WriteMessageBegin("lockUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("lockUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorGetCurrencyInfo struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorGetCurrencyInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceGetCurrencyInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCurrencyInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceGetCurrencyInfoResult{}
var retval []*TCurrency
  var err2 error
  if retval, err2 = p.handler.GetCurrencyInfo(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCurrencyInfo: " + err2.Error())
    oprot.WriteMessageBegin("getCurrencyInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCurrencyInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUnlockUser struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUnlockUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUnlockUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unlockUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUnlockUserResult{}
  var err2 error
  if err2 = p.handler.UnlockUser(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unlockUser: " + err2.Error())
    oprot.WriteMessageBegin("unlockUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("unlockUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorGetEngineInfoByUserId struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorGetEngineInfoByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceGetEngineInfoByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getEngineInfoByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceGetEngineInfoByUserIdResult{}
var retval *TEngine
  var err2 error
  if retval, err2 = p.handler.GetEngineInfoByUserId(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEngineInfoByUserId: " + err2.Error())
    oprot.WriteMessageBegin("getEngineInfoByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getEngineInfoByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorCreateEngineAccountByUserId struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorCreateEngineAccountByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceCreateEngineAccountByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createEngineAccountByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceCreateEngineAccountByUserIdResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CreateEngineAccountByUserId(ctx, args.TraceId, args.UserID, args.AccountInfoUrl); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEngineAccountByUserId: " + err2.Error())
    oprot.WriteMessageBegin("createEngineAccountByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createEngineAccountByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUpdatePasswordByEmail struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUpdatePasswordByEmail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUpdatePasswordByEmailArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updatePasswordByEmail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUpdatePasswordByEmailResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.UpdatePasswordByEmail(ctx, args.Email, args.LoginPwd); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updatePasswordByEmail: " + err2.Error())
    oprot.WriteMessageBegin("updatePasswordByEmail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updatePasswordByEmail", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorCreateEngineAccount struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorCreateEngineAccount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceCreateEngineAccountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createEngineAccount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceCreateEngineAccountResult{}
var retval *TEngine
  var err2 error
  if retval, err2 = p.handler.CreateEngineAccount(ctx, args.UserID, args.AccountInfoUrl); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createEngineAccount: " + err2.Error())
    oprot.WriteMessageBegin("createEngineAccount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createEngineAccount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectCodeUserByUsername struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectCodeUserByUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectCodeUserByUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectCodeUserByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectCodeUserByUsernameResult{}
var retval *TUser
  var err2 error
  if retval, err2 = p.handler.SelectCodeUserByUsername(ctx, args.TraceId, args.Username); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectCodeUserByUsername: " + err2.Error())
    oprot.WriteMessageBegin("selectCodeUserByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectCodeUserByUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUpdateLoginPassword struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUpdateLoginPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUpdateLoginPasswordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateLoginPassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUpdateLoginPasswordResult{}
  var err2 error
  if err2 = p.handler.UpdateLoginPassword(ctx, args.TraceId, args.UserID, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateLoginPassword: " + err2.Error())
    oprot.WriteMessageBegin("updateLoginPassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateLoginPassword", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorCheckPasswordByUserId struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorCheckPasswordByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceCheckPasswordByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkPasswordByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceCheckPasswordByUserIdResult{}
var retval *TUserEntity
  var err2 error
  if retval, err2 = p.handler.CheckPasswordByUserId(ctx, args.TraceId, args.UserID, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPasswordByUserId: " + err2.Error())
    oprot.WriteMessageBegin("checkPasswordByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("checkPasswordByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectUserConfigStatusByUserId struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectUserConfigStatusByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectUserConfigStatusByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserConfigStatusByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectUserConfigStatusByUserIdResult{}
var retval *TUserConfigStatus
  var err2 error
  if retval, err2 = p.handler.SelectUserConfigStatusByUserId(ctx, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserConfigStatusByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectUserConfigStatusByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserConfigStatusByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectAccountBaseInfoByUserId struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectAccountBaseInfoByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectAccountBaseInfoByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectAccountBaseInfoByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectAccountBaseInfoByUserIdResult{}
var retval *TAccountBaseInfo
  var err2 error
  if retval, err2 = p.handler.SelectAccountBaseInfoByUserId(ctx, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectAccountBaseInfoByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectAccountBaseInfoByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectAccountBaseInfoByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorUpdateMobile struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorUpdateMobile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceUpdateMobileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateMobile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceUpdateMobileResult{}
  var err2 error
  if err2 = p.handler.UpdateMobile(ctx, args.TraceId, args.UserID, args.Mobile); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateMobile: " + err2.Error())
    oprot.WriteMessageBegin("updateMobile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateMobile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorRemoveMobile struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorRemoveMobile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceRemoveMobileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeMobile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceRemoveMobileResult{}
  var err2 error
  if err2 = p.handler.RemoveMobile(ctx, args.TraceId, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeMobile: " + err2.Error())
    oprot.WriteMessageBegin("removeMobile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("removeMobile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectUserById struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectUserById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectUserByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectUserByIdResult{}
var retval *TUser
  var err2 error
  if retval, err2 = p.handler.SelectUserById(ctx, args.TraceId, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserById: " + err2.Error())
    oprot.WriteMessageBegin("selectUserById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountServiceProcessorSelectTUserByUsername struct {
  handler TAccountService
}

func (p *tAccountServiceProcessorSelectTUserByUsername) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountServiceSelectTUserByUsernameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("SelectTUserByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountServiceSelectTUserByUsernameResult{}
var retval *TUser
  var err2 error
  if retval, err2 = p.handler.SelectTUserByUsername(ctx, args.TraceId, args.Username); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SelectTUserByUsername: " + err2.Error())
    oprot.WriteMessageBegin("SelectTUserByUsername", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("SelectTUserByUsername", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - Username
type TAccountServiceSelectUserByUsernameArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewTAccountServiceSelectUserByUsernameArgs() *TAccountServiceSelectUserByUsernameArgs {
  return &TAccountServiceSelectUserByUsernameArgs{}
}


func (p *TAccountServiceSelectUserByUsernameArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceSelectUserByUsernameArgs) GetUsername() string {
  return p.Username
}
func (p *TAccountServiceSelectUserByUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceSelectUserByUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TAccountServiceSelectUserByUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectUserByUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserByUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserByUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserByUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectUserByUsernameResult struct {
  Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectUserByUsernameResult() *TAccountServiceSelectUserByUsernameResult {
  return &TAccountServiceSelectUserByUsernameResult{}
}

var TAccountServiceSelectUserByUsernameResult_Success_DEFAULT *TUser
func (p *TAccountServiceSelectUserByUsernameResult) GetSuccess() *TUser {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectUserByUsernameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectUserByUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectUserByUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUser{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectUserByUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectUserByUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserByUsernameResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Username
//  - Password
type TAccountServiceSelectUserByUsernameAndPasswordArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Username string `thrift:"username,2" db:"username" json:"username"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewTAccountServiceSelectUserByUsernameAndPasswordArgs() *TAccountServiceSelectUserByUsernameAndPasswordArgs {
  return &TAccountServiceSelectUserByUsernameAndPasswordArgs{}
}


func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) GetUsername() string {
  return p.Username
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) GetPassword() string {
  return p.Password
}
func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectUserByUsernameAndPassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserByUsernameAndPasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectUserByUsernameAndPasswordResult struct {
  Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectUserByUsernameAndPasswordResult() *TAccountServiceSelectUserByUsernameAndPasswordResult {
  return &TAccountServiceSelectUserByUsernameAndPasswordResult{}
}

var TAccountServiceSelectUserByUsernameAndPasswordResult_Success_DEFAULT *TUser
func (p *TAccountServiceSelectUserByUsernameAndPasswordResult) GetSuccess() *TUser {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectUserByUsernameAndPasswordResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectUserByUsernameAndPasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUser{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectUserByUsernameAndPassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectUserByUsernameAndPasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserByUsernameAndPasswordResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Token
type TAccountServiceGetUsernameByTokenArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Token string `thrift:"token,2" db:"token" json:"token"`
}

func NewTAccountServiceGetUsernameByTokenArgs() *TAccountServiceGetUsernameByTokenArgs {
  return &TAccountServiceGetUsernameByTokenArgs{}
}


func (p *TAccountServiceGetUsernameByTokenArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceGetUsernameByTokenArgs) GetToken() string {
  return p.Token
}
func (p *TAccountServiceGetUsernameByTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetUsernameByTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceGetUsernameByTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *TAccountServiceGetUsernameByTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUsernameByToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetUsernameByTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceGetUsernameByTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *TAccountServiceGetUsernameByTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetUsernameByTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceGetUsernameByTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceGetUsernameByTokenResult() *TAccountServiceGetUsernameByTokenResult {
  return &TAccountServiceGetUsernameByTokenResult{}
}

var TAccountServiceGetUsernameByTokenResult_Success_DEFAULT string
func (p *TAccountServiceGetUsernameByTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TAccountServiceGetUsernameByTokenResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAccountServiceGetUsernameByTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceGetUsernameByTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetUsernameByTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAccountServiceGetUsernameByTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUsernameByToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetUsernameByTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceGetUsernameByTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetUsernameByTokenResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Token
type TAccountServiceIsTokenNotExpiredArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Token string `thrift:"token,2" db:"token" json:"token"`
}

func NewTAccountServiceIsTokenNotExpiredArgs() *TAccountServiceIsTokenNotExpiredArgs {
  return &TAccountServiceIsTokenNotExpiredArgs{}
}


func (p *TAccountServiceIsTokenNotExpiredArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceIsTokenNotExpiredArgs) GetToken() string {
  return p.Token
}
func (p *TAccountServiceIsTokenNotExpiredArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceIsTokenNotExpiredArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceIsTokenNotExpiredArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *TAccountServiceIsTokenNotExpiredArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsTokenNotExpired_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceIsTokenNotExpiredArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceIsTokenNotExpiredArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *TAccountServiceIsTokenNotExpiredArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceIsTokenNotExpiredArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceIsTokenNotExpiredResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceIsTokenNotExpiredResult() *TAccountServiceIsTokenNotExpiredResult {
  return &TAccountServiceIsTokenNotExpiredResult{}
}

var TAccountServiceIsTokenNotExpiredResult_Success_DEFAULT bool
func (p *TAccountServiceIsTokenNotExpiredResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TAccountServiceIsTokenNotExpiredResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAccountServiceIsTokenNotExpiredResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceIsTokenNotExpiredResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceIsTokenNotExpiredResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAccountServiceIsTokenNotExpiredResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IsTokenNotExpired_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceIsTokenNotExpiredResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceIsTokenNotExpiredResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceIsTokenNotExpiredResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Username
type TAccountServiceGetTokenByUsernameArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewTAccountServiceGetTokenByUsernameArgs() *TAccountServiceGetTokenByUsernameArgs {
  return &TAccountServiceGetTokenByUsernameArgs{}
}


func (p *TAccountServiceGetTokenByUsernameArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceGetTokenByUsernameArgs) GetUsername() string {
  return p.Username
}
func (p *TAccountServiceGetTokenByUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetTokenByUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceGetTokenByUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TAccountServiceGetTokenByUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTokenByUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetTokenByUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceGetTokenByUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *TAccountServiceGetTokenByUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetTokenByUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceGetTokenByUsernameResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceGetTokenByUsernameResult() *TAccountServiceGetTokenByUsernameResult {
  return &TAccountServiceGetTokenByUsernameResult{}
}

var TAccountServiceGetTokenByUsernameResult_Success_DEFAULT string
func (p *TAccountServiceGetTokenByUsernameResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TAccountServiceGetTokenByUsernameResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAccountServiceGetTokenByUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceGetTokenByUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetTokenByUsernameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAccountServiceGetTokenByUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetTokenByUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetTokenByUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceGetTokenByUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetTokenByUsernameResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - ID
type TAccountServiceSelectAccountByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
}

func NewTAccountServiceSelectAccountByUserIdArgs() *TAccountServiceSelectAccountByUserIdArgs {
  return &TAccountServiceSelectAccountByUserIdArgs{}
}


func (p *TAccountServiceSelectAccountByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceSelectAccountByUserIdArgs) GetID() int32 {
  return p.ID
}
func (p *TAccountServiceSelectAccountByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectAccountByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceSelectAccountByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TAccountServiceSelectAccountByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectAccountByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectAccountByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectAccountByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TAccountServiceSelectAccountByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectAccountByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectAccountByUserIdResult struct {
  Success *TAccount `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectAccountByUserIdResult() *TAccountServiceSelectAccountByUserIdResult {
  return &TAccountServiceSelectAccountByUserIdResult{}
}

var TAccountServiceSelectAccountByUserIdResult_Success_DEFAULT *TAccount
func (p *TAccountServiceSelectAccountByUserIdResult) GetSuccess() *TAccount {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectAccountByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectAccountByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectAccountByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectAccountByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAccount{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectAccountByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectAccountByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectAccountByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectAccountByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectAccountByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - User
type TAccountServiceInsertUserArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  User *TUser `thrift:"user,2" db:"user" json:"user"`
}

func NewTAccountServiceInsertUserArgs() *TAccountServiceInsertUserArgs {
  return &TAccountServiceInsertUserArgs{}
}


func (p *TAccountServiceInsertUserArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceInsertUserArgs_User_DEFAULT *TUser
func (p *TAccountServiceInsertUserArgs) GetUser() *TUser {
  if !p.IsSetUser() {
    return TAccountServiceInsertUserArgs_User_DEFAULT
  }
return p.User
}
func (p *TAccountServiceInsertUserArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *TAccountServiceInsertUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceInsertUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.User = &TUser{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *TAccountServiceInsertUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceInsertUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err) }
  return err
}

func (p *TAccountServiceInsertUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceInsertUserResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceInsertUserResult() *TAccountServiceInsertUserResult {
  return &TAccountServiceInsertUserResult{}
}

var TAccountServiceInsertUserResult_Success_DEFAULT int32
func (p *TAccountServiceInsertUserResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TAccountServiceInsertUserResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAccountServiceInsertUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceInsertUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertUserResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAccountServiceInsertUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceInsertUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertUserResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - User
type TAccountServiceUpdateUserArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  User *TUser `thrift:"user,2" db:"user" json:"user"`
}

func NewTAccountServiceUpdateUserArgs() *TAccountServiceUpdateUserArgs {
  return &TAccountServiceUpdateUserArgs{}
}


func (p *TAccountServiceUpdateUserArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceUpdateUserArgs_User_DEFAULT *TUser
func (p *TAccountServiceUpdateUserArgs) GetUser() *TUser {
  if !p.IsSetUser() {
    return TAccountServiceUpdateUserArgs_User_DEFAULT
  }
return p.User
}
func (p *TAccountServiceUpdateUserArgs) IsSetUser() bool {
  return p.User != nil
}

func (p *TAccountServiceUpdateUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceUpdateUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.User = &TUser{}
  if err := p.User.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
  }
  return nil
}

func (p *TAccountServiceUpdateUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err) }
  if err := p.User.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateUserArgs(%+v)", *p)
}

type TAccountServiceUpdateUserResult struct {
}

func NewTAccountServiceUpdateUserResult() *TAccountServiceUpdateUserResult {
  return &TAccountServiceUpdateUserResult{}
}

func (p *TAccountServiceUpdateUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateUserResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - GoogleAuth
type TAccountServiceInsertGoogleAuthArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  GoogleAuth *TGoogleAuth `thrift:"googleAuth,2" db:"googleAuth" json:"googleAuth"`
}

func NewTAccountServiceInsertGoogleAuthArgs() *TAccountServiceInsertGoogleAuthArgs {
  return &TAccountServiceInsertGoogleAuthArgs{}
}


func (p *TAccountServiceInsertGoogleAuthArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceInsertGoogleAuthArgs_GoogleAuth_DEFAULT *TGoogleAuth
func (p *TAccountServiceInsertGoogleAuthArgs) GetGoogleAuth() *TGoogleAuth {
  if !p.IsSetGoogleAuth() {
    return TAccountServiceInsertGoogleAuthArgs_GoogleAuth_DEFAULT
  }
return p.GoogleAuth
}
func (p *TAccountServiceInsertGoogleAuthArgs) IsSetGoogleAuth() bool {
  return p.GoogleAuth != nil
}

func (p *TAccountServiceInsertGoogleAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertGoogleAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceInsertGoogleAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.GoogleAuth = &TGoogleAuth{}
  if err := p.GoogleAuth.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GoogleAuth), err)
  }
  return nil
}

func (p *TAccountServiceInsertGoogleAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertGoogleAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertGoogleAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceInsertGoogleAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleAuth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:googleAuth: ", p), err) }
  if err := p.GoogleAuth.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GoogleAuth), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:googleAuth: ", p), err) }
  return err
}

func (p *TAccountServiceInsertGoogleAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertGoogleAuthArgs(%+v)", *p)
}

type TAccountServiceInsertGoogleAuthResult struct {
}

func NewTAccountServiceInsertGoogleAuthResult() *TAccountServiceInsertGoogleAuthResult {
  return &TAccountServiceInsertGoogleAuthResult{}
}

func (p *TAccountServiceInsertGoogleAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertGoogleAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertGoogleAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertGoogleAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertGoogleAuthResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - GoogleAuth
type TAccountServiceUpdateGoogleAuthArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  GoogleAuth *TGoogleAuth `thrift:"googleAuth,2" db:"googleAuth" json:"googleAuth"`
}

func NewTAccountServiceUpdateGoogleAuthArgs() *TAccountServiceUpdateGoogleAuthArgs {
  return &TAccountServiceUpdateGoogleAuthArgs{}
}


func (p *TAccountServiceUpdateGoogleAuthArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceUpdateGoogleAuthArgs_GoogleAuth_DEFAULT *TGoogleAuth
func (p *TAccountServiceUpdateGoogleAuthArgs) GetGoogleAuth() *TGoogleAuth {
  if !p.IsSetGoogleAuth() {
    return TAccountServiceUpdateGoogleAuthArgs_GoogleAuth_DEFAULT
  }
return p.GoogleAuth
}
func (p *TAccountServiceUpdateGoogleAuthArgs) IsSetGoogleAuth() bool {
  return p.GoogleAuth != nil
}

func (p *TAccountServiceUpdateGoogleAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateGoogleAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceUpdateGoogleAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.GoogleAuth = &TGoogleAuth{}
  if err := p.GoogleAuth.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GoogleAuth), err)
  }
  return nil
}

func (p *TAccountServiceUpdateGoogleAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateGoogleAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateGoogleAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateGoogleAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleAuth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:googleAuth: ", p), err) }
  if err := p.GoogleAuth.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GoogleAuth), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:googleAuth: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateGoogleAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateGoogleAuthArgs(%+v)", *p)
}

type TAccountServiceUpdateGoogleAuthResult struct {
}

func NewTAccountServiceUpdateGoogleAuthResult() *TAccountServiceUpdateGoogleAuthResult {
  return &TAccountServiceUpdateGoogleAuthResult{}
}

func (p *TAccountServiceUpdateGoogleAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateGoogleAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateGoogleAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateGoogleAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateGoogleAuthResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - TradePasswordAuth
type TAccountServiceInsertTradePasswordAuthArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  TradePasswordAuth *TTradePasswordAuth `thrift:"tradePasswordAuth,2" db:"tradePasswordAuth" json:"tradePasswordAuth"`
}

func NewTAccountServiceInsertTradePasswordAuthArgs() *TAccountServiceInsertTradePasswordAuthArgs {
  return &TAccountServiceInsertTradePasswordAuthArgs{}
}


func (p *TAccountServiceInsertTradePasswordAuthArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceInsertTradePasswordAuthArgs_TradePasswordAuth_DEFAULT *TTradePasswordAuth
func (p *TAccountServiceInsertTradePasswordAuthArgs) GetTradePasswordAuth() *TTradePasswordAuth {
  if !p.IsSetTradePasswordAuth() {
    return TAccountServiceInsertTradePasswordAuthArgs_TradePasswordAuth_DEFAULT
  }
return p.TradePasswordAuth
}
func (p *TAccountServiceInsertTradePasswordAuthArgs) IsSetTradePasswordAuth() bool {
  return p.TradePasswordAuth != nil
}

func (p *TAccountServiceInsertTradePasswordAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertTradePasswordAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceInsertTradePasswordAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.TradePasswordAuth = &TTradePasswordAuth{}
  if err := p.TradePasswordAuth.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradePasswordAuth), err)
  }
  return nil
}

func (p *TAccountServiceInsertTradePasswordAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertTradePasswordAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertTradePasswordAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceInsertTradePasswordAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePasswordAuth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tradePasswordAuth: ", p), err) }
  if err := p.TradePasswordAuth.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradePasswordAuth), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tradePasswordAuth: ", p), err) }
  return err
}

func (p *TAccountServiceInsertTradePasswordAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertTradePasswordAuthArgs(%+v)", *p)
}

type TAccountServiceInsertTradePasswordAuthResult struct {
}

func NewTAccountServiceInsertTradePasswordAuthResult() *TAccountServiceInsertTradePasswordAuthResult {
  return &TAccountServiceInsertTradePasswordAuthResult{}
}

func (p *TAccountServiceInsertTradePasswordAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertTradePasswordAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertTradePasswordAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertTradePasswordAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertTradePasswordAuthResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - TradePasswordAuth
type TAccountServiceUpdateTradePasswordAuthArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  TradePasswordAuth *TTradePasswordAuth `thrift:"tradePasswordAuth,2" db:"tradePasswordAuth" json:"tradePasswordAuth"`
}

func NewTAccountServiceUpdateTradePasswordAuthArgs() *TAccountServiceUpdateTradePasswordAuthArgs {
  return &TAccountServiceUpdateTradePasswordAuthArgs{}
}


func (p *TAccountServiceUpdateTradePasswordAuthArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceUpdateTradePasswordAuthArgs_TradePasswordAuth_DEFAULT *TTradePasswordAuth
func (p *TAccountServiceUpdateTradePasswordAuthArgs) GetTradePasswordAuth() *TTradePasswordAuth {
  if !p.IsSetTradePasswordAuth() {
    return TAccountServiceUpdateTradePasswordAuthArgs_TradePasswordAuth_DEFAULT
  }
return p.TradePasswordAuth
}
func (p *TAccountServiceUpdateTradePasswordAuthArgs) IsSetTradePasswordAuth() bool {
  return p.TradePasswordAuth != nil
}

func (p *TAccountServiceUpdateTradePasswordAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateTradePasswordAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceUpdateTradePasswordAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.TradePasswordAuth = &TTradePasswordAuth{}
  if err := p.TradePasswordAuth.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TradePasswordAuth), err)
  }
  return nil
}

func (p *TAccountServiceUpdateTradePasswordAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateTradePasswordAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateTradePasswordAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateTradePasswordAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePasswordAuth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tradePasswordAuth: ", p), err) }
  if err := p.TradePasswordAuth.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TradePasswordAuth), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tradePasswordAuth: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateTradePasswordAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateTradePasswordAuthArgs(%+v)", *p)
}

type TAccountServiceUpdateTradePasswordAuthResult struct {
}

func NewTAccountServiceUpdateTradePasswordAuthResult() *TAccountServiceUpdateTradePasswordAuthResult {
  return &TAccountServiceUpdateTradePasswordAuthResult{}
}

func (p *TAccountServiceUpdateTradePasswordAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateTradePasswordAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateTradePasswordAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateTradePasswordAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateTradePasswordAuthResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Engine
type TAccountServiceInsertEngineArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Engine *TEngine `thrift:"engine,2" db:"engine" json:"engine"`
}

func NewTAccountServiceInsertEngineArgs() *TAccountServiceInsertEngineArgs {
  return &TAccountServiceInsertEngineArgs{}
}


func (p *TAccountServiceInsertEngineArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceInsertEngineArgs_Engine_DEFAULT *TEngine
func (p *TAccountServiceInsertEngineArgs) GetEngine() *TEngine {
  if !p.IsSetEngine() {
    return TAccountServiceInsertEngineArgs_Engine_DEFAULT
  }
return p.Engine
}
func (p *TAccountServiceInsertEngineArgs) IsSetEngine() bool {
  return p.Engine != nil
}

func (p *TAccountServiceInsertEngineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertEngineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceInsertEngineArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Engine = &TEngine{}
  if err := p.Engine.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Engine), err)
  }
  return nil
}

func (p *TAccountServiceInsertEngineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertEngine_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertEngineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceInsertEngineArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("engine", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:engine: ", p), err) }
  if err := p.Engine.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Engine), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:engine: ", p), err) }
  return err
}

func (p *TAccountServiceInsertEngineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertEngineArgs(%+v)", *p)
}

type TAccountServiceInsertEngineResult struct {
}

func NewTAccountServiceInsertEngineResult() *TAccountServiceInsertEngineResult {
  return &TAccountServiceInsertEngineResult{}
}

func (p *TAccountServiceInsertEngineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertEngineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertEngine_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertEngineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertEngineResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Engine
type TAccountServiceUpdateEngineArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Engine *TEngine `thrift:"engine,2" db:"engine" json:"engine"`
}

func NewTAccountServiceUpdateEngineArgs() *TAccountServiceUpdateEngineArgs {
  return &TAccountServiceUpdateEngineArgs{}
}


func (p *TAccountServiceUpdateEngineArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceUpdateEngineArgs_Engine_DEFAULT *TEngine
func (p *TAccountServiceUpdateEngineArgs) GetEngine() *TEngine {
  if !p.IsSetEngine() {
    return TAccountServiceUpdateEngineArgs_Engine_DEFAULT
  }
return p.Engine
}
func (p *TAccountServiceUpdateEngineArgs) IsSetEngine() bool {
  return p.Engine != nil
}

func (p *TAccountServiceUpdateEngineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateEngineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceUpdateEngineArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Engine = &TEngine{}
  if err := p.Engine.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Engine), err)
  }
  return nil
}

func (p *TAccountServiceUpdateEngineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateEngine_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateEngineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateEngineArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("engine", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:engine: ", p), err) }
  if err := p.Engine.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Engine), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:engine: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateEngineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateEngineArgs(%+v)", *p)
}

type TAccountServiceUpdateEngineResult struct {
}

func NewTAccountServiceUpdateEngineResult() *TAccountServiceUpdateEngineResult {
  return &TAccountServiceUpdateEngineResult{}
}

func (p *TAccountServiceUpdateEngineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateEngineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateEngine_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateEngineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateEngineResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TAccountServiceSelectKycByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTAccountServiceSelectKycByUserIdArgs() *TAccountServiceSelectKycByUserIdArgs {
  return &TAccountServiceSelectKycByUserIdArgs{}
}


func (p *TAccountServiceSelectKycByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceSelectKycByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TAccountServiceSelectKycByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectKycByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceSelectKycByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TAccountServiceSelectKycByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectKycByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectKycByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectKycByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectKycByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectKycByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectKycByUserIdResult struct {
  Success *TKyc `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectKycByUserIdResult() *TAccountServiceSelectKycByUserIdResult {
  return &TAccountServiceSelectKycByUserIdResult{}
}

var TAccountServiceSelectKycByUserIdResult_Success_DEFAULT *TKyc
func (p *TAccountServiceSelectKycByUserIdResult) GetSuccess() *TKyc {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectKycByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectKycByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectKycByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectKycByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TKyc{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectKycByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectKycByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectKycByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectKycByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectKycByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Kyc
type TAccountServiceInsertKycArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Kyc *TKyc `thrift:"kyc,2" db:"kyc" json:"kyc"`
}

func NewTAccountServiceInsertKycArgs() *TAccountServiceInsertKycArgs {
  return &TAccountServiceInsertKycArgs{}
}


func (p *TAccountServiceInsertKycArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceInsertKycArgs_Kyc_DEFAULT *TKyc
func (p *TAccountServiceInsertKycArgs) GetKyc() *TKyc {
  if !p.IsSetKyc() {
    return TAccountServiceInsertKycArgs_Kyc_DEFAULT
  }
return p.Kyc
}
func (p *TAccountServiceInsertKycArgs) IsSetKyc() bool {
  return p.Kyc != nil
}

func (p *TAccountServiceInsertKycArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertKycArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceInsertKycArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Kyc = &TKyc{}
  if err := p.Kyc.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Kyc), err)
  }
  return nil
}

func (p *TAccountServiceInsertKycArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertKyc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertKycArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceInsertKycArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kyc", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kyc: ", p), err) }
  if err := p.Kyc.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Kyc), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kyc: ", p), err) }
  return err
}

func (p *TAccountServiceInsertKycArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertKycArgs(%+v)", *p)
}

type TAccountServiceInsertKycResult struct {
}

func NewTAccountServiceInsertKycResult() *TAccountServiceInsertKycResult {
  return &TAccountServiceInsertKycResult{}
}

func (p *TAccountServiceInsertKycResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceInsertKycResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InsertKyc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceInsertKycResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceInsertKycResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Kyc
type TAccountServiceUpdateKycArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Kyc *TKyc `thrift:"kyc,2" db:"kyc" json:"kyc"`
}

func NewTAccountServiceUpdateKycArgs() *TAccountServiceUpdateKycArgs {
  return &TAccountServiceUpdateKycArgs{}
}


func (p *TAccountServiceUpdateKycArgs) GetTraceId() string {
  return p.TraceId
}
var TAccountServiceUpdateKycArgs_Kyc_DEFAULT *TKyc
func (p *TAccountServiceUpdateKycArgs) GetKyc() *TKyc {
  if !p.IsSetKyc() {
    return TAccountServiceUpdateKycArgs_Kyc_DEFAULT
  }
return p.Kyc
}
func (p *TAccountServiceUpdateKycArgs) IsSetKyc() bool {
  return p.Kyc != nil
}

func (p *TAccountServiceUpdateKycArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateKycArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceUpdateKycArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Kyc = &TKyc{}
  if err := p.Kyc.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Kyc), err)
  }
  return nil
}

func (p *TAccountServiceUpdateKycArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateKyc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateKycArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateKycArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kyc", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kyc: ", p), err) }
  if err := p.Kyc.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Kyc), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kyc: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateKycArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateKycArgs(%+v)", *p)
}

type TAccountServiceUpdateKycResult struct {
}

func NewTAccountServiceUpdateKycResult() *TAccountServiceUpdateKycResult {
  return &TAccountServiceUpdateKycResult{}
}

func (p *TAccountServiceUpdateKycResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateKycResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateKyc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateKycResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateKycResult(%+v)", *p)
}

// Attributes:
//  - UserName
type TAccountServiceSelectUserKycStatusByUserNameArgs struct {
  UserName string `thrift:"userName,1" db:"userName" json:"userName"`
}

func NewTAccountServiceSelectUserKycStatusByUserNameArgs() *TAccountServiceSelectUserKycStatusByUserNameArgs {
  return &TAccountServiceSelectUserKycStatusByUserNameArgs{}
}


func (p *TAccountServiceSelectUserKycStatusByUserNameArgs) GetUserName() string {
  return p.UserName
}
func (p *TAccountServiceSelectUserKycStatusByUserNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserKycStatusByUserNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *TAccountServiceSelectUserKycStatusByUserNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycStatusByUserName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserKycStatusByUserNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userName: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserKycStatusByUserNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserKycStatusByUserNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectUserKycStatusByUserNameResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectUserKycStatusByUserNameResult() *TAccountServiceSelectUserKycStatusByUserNameResult {
  return &TAccountServiceSelectUserKycStatusByUserNameResult{}
}

var TAccountServiceSelectUserKycStatusByUserNameResult_Success_DEFAULT string
func (p *TAccountServiceSelectUserKycStatusByUserNameResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectUserKycStatusByUserNameResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAccountServiceSelectUserKycStatusByUserNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectUserKycStatusByUserNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserKycStatusByUserNameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAccountServiceSelectUserKycStatusByUserNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycStatusByUserName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserKycStatusByUserNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectUserKycStatusByUserNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserKycStatusByUserNameResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TAccountServiceAddCaptchaErrorCountArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTAccountServiceAddCaptchaErrorCountArgs() *TAccountServiceAddCaptchaErrorCountArgs {
  return &TAccountServiceAddCaptchaErrorCountArgs{}
}


func (p *TAccountServiceAddCaptchaErrorCountArgs) GetUserID() string {
  return p.UserID
}
func (p *TAccountServiceAddCaptchaErrorCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceAddCaptchaErrorCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceAddCaptchaErrorCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addCaptchaErrorCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceAddCaptchaErrorCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceAddCaptchaErrorCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceAddCaptchaErrorCountArgs(%+v)", *p)
}

type TAccountServiceAddCaptchaErrorCountResult struct {
}

func NewTAccountServiceAddCaptchaErrorCountResult() *TAccountServiceAddCaptchaErrorCountResult {
  return &TAccountServiceAddCaptchaErrorCountResult{}
}

func (p *TAccountServiceAddCaptchaErrorCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceAddCaptchaErrorCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addCaptchaErrorCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceAddCaptchaErrorCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceAddCaptchaErrorCountResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TAccountServiceGetUserInfoArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTAccountServiceGetUserInfoArgs() *TAccountServiceGetUserInfoArgs {
  return &TAccountServiceGetUserInfoArgs{}
}


func (p *TAccountServiceGetUserInfoArgs) GetUserID() string {
  return p.UserID
}
func (p *TAccountServiceGetUserInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetUserInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceGetUserInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetUserInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceGetUserInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetUserInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceGetUserInfoResult struct {
  Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceGetUserInfoResult() *TAccountServiceGetUserInfoResult {
  return &TAccountServiceGetUserInfoResult{}
}

var TAccountServiceGetUserInfoResult_Success_DEFAULT *TUser
func (p *TAccountServiceGetUserInfoResult) GetSuccess() *TUser {
  if !p.IsSetSuccess() {
    return TAccountServiceGetUserInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceGetUserInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceGetUserInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetUserInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUser{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceGetUserInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetUserInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceGetUserInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetUserInfoResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TAccountServiceLockUserArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTAccountServiceLockUserArgs() *TAccountServiceLockUserArgs {
  return &TAccountServiceLockUserArgs{}
}


func (p *TAccountServiceLockUserArgs) GetUserID() string {
  return p.UserID
}
func (p *TAccountServiceLockUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceLockUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceLockUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lockUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceLockUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceLockUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceLockUserArgs(%+v)", *p)
}

type TAccountServiceLockUserResult struct {
}

func NewTAccountServiceLockUserResult() *TAccountServiceLockUserResult {
  return &TAccountServiceLockUserResult{}
}

func (p *TAccountServiceLockUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceLockUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("lockUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceLockUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceLockUserResult(%+v)", *p)
}

type TAccountServiceGetCurrencyInfoArgs struct {
}

func NewTAccountServiceGetCurrencyInfoArgs() *TAccountServiceGetCurrencyInfoArgs {
  return &TAccountServiceGetCurrencyInfoArgs{}
}

func (p *TAccountServiceGetCurrencyInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetCurrencyInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCurrencyInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetCurrencyInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetCurrencyInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceGetCurrencyInfoResult struct {
  Success []*TCurrency `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceGetCurrencyInfoResult() *TAccountServiceGetCurrencyInfoResult {
  return &TAccountServiceGetCurrencyInfoResult{}
}

var TAccountServiceGetCurrencyInfoResult_Success_DEFAULT []*TCurrency

func (p *TAccountServiceGetCurrencyInfoResult) GetSuccess() []*TCurrency {
  return p.Success
}
func (p *TAccountServiceGetCurrencyInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceGetCurrencyInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetCurrencyInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TCurrency, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem74 := &TCurrency{}
    if err := _elem74.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem74), err)
    }
    p.Success = append(p.Success, _elem74)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAccountServiceGetCurrencyInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCurrencyInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetCurrencyInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceGetCurrencyInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetCurrencyInfoResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TAccountServiceUnlockUserArgs struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTAccountServiceUnlockUserArgs() *TAccountServiceUnlockUserArgs {
  return &TAccountServiceUnlockUserArgs{}
}


func (p *TAccountServiceUnlockUserArgs) GetUserID() int32 {
  return p.UserID
}
func (p *TAccountServiceUnlockUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUnlockUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceUnlockUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unlockUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUnlockUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceUnlockUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUnlockUserArgs(%+v)", *p)
}

type TAccountServiceUnlockUserResult struct {
}

func NewTAccountServiceUnlockUserResult() *TAccountServiceUnlockUserResult {
  return &TAccountServiceUnlockUserResult{}
}

func (p *TAccountServiceUnlockUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUnlockUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unlockUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUnlockUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUnlockUserResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TAccountServiceGetEngineInfoByUserIdArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTAccountServiceGetEngineInfoByUserIdArgs() *TAccountServiceGetEngineInfoByUserIdArgs {
  return &TAccountServiceGetEngineInfoByUserIdArgs{}
}


func (p *TAccountServiceGetEngineInfoByUserIdArgs) GetUserID() string {
  return p.UserID
}
func (p *TAccountServiceGetEngineInfoByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetEngineInfoByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceGetEngineInfoByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEngineInfoByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetEngineInfoByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceGetEngineInfoByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetEngineInfoByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceGetEngineInfoByUserIdResult struct {
  Success *TEngine `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceGetEngineInfoByUserIdResult() *TAccountServiceGetEngineInfoByUserIdResult {
  return &TAccountServiceGetEngineInfoByUserIdResult{}
}

var TAccountServiceGetEngineInfoByUserIdResult_Success_DEFAULT *TEngine
func (p *TAccountServiceGetEngineInfoByUserIdResult) GetSuccess() *TEngine {
  if !p.IsSetSuccess() {
    return TAccountServiceGetEngineInfoByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceGetEngineInfoByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceGetEngineInfoByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceGetEngineInfoByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TEngine{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceGetEngineInfoByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEngineInfoByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceGetEngineInfoByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceGetEngineInfoByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceGetEngineInfoByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - AccountInfoUrl
type TAccountServiceCreateEngineAccountByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  AccountInfoUrl string `thrift:"accountInfoUrl,3" db:"accountInfoUrl" json:"accountInfoUrl"`
}

func NewTAccountServiceCreateEngineAccountByUserIdArgs() *TAccountServiceCreateEngineAccountByUserIdArgs {
  return &TAccountServiceCreateEngineAccountByUserIdArgs{}
}


func (p *TAccountServiceCreateEngineAccountByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs) GetAccountInfoUrl() string {
  return p.AccountInfoUrl
}
func (p *TAccountServiceCreateEngineAccountByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccountInfoUrl = v
}
  return nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createEngineAccountByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountInfoUrl", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountInfoUrl: ", p), err) }
  if err := oprot.WriteString(string(p.AccountInfoUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountInfoUrl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountInfoUrl: ", p), err) }
  return err
}

func (p *TAccountServiceCreateEngineAccountByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceCreateEngineAccountByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceCreateEngineAccountByUserIdResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceCreateEngineAccountByUserIdResult() *TAccountServiceCreateEngineAccountByUserIdResult {
  return &TAccountServiceCreateEngineAccountByUserIdResult{}
}

var TAccountServiceCreateEngineAccountByUserIdResult_Success_DEFAULT bool
func (p *TAccountServiceCreateEngineAccountByUserIdResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TAccountServiceCreateEngineAccountByUserIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAccountServiceCreateEngineAccountByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createEngineAccountByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceCreateEngineAccountByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceCreateEngineAccountByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceCreateEngineAccountByUserIdResult(%+v)", *p)
}

// Attributes:
//  - Email
//  - LoginPwd
type TAccountServiceUpdatePasswordByEmailArgs struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  LoginPwd string `thrift:"loginPwd,2" db:"loginPwd" json:"loginPwd"`
}

func NewTAccountServiceUpdatePasswordByEmailArgs() *TAccountServiceUpdatePasswordByEmailArgs {
  return &TAccountServiceUpdatePasswordByEmailArgs{}
}


func (p *TAccountServiceUpdatePasswordByEmailArgs) GetEmail() string {
  return p.Email
}

func (p *TAccountServiceUpdatePasswordByEmailArgs) GetLoginPwd() string {
  return p.LoginPwd
}
func (p *TAccountServiceUpdatePasswordByEmailArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdatePasswordByEmailArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TAccountServiceUpdatePasswordByEmailArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LoginPwd = v
}
  return nil
}

func (p *TAccountServiceUpdatePasswordByEmailArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updatePasswordByEmail_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdatePasswordByEmailArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *TAccountServiceUpdatePasswordByEmailArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginPwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginPwd: ", p), err) }
  if err := oprot.WriteString(string(p.LoginPwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginPwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginPwd: ", p), err) }
  return err
}

func (p *TAccountServiceUpdatePasswordByEmailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdatePasswordByEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceUpdatePasswordByEmailResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceUpdatePasswordByEmailResult() *TAccountServiceUpdatePasswordByEmailResult {
  return &TAccountServiceUpdatePasswordByEmailResult{}
}

var TAccountServiceUpdatePasswordByEmailResult_Success_DEFAULT int32
func (p *TAccountServiceUpdatePasswordByEmailResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TAccountServiceUpdatePasswordByEmailResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAccountServiceUpdatePasswordByEmailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceUpdatePasswordByEmailResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdatePasswordByEmailResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAccountServiceUpdatePasswordByEmailResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updatePasswordByEmail_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdatePasswordByEmailResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceUpdatePasswordByEmailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdatePasswordByEmailResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - AccountInfoUrl
type TAccountServiceCreateEngineAccountArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
  AccountInfoUrl string `thrift:"accountInfoUrl,2" db:"accountInfoUrl" json:"accountInfoUrl"`
}

func NewTAccountServiceCreateEngineAccountArgs() *TAccountServiceCreateEngineAccountArgs {
  return &TAccountServiceCreateEngineAccountArgs{}
}


func (p *TAccountServiceCreateEngineAccountArgs) GetUserID() string {
  return p.UserID
}

func (p *TAccountServiceCreateEngineAccountArgs) GetAccountInfoUrl() string {
  return p.AccountInfoUrl
}
func (p *TAccountServiceCreateEngineAccountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceCreateEngineAccountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceCreateEngineAccountArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountInfoUrl = v
}
  return nil
}

func (p *TAccountServiceCreateEngineAccountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createEngineAccount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceCreateEngineAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceCreateEngineAccountArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountInfoUrl", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountInfoUrl: ", p), err) }
  if err := oprot.WriteString(string(p.AccountInfoUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountInfoUrl (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountInfoUrl: ", p), err) }
  return err
}

func (p *TAccountServiceCreateEngineAccountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceCreateEngineAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceCreateEngineAccountResult struct {
  Success *TEngine `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceCreateEngineAccountResult() *TAccountServiceCreateEngineAccountResult {
  return &TAccountServiceCreateEngineAccountResult{}
}

var TAccountServiceCreateEngineAccountResult_Success_DEFAULT *TEngine
func (p *TAccountServiceCreateEngineAccountResult) GetSuccess() *TEngine {
  if !p.IsSetSuccess() {
    return TAccountServiceCreateEngineAccountResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceCreateEngineAccountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceCreateEngineAccountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceCreateEngineAccountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TEngine{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceCreateEngineAccountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createEngineAccount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceCreateEngineAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceCreateEngineAccountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceCreateEngineAccountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Username
type TAccountServiceSelectCodeUserByUsernameArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewTAccountServiceSelectCodeUserByUsernameArgs() *TAccountServiceSelectCodeUserByUsernameArgs {
  return &TAccountServiceSelectCodeUserByUsernameArgs{}
}


func (p *TAccountServiceSelectCodeUserByUsernameArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceSelectCodeUserByUsernameArgs) GetUsername() string {
  return p.Username
}
func (p *TAccountServiceSelectCodeUserByUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectCodeUserByUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceSelectCodeUserByUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TAccountServiceSelectCodeUserByUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectCodeUserByUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectCodeUserByUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectCodeUserByUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *TAccountServiceSelectCodeUserByUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectCodeUserByUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectCodeUserByUsernameResult struct {
  Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectCodeUserByUsernameResult() *TAccountServiceSelectCodeUserByUsernameResult {
  return &TAccountServiceSelectCodeUserByUsernameResult{}
}

var TAccountServiceSelectCodeUserByUsernameResult_Success_DEFAULT *TUser
func (p *TAccountServiceSelectCodeUserByUsernameResult) GetSuccess() *TUser {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectCodeUserByUsernameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectCodeUserByUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectCodeUserByUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectCodeUserByUsernameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUser{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectCodeUserByUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectCodeUserByUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectCodeUserByUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectCodeUserByUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectCodeUserByUsernameResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Password
type TAccountServiceUpdateLoginPasswordArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewTAccountServiceUpdateLoginPasswordArgs() *TAccountServiceUpdateLoginPasswordArgs {
  return &TAccountServiceUpdateLoginPasswordArgs{}
}


func (p *TAccountServiceUpdateLoginPasswordArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceUpdateLoginPasswordArgs) GetUserID() string {
  return p.UserID
}

func (p *TAccountServiceUpdateLoginPasswordArgs) GetPassword() string {
  return p.Password
}
func (p *TAccountServiceUpdateLoginPasswordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateLoginPasswordArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceUpdateLoginPasswordArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceUpdateLoginPasswordArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TAccountServiceUpdateLoginPasswordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLoginPassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateLoginPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateLoginPasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateLoginPasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateLoginPasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateLoginPasswordArgs(%+v)", *p)
}

type TAccountServiceUpdateLoginPasswordResult struct {
}

func NewTAccountServiceUpdateLoginPasswordResult() *TAccountServiceUpdateLoginPasswordResult {
  return &TAccountServiceUpdateLoginPasswordResult{}
}

func (p *TAccountServiceUpdateLoginPasswordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateLoginPasswordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLoginPassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateLoginPasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateLoginPasswordResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Password
type TAccountServiceCheckPasswordByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewTAccountServiceCheckPasswordByUserIdArgs() *TAccountServiceCheckPasswordByUserIdArgs {
  return &TAccountServiceCheckPasswordByUserIdArgs{}
}


func (p *TAccountServiceCheckPasswordByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceCheckPasswordByUserIdArgs) GetUserID() string {
  return p.UserID
}

func (p *TAccountServiceCheckPasswordByUserIdArgs) GetPassword() string {
  return p.Password
}
func (p *TAccountServiceCheckPasswordByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceCheckPasswordByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceCheckPasswordByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceCheckPasswordByUserIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TAccountServiceCheckPasswordByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPasswordByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceCheckPasswordByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceCheckPasswordByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceCheckPasswordByUserIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TAccountServiceCheckPasswordByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceCheckPasswordByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceCheckPasswordByUserIdResult struct {
  Success *TUserEntity `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceCheckPasswordByUserIdResult() *TAccountServiceCheckPasswordByUserIdResult {
  return &TAccountServiceCheckPasswordByUserIdResult{}
}

var TAccountServiceCheckPasswordByUserIdResult_Success_DEFAULT *TUserEntity
func (p *TAccountServiceCheckPasswordByUserIdResult) GetSuccess() *TUserEntity {
  if !p.IsSetSuccess() {
    return TAccountServiceCheckPasswordByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceCheckPasswordByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceCheckPasswordByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceCheckPasswordByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserEntity{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceCheckPasswordByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPasswordByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceCheckPasswordByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceCheckPasswordByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceCheckPasswordByUserIdResult(%+v)", *p)
}

// Attributes:
//  - UserId
type TAccountServiceSelectUserConfigStatusByUserIdArgs struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewTAccountServiceSelectUserConfigStatusByUserIdArgs() *TAccountServiceSelectUserConfigStatusByUserIdArgs {
  return &TAccountServiceSelectUserConfigStatusByUserIdArgs{}
}


func (p *TAccountServiceSelectUserConfigStatusByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TAccountServiceSelectUserConfigStatusByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserConfigStatusByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserConfigStatusByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectUserConfigStatusByUserIdResult struct {
  Success *TUserConfigStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectUserConfigStatusByUserIdResult() *TAccountServiceSelectUserConfigStatusByUserIdResult {
  return &TAccountServiceSelectUserConfigStatusByUserIdResult{}
}

var TAccountServiceSelectUserConfigStatusByUserIdResult_Success_DEFAULT *TUserConfigStatus
func (p *TAccountServiceSelectUserConfigStatusByUserIdResult) GetSuccess() *TUserConfigStatus {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectUserConfigStatusByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectUserConfigStatusByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserConfigStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserConfigStatusByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectUserConfigStatusByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserConfigStatusByUserIdResult(%+v)", *p)
}

// Attributes:
//  - UserId
type TAccountServiceSelectAccountBaseInfoByUserIdArgs struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewTAccountServiceSelectAccountBaseInfoByUserIdArgs() *TAccountServiceSelectAccountBaseInfoByUserIdArgs {
  return &TAccountServiceSelectAccountBaseInfoByUserIdArgs{}
}


func (p *TAccountServiceSelectAccountBaseInfoByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TAccountServiceSelectAccountBaseInfoByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectAccountBaseInfoByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectAccountBaseInfoByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectAccountBaseInfoByUserIdResult struct {
  Success *TAccountBaseInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectAccountBaseInfoByUserIdResult() *TAccountServiceSelectAccountBaseInfoByUserIdResult {
  return &TAccountServiceSelectAccountBaseInfoByUserIdResult{}
}

var TAccountServiceSelectAccountBaseInfoByUserIdResult_Success_DEFAULT *TAccountBaseInfo
func (p *TAccountServiceSelectAccountBaseInfoByUserIdResult) GetSuccess() *TAccountBaseInfo {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectAccountBaseInfoByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectAccountBaseInfoByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAccountBaseInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectAccountBaseInfoByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectAccountBaseInfoByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectAccountBaseInfoByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Mobile
type TAccountServiceUpdateMobileArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Mobile string `thrift:"mobile,3" db:"mobile" json:"mobile"`
}

func NewTAccountServiceUpdateMobileArgs() *TAccountServiceUpdateMobileArgs {
  return &TAccountServiceUpdateMobileArgs{}
}


func (p *TAccountServiceUpdateMobileArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceUpdateMobileArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TAccountServiceUpdateMobileArgs) GetMobile() string {
  return p.Mobile
}
func (p *TAccountServiceUpdateMobileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateMobileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceUpdateMobileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceUpdateMobileArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TAccountServiceUpdateMobileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateMobile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateMobileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateMobileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateMobileArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mobile: ", p), err) }
  return err
}

func (p *TAccountServiceUpdateMobileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateMobileArgs(%+v)", *p)
}

type TAccountServiceUpdateMobileResult struct {
}

func NewTAccountServiceUpdateMobileResult() *TAccountServiceUpdateMobileResult {
  return &TAccountServiceUpdateMobileResult{}
}

func (p *TAccountServiceUpdateMobileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceUpdateMobileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateMobile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceUpdateMobileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceUpdateMobileResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
type TAccountServiceRemoveMobileArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
}

func NewTAccountServiceRemoveMobileArgs() *TAccountServiceRemoveMobileArgs {
  return &TAccountServiceRemoveMobileArgs{}
}


func (p *TAccountServiceRemoveMobileArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceRemoveMobileArgs) GetUserID() int32 {
  return p.UserID
}
func (p *TAccountServiceRemoveMobileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceRemoveMobileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceRemoveMobileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceRemoveMobileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeMobile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceRemoveMobileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceRemoveMobileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceRemoveMobileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceRemoveMobileArgs(%+v)", *p)
}

type TAccountServiceRemoveMobileResult struct {
}

func NewTAccountServiceRemoveMobileResult() *TAccountServiceRemoveMobileResult {
  return &TAccountServiceRemoveMobileResult{}
}

func (p *TAccountServiceRemoveMobileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceRemoveMobileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeMobile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceRemoveMobileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceRemoveMobileResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
type TAccountServiceSelectUserByIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
}

func NewTAccountServiceSelectUserByIdArgs() *TAccountServiceSelectUserByIdArgs {
  return &TAccountServiceSelectUserByIdArgs{}
}


func (p *TAccountServiceSelectUserByIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceSelectUserByIdArgs) GetUserID() int32 {
  return p.UserID
}
func (p *TAccountServiceSelectUserByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceSelectUserByIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TAccountServiceSelectUserByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TAccountServiceSelectUserByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectUserByIdResult struct {
  Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectUserByIdResult() *TAccountServiceSelectUserByIdResult {
  return &TAccountServiceSelectUserByIdResult{}
}

var TAccountServiceSelectUserByIdResult_Success_DEFAULT *TUser
func (p *TAccountServiceSelectUserByIdResult) GetSuccess() *TUser {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectUserByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectUserByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectUserByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUser{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectUserByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectUserByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectUserByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectUserByIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Username
type TAccountServiceSelectTUserByUsernameArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewTAccountServiceSelectTUserByUsernameArgs() *TAccountServiceSelectTUserByUsernameArgs {
  return &TAccountServiceSelectTUserByUsernameArgs{}
}


func (p *TAccountServiceSelectTUserByUsernameArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TAccountServiceSelectTUserByUsernameArgs) GetUsername() string {
  return p.Username
}
func (p *TAccountServiceSelectTUserByUsernameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectTUserByUsernameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TAccountServiceSelectTUserByUsernameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TAccountServiceSelectTUserByUsernameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectTUserByUsername_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectTUserByUsernameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TAccountServiceSelectTUserByUsernameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *TAccountServiceSelectTUserByUsernameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectTUserByUsernameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountServiceSelectTUserByUsernameResult struct {
  Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountServiceSelectTUserByUsernameResult() *TAccountServiceSelectTUserByUsernameResult {
  return &TAccountServiceSelectTUserByUsernameResult{}
}

var TAccountServiceSelectTUserByUsernameResult_Success_DEFAULT *TUser
func (p *TAccountServiceSelectTUserByUsernameResult) GetSuccess() *TUser {
  if !p.IsSetSuccess() {
    return TAccountServiceSelectTUserByUsernameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TAccountServiceSelectTUserByUsernameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountServiceSelectTUserByUsernameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountServiceSelectTUserByUsernameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUser{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TAccountServiceSelectTUserByUsernameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SelectTUserByUsername_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountServiceSelectTUserByUsernameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountServiceSelectTUserByUsernameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountServiceSelectTUserByUsernameResult(%+v)", *p)
}


type TKycService interface {
  // Parameters:
  //  - UserKyc
  InsertIntoKyc(ctx context.Context, user_kyc *TUserKyc) (err error)
  // Parameters:
  //  - UserID
  SelectUserKycByUserId(ctx context.Context, user_id string) (r *TUserKyc, err error)
  // Parameters:
  //  - UserID
  //  - Status
  UpdateUserKycStatus(ctx context.Context, user_id string, status string) (err error)
  // Parameters:
  //  - UserKyc
  UpdateKycUserSelectiveByUserId(ctx context.Context, userKyc *TUserKyc) (err error)
  // Parameters:
  //  - IdNumber
  //  - UserId
  SelectUserKycByIdNumber(ctx context.Context, idNumber string, userId int32) (r *TUserKyc, err error)
  // Parameters:
  //  - PassportId
  //  - UserId
  SelectUserKycByPassportId(ctx context.Context, passportId string, userId int32) (r *TUserKyc, err error)
  // Parameters:
  //  - ID
  DeleteUserKycById(ctx context.Context, id int32) (err error)
}

type TKycServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTKycService instead
func NewTKycServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TKycServiceClient {
  return &TKycServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTKycService instead
func NewTKycServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TKycServiceClient {
  return &TKycServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTKycServiceClient(c thrift.TClient) *TKycServiceClient {
  return &TKycServiceClient{
    c: c,
  }
}

// Parameters:
//  - UserKyc
func (p *TKycServiceClient) InsertIntoKyc(ctx context.Context, user_kyc *TUserKyc) (err error) {
  var _args192 TKycServiceInsertIntoKycArgs
  _args192.UserKyc = user_kyc
  var _result193 TKycServiceInsertIntoKycResult
  if err = p.c.Call(ctx, "insertIntoKyc", &_args192, &_result193); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserID
func (p *TKycServiceClient) SelectUserKycByUserId(ctx context.Context, user_id string) (r *TUserKyc, err error) {
  var _args194 TKycServiceSelectUserKycByUserIdArgs
  _args194.UserID = user_id
  var _result195 TKycServiceSelectUserKycByUserIdResult
  if err = p.c.Call(ctx, "selectUserKycByUserId", &_args194, &_result195); err != nil {
    return
  }
  return _result195.GetSuccess(), nil
}

// Parameters:
//  - UserID
//  - Status
func (p *TKycServiceClient) UpdateUserKycStatus(ctx context.Context, user_id string, status string) (err error) {
  var _args196 TKycServiceUpdateUserKycStatusArgs
  _args196.UserID = user_id
  _args196.Status = status
  var _result197 TKycServiceUpdateUserKycStatusResult
  if err = p.c.Call(ctx, "updateUserKycStatus", &_args196, &_result197); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserKyc
func (p *TKycServiceClient) UpdateKycUserSelectiveByUserId(ctx context.Context, userKyc *TUserKyc) (err error) {
  var _args198 TKycServiceUpdateKycUserSelectiveByUserIdArgs
  _args198.UserKyc = userKyc
  var _result199 TKycServiceUpdateKycUserSelectiveByUserIdResult
  if err = p.c.Call(ctx, "updateKycUserSelectiveByUserId", &_args198, &_result199); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - IdNumber
//  - UserId
func (p *TKycServiceClient) SelectUserKycByIdNumber(ctx context.Context, idNumber string, userId int32) (r *TUserKyc, err error) {
  var _args200 TKycServiceSelectUserKycByIdNumberArgs
  _args200.IdNumber = idNumber
  _args200.UserId = userId
  var _result201 TKycServiceSelectUserKycByIdNumberResult
  if err = p.c.Call(ctx, "selectUserKycByIdNumber", &_args200, &_result201); err != nil {
    return
  }
  return _result201.GetSuccess(), nil
}

// Parameters:
//  - PassportId
//  - UserId
func (p *TKycServiceClient) SelectUserKycByPassportId(ctx context.Context, passportId string, userId int32) (r *TUserKyc, err error) {
  var _args202 TKycServiceSelectUserKycByPassportIdArgs
  _args202.PassportId = passportId
  _args202.UserId = userId
  var _result203 TKycServiceSelectUserKycByPassportIdResult
  if err = p.c.Call(ctx, "selectUserKycByPassportId", &_args202, &_result203); err != nil {
    return
  }
  return _result203.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *TKycServiceClient) DeleteUserKycById(ctx context.Context, id int32) (err error) {
  var _args204 TKycServiceDeleteUserKycByIdArgs
  _args204.ID = id
  var _result205 TKycServiceDeleteUserKycByIdResult
  if err = p.c.Call(ctx, "deleteUserKycById", &_args204, &_result205); err != nil {
    return
  }
  return nil
}

type TKycServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TKycService
}

func (p *TKycServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TKycServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TKycServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTKycServiceProcessor(handler TKycService) *TKycServiceProcessor {

  self206 := &TKycServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self206.processorMap["insertIntoKyc"] = &tKycServiceProcessorInsertIntoKyc{handler:handler}
  self206.processorMap["selectUserKycByUserId"] = &tKycServiceProcessorSelectUserKycByUserId{handler:handler}
  self206.processorMap["updateUserKycStatus"] = &tKycServiceProcessorUpdateUserKycStatus{handler:handler}
  self206.processorMap["updateKycUserSelectiveByUserId"] = &tKycServiceProcessorUpdateKycUserSelectiveByUserId{handler:handler}
  self206.processorMap["selectUserKycByIdNumber"] = &tKycServiceProcessorSelectUserKycByIdNumber{handler:handler}
  self206.processorMap["selectUserKycByPassportId"] = &tKycServiceProcessorSelectUserKycByPassportId{handler:handler}
  self206.processorMap["deleteUserKycById"] = &tKycServiceProcessorDeleteUserKycById{handler:handler}
return self206
}

func (p *TKycServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x207 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x207.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x207

}

type tKycServiceProcessorInsertIntoKyc struct {
  handler TKycService
}

func (p *tKycServiceProcessorInsertIntoKyc) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TKycServiceInsertIntoKycArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("insertIntoKyc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TKycServiceInsertIntoKycResult{}
  var err2 error
  if err2 = p.handler.InsertIntoKyc(ctx, args.UserKyc); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertIntoKyc: " + err2.Error())
    oprot.WriteMessageBegin("insertIntoKyc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("insertIntoKyc", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tKycServiceProcessorSelectUserKycByUserId struct {
  handler TKycService
}

func (p *tKycServiceProcessorSelectUserKycByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TKycServiceSelectUserKycByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserKycByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TKycServiceSelectUserKycByUserIdResult{}
var retval *TUserKyc
  var err2 error
  if retval, err2 = p.handler.SelectUserKycByUserId(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserKycByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectUserKycByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserKycByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tKycServiceProcessorUpdateUserKycStatus struct {
  handler TKycService
}

func (p *tKycServiceProcessorUpdateUserKycStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TKycServiceUpdateUserKycStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUserKycStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TKycServiceUpdateUserKycStatusResult{}
  var err2 error
  if err2 = p.handler.UpdateUserKycStatus(ctx, args.UserID, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserKycStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateUserKycStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateUserKycStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tKycServiceProcessorUpdateKycUserSelectiveByUserId struct {
  handler TKycService
}

func (p *tKycServiceProcessorUpdateKycUserSelectiveByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TKycServiceUpdateKycUserSelectiveByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateKycUserSelectiveByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TKycServiceUpdateKycUserSelectiveByUserIdResult{}
  var err2 error
  if err2 = p.handler.UpdateKycUserSelectiveByUserId(ctx, args.UserKyc); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateKycUserSelectiveByUserId: " + err2.Error())
    oprot.WriteMessageBegin("updateKycUserSelectiveByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateKycUserSelectiveByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tKycServiceProcessorSelectUserKycByIdNumber struct {
  handler TKycService
}

func (p *tKycServiceProcessorSelectUserKycByIdNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TKycServiceSelectUserKycByIdNumberArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserKycByIdNumber", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TKycServiceSelectUserKycByIdNumberResult{}
var retval *TUserKyc
  var err2 error
  if retval, err2 = p.handler.SelectUserKycByIdNumber(ctx, args.IdNumber, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserKycByIdNumber: " + err2.Error())
    oprot.WriteMessageBegin("selectUserKycByIdNumber", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserKycByIdNumber", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tKycServiceProcessorSelectUserKycByPassportId struct {
  handler TKycService
}

func (p *tKycServiceProcessorSelectUserKycByPassportId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TKycServiceSelectUserKycByPassportIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserKycByPassportId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TKycServiceSelectUserKycByPassportIdResult{}
var retval *TUserKyc
  var err2 error
  if retval, err2 = p.handler.SelectUserKycByPassportId(ctx, args.PassportId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserKycByPassportId: " + err2.Error())
    oprot.WriteMessageBegin("selectUserKycByPassportId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserKycByPassportId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tKycServiceProcessorDeleteUserKycById struct {
  handler TKycService
}

func (p *tKycServiceProcessorDeleteUserKycById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TKycServiceDeleteUserKycByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteUserKycById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TKycServiceDeleteUserKycByIdResult{}
  var err2 error
  if err2 = p.handler.DeleteUserKycById(ctx, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteUserKycById: " + err2.Error())
    oprot.WriteMessageBegin("deleteUserKycById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("deleteUserKycById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UserKyc
type TKycServiceInsertIntoKycArgs struct {
  UserKyc *TUserKyc `thrift:"user_kyc,1" db:"user_kyc" json:"user_kyc"`
}

func NewTKycServiceInsertIntoKycArgs() *TKycServiceInsertIntoKycArgs {
  return &TKycServiceInsertIntoKycArgs{}
}

var TKycServiceInsertIntoKycArgs_UserKyc_DEFAULT *TUserKyc
func (p *TKycServiceInsertIntoKycArgs) GetUserKyc() *TUserKyc {
  if !p.IsSetUserKyc() {
    return TKycServiceInsertIntoKycArgs_UserKyc_DEFAULT
  }
return p.UserKyc
}
func (p *TKycServiceInsertIntoKycArgs) IsSetUserKyc() bool {
  return p.UserKyc != nil
}

func (p *TKycServiceInsertIntoKycArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceInsertIntoKycArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UserKyc = &TUserKyc{}
  if err := p.UserKyc.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserKyc), err)
  }
  return nil
}

func (p *TKycServiceInsertIntoKycArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertIntoKyc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceInsertIntoKycArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_kyc", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_kyc: ", p), err) }
  if err := p.UserKyc.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserKyc), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_kyc: ", p), err) }
  return err
}

func (p *TKycServiceInsertIntoKycArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceInsertIntoKycArgs(%+v)", *p)
}

type TKycServiceInsertIntoKycResult struct {
}

func NewTKycServiceInsertIntoKycResult() *TKycServiceInsertIntoKycResult {
  return &TKycServiceInsertIntoKycResult{}
}

func (p *TKycServiceInsertIntoKycResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceInsertIntoKycResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertIntoKyc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceInsertIntoKycResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceInsertIntoKycResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TKycServiceSelectUserKycByUserIdArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTKycServiceSelectUserKycByUserIdArgs() *TKycServiceSelectUserKycByUserIdArgs {
  return &TKycServiceSelectUserKycByUserIdArgs{}
}


func (p *TKycServiceSelectUserKycByUserIdArgs) GetUserID() string {
  return p.UserID
}
func (p *TKycServiceSelectUserKycByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TKycServiceSelectUserKycByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceSelectUserKycByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TKycServiceSelectUserKycByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceSelectUserKycByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TKycServiceSelectUserKycByUserIdResult struct {
  Success *TUserKyc `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTKycServiceSelectUserKycByUserIdResult() *TKycServiceSelectUserKycByUserIdResult {
  return &TKycServiceSelectUserKycByUserIdResult{}
}

var TKycServiceSelectUserKycByUserIdResult_Success_DEFAULT *TUserKyc
func (p *TKycServiceSelectUserKycByUserIdResult) GetSuccess() *TUserKyc {
  if !p.IsSetSuccess() {
    return TKycServiceSelectUserKycByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TKycServiceSelectUserKycByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TKycServiceSelectUserKycByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserKyc{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceSelectUserKycByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TKycServiceSelectUserKycByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceSelectUserKycByUserIdResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Status
type TKycServiceUpdateUserKycStatusArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Status string `thrift:"status,2" db:"status" json:"status"`
}

func NewTKycServiceUpdateUserKycStatusArgs() *TKycServiceUpdateUserKycStatusArgs {
  return &TKycServiceUpdateUserKycStatusArgs{}
}


func (p *TKycServiceUpdateUserKycStatusArgs) GetUserID() string {
  return p.UserID
}

func (p *TKycServiceUpdateUserKycStatusArgs) GetStatus() string {
  return p.Status
}
func (p *TKycServiceUpdateUserKycStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceUpdateUserKycStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TKycServiceUpdateUserKycStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TKycServiceUpdateUserKycStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserKycStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceUpdateUserKycStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TKycServiceUpdateUserKycStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *TKycServiceUpdateUserKycStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceUpdateUserKycStatusArgs(%+v)", *p)
}

type TKycServiceUpdateUserKycStatusResult struct {
}

func NewTKycServiceUpdateUserKycStatusResult() *TKycServiceUpdateUserKycStatusResult {
  return &TKycServiceUpdateUserKycStatusResult{}
}

func (p *TKycServiceUpdateUserKycStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceUpdateUserKycStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserKycStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceUpdateUserKycStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceUpdateUserKycStatusResult(%+v)", *p)
}

// Attributes:
//  - UserKyc
type TKycServiceUpdateKycUserSelectiveByUserIdArgs struct {
  UserKyc *TUserKyc `thrift:"userKyc,1" db:"userKyc" json:"userKyc"`
}

func NewTKycServiceUpdateKycUserSelectiveByUserIdArgs() *TKycServiceUpdateKycUserSelectiveByUserIdArgs {
  return &TKycServiceUpdateKycUserSelectiveByUserIdArgs{}
}

var TKycServiceUpdateKycUserSelectiveByUserIdArgs_UserKyc_DEFAULT *TUserKyc
func (p *TKycServiceUpdateKycUserSelectiveByUserIdArgs) GetUserKyc() *TUserKyc {
  if !p.IsSetUserKyc() {
    return TKycServiceUpdateKycUserSelectiveByUserIdArgs_UserKyc_DEFAULT
  }
return p.UserKyc
}
func (p *TKycServiceUpdateKycUserSelectiveByUserIdArgs) IsSetUserKyc() bool {
  return p.UserKyc != nil
}

func (p *TKycServiceUpdateKycUserSelectiveByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceUpdateKycUserSelectiveByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.UserKyc = &TUserKyc{}
  if err := p.UserKyc.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserKyc), err)
  }
  return nil
}

func (p *TKycServiceUpdateKycUserSelectiveByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateKycUserSelectiveByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceUpdateKycUserSelectiveByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userKyc", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userKyc: ", p), err) }
  if err := p.UserKyc.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserKyc), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userKyc: ", p), err) }
  return err
}

func (p *TKycServiceUpdateKycUserSelectiveByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceUpdateKycUserSelectiveByUserIdArgs(%+v)", *p)
}

type TKycServiceUpdateKycUserSelectiveByUserIdResult struct {
}

func NewTKycServiceUpdateKycUserSelectiveByUserIdResult() *TKycServiceUpdateKycUserSelectiveByUserIdResult {
  return &TKycServiceUpdateKycUserSelectiveByUserIdResult{}
}

func (p *TKycServiceUpdateKycUserSelectiveByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceUpdateKycUserSelectiveByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateKycUserSelectiveByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceUpdateKycUserSelectiveByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceUpdateKycUserSelectiveByUserIdResult(%+v)", *p)
}

// Attributes:
//  - IdNumber
//  - UserId
type TKycServiceSelectUserKycByIdNumberArgs struct {
  IdNumber string `thrift:"idNumber,1" db:"idNumber" json:"idNumber"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTKycServiceSelectUserKycByIdNumberArgs() *TKycServiceSelectUserKycByIdNumberArgs {
  return &TKycServiceSelectUserKycByIdNumberArgs{}
}


func (p *TKycServiceSelectUserKycByIdNumberArgs) GetIdNumber() string {
  return p.IdNumber
}

func (p *TKycServiceSelectUserKycByIdNumberArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TKycServiceSelectUserKycByIdNumberArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByIdNumberArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IdNumber = v
}
  return nil
}

func (p *TKycServiceSelectUserKycByIdNumberArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TKycServiceSelectUserKycByIdNumberArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycByIdNumber_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceSelectUserKycByIdNumberArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idNumber", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:idNumber: ", p), err) }
  if err := oprot.WriteString(string(p.IdNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:idNumber: ", p), err) }
  return err
}

func (p *TKycServiceSelectUserKycByIdNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TKycServiceSelectUserKycByIdNumberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceSelectUserKycByIdNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TKycServiceSelectUserKycByIdNumberResult struct {
  Success *TUserKyc `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTKycServiceSelectUserKycByIdNumberResult() *TKycServiceSelectUserKycByIdNumberResult {
  return &TKycServiceSelectUserKycByIdNumberResult{}
}

var TKycServiceSelectUserKycByIdNumberResult_Success_DEFAULT *TUserKyc
func (p *TKycServiceSelectUserKycByIdNumberResult) GetSuccess() *TUserKyc {
  if !p.IsSetSuccess() {
    return TKycServiceSelectUserKycByIdNumberResult_Success_DEFAULT
  }
return p.Success
}
func (p *TKycServiceSelectUserKycByIdNumberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TKycServiceSelectUserKycByIdNumberResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByIdNumberResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserKyc{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByIdNumberResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycByIdNumber_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceSelectUserKycByIdNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TKycServiceSelectUserKycByIdNumberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceSelectUserKycByIdNumberResult(%+v)", *p)
}

// Attributes:
//  - PassportId
//  - UserId
type TKycServiceSelectUserKycByPassportIdArgs struct {
  PassportId string `thrift:"passportId,1" db:"passportId" json:"passportId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTKycServiceSelectUserKycByPassportIdArgs() *TKycServiceSelectUserKycByPassportIdArgs {
  return &TKycServiceSelectUserKycByPassportIdArgs{}
}


func (p *TKycServiceSelectUserKycByPassportIdArgs) GetPassportId() string {
  return p.PassportId
}

func (p *TKycServiceSelectUserKycByPassportIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TKycServiceSelectUserKycByPassportIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByPassportIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PassportId = v
}
  return nil
}

func (p *TKycServiceSelectUserKycByPassportIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TKycServiceSelectUserKycByPassportIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycByPassportId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceSelectUserKycByPassportIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:passportId: ", p), err) }
  if err := oprot.WriteString(string(p.PassportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:passportId: ", p), err) }
  return err
}

func (p *TKycServiceSelectUserKycByPassportIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TKycServiceSelectUserKycByPassportIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceSelectUserKycByPassportIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TKycServiceSelectUserKycByPassportIdResult struct {
  Success *TUserKyc `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTKycServiceSelectUserKycByPassportIdResult() *TKycServiceSelectUserKycByPassportIdResult {
  return &TKycServiceSelectUserKycByPassportIdResult{}
}

var TKycServiceSelectUserKycByPassportIdResult_Success_DEFAULT *TUserKyc
func (p *TKycServiceSelectUserKycByPassportIdResult) GetSuccess() *TUserKyc {
  if !p.IsSetSuccess() {
    return TKycServiceSelectUserKycByPassportIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TKycServiceSelectUserKycByPassportIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TKycServiceSelectUserKycByPassportIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByPassportIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserKyc{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TKycServiceSelectUserKycByPassportIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycByPassportId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceSelectUserKycByPassportIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TKycServiceSelectUserKycByPassportIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceSelectUserKycByPassportIdResult(%+v)", *p)
}

// Attributes:
//  - ID
type TKycServiceDeleteUserKycByIdArgs struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
}

func NewTKycServiceDeleteUserKycByIdArgs() *TKycServiceDeleteUserKycByIdArgs {
  return &TKycServiceDeleteUserKycByIdArgs{}
}


func (p *TKycServiceDeleteUserKycByIdArgs) GetID() int32 {
  return p.ID
}
func (p *TKycServiceDeleteUserKycByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceDeleteUserKycByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TKycServiceDeleteUserKycByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUserKycById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceDeleteUserKycByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TKycServiceDeleteUserKycByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceDeleteUserKycByIdArgs(%+v)", *p)
}

type TKycServiceDeleteUserKycByIdResult struct {
}

func NewTKycServiceDeleteUserKycByIdResult() *TKycServiceDeleteUserKycByIdResult {
  return &TKycServiceDeleteUserKycByIdResult{}
}

func (p *TKycServiceDeleteUserKycByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TKycServiceDeleteUserKycByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteUserKycById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TKycServiceDeleteUserKycByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TKycServiceDeleteUserKycByIdResult(%+v)", *p)
}


type TDepositeWithdrewService interface {
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Lang
  SearchWithdrawByUserId(ctx context.Context, traceId string, user_id int32, lang string) (r []*TDepositWithdraw, err error)
  // Parameters:
  //  - ID
  //  - Language
  SearchWithdrawById(ctx context.Context, id int32, language string) (r *TDepositWithdraw, err error)
  // Parameters:
  //  - UserID
  //  - Type
  //  - Currency
  GetDepositAddress(ctx context.Context, user_id int32, type_a1 string, currency string) (r string, err error)
  // Parameters:
  //  - UserID
  //  - Key
  GetUserConfig(ctx context.Context, user_id int32, key string) (r string, err error)
  // Parameters:
  //  - Symbol
  CheckCurrencyExistOrNot(ctx context.Context, symbol string) (r *TCurrency, err error)
  // Parameters:
  //  - UserID
  GetEngineByUserId(ctx context.Context, user_id int32) (r *TEngine, err error)
  // Parameters:
  //  - UserID
  //  - Currency
  //  - Type
  //  - Confirmations
  FindAll(ctx context.Context, user_id int32, currency string, type_a1 string, confirmations string) (r []*TDepositWithdraw, err error)
  // Parameters:
  //  - UserID
  //  - Type
  //  - Curreny
  //  - Amount
  //  - Fee
  //  - Address
  //  - Status
  InsertDepositeWithDraw(ctx context.Context, user_id int32, type_a1 string, curreny string, amount string, fee string, address string, status int32) (r int32, err error)
  // Parameters:
  //  - UserID
  //  - Password
  FinancingPasswordVerify(ctx context.Context, user_id int32, password string) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - WithdrawToken
  SelectMessage(ctx context.Context, traceId string, user_id int32, withdrawToken string) (r *TWithdrawMessage, err error)
  // Parameters:
  //  - TraceId
  //  - Amount
  //  - Address
  //  - Symbol
  //  - UserID
  //  - WithdrawToken
  InsertMessage(ctx context.Context, traceId string, amount string, address string, symbol string, user_id int32, withdrawToken string) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - WithdrawToken
  DeleteMessage(ctx context.Context, traceId string, user_id int32, withdrawToken string) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Symbol
  FindFreezeRecord(ctx context.Context, traceId string, user_id int32, symbol string) (r []*TDepositWithdraw, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Currency
  SelectWithdrawTransactional(ctx context.Context, traceId string, user_id int32, currency string) (r *TWithdrawTransactional, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Currency
  InsertWithdrawTransactional(ctx context.Context, traceId string, user_id int32, currency string) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Currency
  DeleteWithdrawTransactional(ctx context.Context, traceId string, user_id int32, currency string) (err error)
}

type TDepositeWithdrewServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTDepositeWithdrewService instead
func NewTDepositeWithdrewServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDepositeWithdrewServiceClient {
  return &TDepositeWithdrewServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTDepositeWithdrewService instead
func NewTDepositeWithdrewServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDepositeWithdrewServiceClient {
  return &TDepositeWithdrewServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDepositeWithdrewServiceClient(c thrift.TClient) *TDepositeWithdrewServiceClient {
  return &TDepositeWithdrewServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - UserID
//  - Lang
func (p *TDepositeWithdrewServiceClient) SearchWithdrawByUserId(ctx context.Context, traceId string, user_id int32, lang string) (r []*TDepositWithdraw, err error) {
  var _args228 TDepositeWithdrewServiceSearchWithdrawByUserIdArgs
  _args228.TraceId = traceId
  _args228.UserID = user_id
  _args228.Lang = lang
  var _result229 TDepositeWithdrewServiceSearchWithdrawByUserIdResult
  if err = p.c.Call(ctx, "searchWithdrawByUserId", &_args228, &_result229); err != nil {
    return
  }
  return _result229.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Language
func (p *TDepositeWithdrewServiceClient) SearchWithdrawById(ctx context.Context, id int32, language string) (r *TDepositWithdraw, err error) {
  var _args230 TDepositeWithdrewServiceSearchWithdrawByIdArgs
  _args230.ID = id
  _args230.Language = language
  var _result231 TDepositeWithdrewServiceSearchWithdrawByIdResult
  if err = p.c.Call(ctx, "searchWithdrawById", &_args230, &_result231); err != nil {
    return
  }
  return _result231.GetSuccess(), nil
}

// Parameters:
//  - UserID
//  - Type
//  - Currency
func (p *TDepositeWithdrewServiceClient) GetDepositAddress(ctx context.Context, user_id int32, type_a1 string, currency string) (r string, err error) {
  var _args232 TDepositeWithdrewServiceGetDepositAddressArgs
  _args232.UserID = user_id
  _args232.Type = type_a1
  _args232.Currency = currency
  var _result233 TDepositeWithdrewServiceGetDepositAddressResult
  if err = p.c.Call(ctx, "getDepositAddress", &_args232, &_result233); err != nil {
    return
  }
  return _result233.GetSuccess(), nil
}

// Parameters:
//  - UserID
//  - Key
func (p *TDepositeWithdrewServiceClient) GetUserConfig(ctx context.Context, user_id int32, key string) (r string, err error) {
  var _args234 TDepositeWithdrewServiceGetUserConfigArgs
  _args234.UserID = user_id
  _args234.Key = key
  var _result235 TDepositeWithdrewServiceGetUserConfigResult
  if err = p.c.Call(ctx, "getUserConfig", &_args234, &_result235); err != nil {
    return
  }
  return _result235.GetSuccess(), nil
}

// Parameters:
//  - Symbol
func (p *TDepositeWithdrewServiceClient) CheckCurrencyExistOrNot(ctx context.Context, symbol string) (r *TCurrency, err error) {
  var _args236 TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs
  _args236.Symbol = symbol
  var _result237 TDepositeWithdrewServiceCheckCurrencyExistOrNotResult
  if err = p.c.Call(ctx, "checkCurrencyExistOrNot", &_args236, &_result237); err != nil {
    return
  }
  return _result237.GetSuccess(), nil
}

// Parameters:
//  - UserID
func (p *TDepositeWithdrewServiceClient) GetEngineByUserId(ctx context.Context, user_id int32) (r *TEngine, err error) {
  var _args238 TDepositeWithdrewServiceGetEngineByUserIdArgs
  _args238.UserID = user_id
  var _result239 TDepositeWithdrewServiceGetEngineByUserIdResult
  if err = p.c.Call(ctx, "getEngineByUserId", &_args238, &_result239); err != nil {
    return
  }
  return _result239.GetSuccess(), nil
}

// Parameters:
//  - UserID
//  - Currency
//  - Type
//  - Confirmations
func (p *TDepositeWithdrewServiceClient) FindAll(ctx context.Context, user_id int32, currency string, type_a1 string, confirmations string) (r []*TDepositWithdraw, err error) {
  var _args240 TDepositeWithdrewServiceFindAllArgs
  _args240.UserID = user_id
  _args240.Currency = currency
  _args240.Type = type_a1
  _args240.Confirmations = confirmations
  var _result241 TDepositeWithdrewServiceFindAllResult
  if err = p.c.Call(ctx, "findAll", &_args240, &_result241); err != nil {
    return
  }
  return _result241.GetSuccess(), nil
}

// Parameters:
//  - UserID
//  - Type
//  - Curreny
//  - Amount
//  - Fee
//  - Address
//  - Status
func (p *TDepositeWithdrewServiceClient) InsertDepositeWithDraw(ctx context.Context, user_id int32, type_a1 string, curreny string, amount string, fee string, address string, status int32) (r int32, err error) {
  var _args242 TDepositeWithdrewServiceInsertDepositeWithDrawArgs
  _args242.UserID = user_id
  _args242.Type = type_a1
  _args242.Curreny = curreny
  _args242.Amount = amount
  _args242.Fee = fee
  _args242.Address = address
  _args242.Status = status
  var _result243 TDepositeWithdrewServiceInsertDepositeWithDrawResult
  if err = p.c.Call(ctx, "insertDepositeWithDraw", &_args242, &_result243); err != nil {
    return
  }
  return _result243.GetSuccess(), nil
}

// Parameters:
//  - UserID
//  - Password
func (p *TDepositeWithdrewServiceClient) FinancingPasswordVerify(ctx context.Context, user_id int32, password string) (r bool, err error) {
  var _args244 TDepositeWithdrewServiceFinancingPasswordVerifyArgs
  _args244.UserID = user_id
  _args244.Password = password
  var _result245 TDepositeWithdrewServiceFinancingPasswordVerifyResult
  if err = p.c.Call(ctx, "financingPasswordVerify", &_args244, &_result245); err != nil {
    return
  }
  return _result245.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - WithdrawToken
func (p *TDepositeWithdrewServiceClient) SelectMessage(ctx context.Context, traceId string, user_id int32, withdrawToken string) (r *TWithdrawMessage, err error) {
  var _args246 TDepositeWithdrewServiceSelectMessageArgs
  _args246.TraceId = traceId
  _args246.UserID = user_id
  _args246.WithdrawToken = withdrawToken
  var _result247 TDepositeWithdrewServiceSelectMessageResult
  if err = p.c.Call(ctx, "selectMessage", &_args246, &_result247); err != nil {
    return
  }
  return _result247.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Amount
//  - Address
//  - Symbol
//  - UserID
//  - WithdrawToken
func (p *TDepositeWithdrewServiceClient) InsertMessage(ctx context.Context, traceId string, amount string, address string, symbol string, user_id int32, withdrawToken string) (err error) {
  var _args248 TDepositeWithdrewServiceInsertMessageArgs
  _args248.TraceId = traceId
  _args248.Amount = amount
  _args248.Address = address
  _args248.Symbol = symbol
  _args248.UserID = user_id
  _args248.WithdrawToken = withdrawToken
  var _result249 TDepositeWithdrewServiceInsertMessageResult
  if err = p.c.Call(ctx, "insertMessage", &_args248, &_result249); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - WithdrawToken
func (p *TDepositeWithdrewServiceClient) DeleteMessage(ctx context.Context, traceId string, user_id int32, withdrawToken string) (err error) {
  var _args250 TDepositeWithdrewServiceDeleteMessageArgs
  _args250.TraceId = traceId
  _args250.UserID = user_id
  _args250.WithdrawToken = withdrawToken
  var _result251 TDepositeWithdrewServiceDeleteMessageResult
  if err = p.c.Call(ctx, "deleteMessage", &_args250, &_result251); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Symbol
func (p *TDepositeWithdrewServiceClient) FindFreezeRecord(ctx context.Context, traceId string, user_id int32, symbol string) (r []*TDepositWithdraw, err error) {
  var _args252 TDepositeWithdrewServiceFindFreezeRecordArgs
  _args252.TraceId = traceId
  _args252.UserID = user_id
  _args252.Symbol = symbol
  var _result253 TDepositeWithdrewServiceFindFreezeRecordResult
  if err = p.c.Call(ctx, "findFreezeRecord", &_args252, &_result253); err != nil {
    return
  }
  return _result253.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Currency
func (p *TDepositeWithdrewServiceClient) SelectWithdrawTransactional(ctx context.Context, traceId string, user_id int32, currency string) (r *TWithdrawTransactional, err error) {
  var _args254 TDepositeWithdrewServiceSelectWithdrawTransactionalArgs
  _args254.TraceId = traceId
  _args254.UserID = user_id
  _args254.Currency = currency
  var _result255 TDepositeWithdrewServiceSelectWithdrawTransactionalResult
  if err = p.c.Call(ctx, "selectWithdrawTransactional", &_args254, &_result255); err != nil {
    return
  }
  return _result255.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Currency
func (p *TDepositeWithdrewServiceClient) InsertWithdrawTransactional(ctx context.Context, traceId string, user_id int32, currency string) (err error) {
  var _args256 TDepositeWithdrewServiceInsertWithdrawTransactionalArgs
  _args256.TraceId = traceId
  _args256.UserID = user_id
  _args256.Currency = currency
  var _result257 TDepositeWithdrewServiceInsertWithdrawTransactionalResult
  if err = p.c.Call(ctx, "insertWithdrawTransactional", &_args256, &_result257); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Currency
func (p *TDepositeWithdrewServiceClient) DeleteWithdrawTransactional(ctx context.Context, traceId string, user_id int32, currency string) (err error) {
  var _args258 TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs
  _args258.TraceId = traceId
  _args258.UserID = user_id
  _args258.Currency = currency
  var _result259 TDepositeWithdrewServiceDeleteWithdrawTransactionalResult
  if err = p.c.Call(ctx, "deleteWithdrawTransactional", &_args258, &_result259); err != nil {
    return
  }
  return nil
}

type TDepositeWithdrewServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDepositeWithdrewService
}

func (p *TDepositeWithdrewServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDepositeWithdrewServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDepositeWithdrewServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDepositeWithdrewServiceProcessor(handler TDepositeWithdrewService) *TDepositeWithdrewServiceProcessor {

  self260 := &TDepositeWithdrewServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self260.processorMap["searchWithdrawByUserId"] = &tDepositeWithdrewServiceProcessorSearchWithdrawByUserId{handler:handler}
  self260.processorMap["searchWithdrawById"] = &tDepositeWithdrewServiceProcessorSearchWithdrawById{handler:handler}
  self260.processorMap["getDepositAddress"] = &tDepositeWithdrewServiceProcessorGetDepositAddress{handler:handler}
  self260.processorMap["getUserConfig"] = &tDepositeWithdrewServiceProcessorGetUserConfig{handler:handler}
  self260.processorMap["checkCurrencyExistOrNot"] = &tDepositeWithdrewServiceProcessorCheckCurrencyExistOrNot{handler:handler}
  self260.processorMap["getEngineByUserId"] = &tDepositeWithdrewServiceProcessorGetEngineByUserId{handler:handler}
  self260.processorMap["findAll"] = &tDepositeWithdrewServiceProcessorFindAll{handler:handler}
  self260.processorMap["insertDepositeWithDraw"] = &tDepositeWithdrewServiceProcessorInsertDepositeWithDraw{handler:handler}
  self260.processorMap["financingPasswordVerify"] = &tDepositeWithdrewServiceProcessorFinancingPasswordVerify{handler:handler}
  self260.processorMap["selectMessage"] = &tDepositeWithdrewServiceProcessorSelectMessage{handler:handler}
  self260.processorMap["insertMessage"] = &tDepositeWithdrewServiceProcessorInsertMessage{handler:handler}
  self260.processorMap["deleteMessage"] = &tDepositeWithdrewServiceProcessorDeleteMessage{handler:handler}
  self260.processorMap["findFreezeRecord"] = &tDepositeWithdrewServiceProcessorFindFreezeRecord{handler:handler}
  self260.processorMap["selectWithdrawTransactional"] = &tDepositeWithdrewServiceProcessorSelectWithdrawTransactional{handler:handler}
  self260.processorMap["insertWithdrawTransactional"] = &tDepositeWithdrewServiceProcessorInsertWithdrawTransactional{handler:handler}
  self260.processorMap["deleteWithdrawTransactional"] = &tDepositeWithdrewServiceProcessorDeleteWithdrawTransactional{handler:handler}
return self260
}

func (p *TDepositeWithdrewServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x261 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x261.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x261

}

type tDepositeWithdrewServiceProcessorSearchWithdrawByUserId struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorSearchWithdrawByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceSearchWithdrawByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("searchWithdrawByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceSearchWithdrawByUserIdResult{}
var retval []*TDepositWithdraw
  var err2 error
  if retval, err2 = p.handler.SearchWithdrawByUserId(ctx, args.TraceId, args.UserID, args.Lang); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchWithdrawByUserId: " + err2.Error())
    oprot.WriteMessageBegin("searchWithdrawByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("searchWithdrawByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorSearchWithdrawById struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorSearchWithdrawById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceSearchWithdrawByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("searchWithdrawById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceSearchWithdrawByIdResult{}
var retval *TDepositWithdraw
  var err2 error
  if retval, err2 = p.handler.SearchWithdrawById(ctx, args.ID, args.Language); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchWithdrawById: " + err2.Error())
    oprot.WriteMessageBegin("searchWithdrawById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("searchWithdrawById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorGetDepositAddress struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorGetDepositAddress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceGetDepositAddressArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getDepositAddress", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceGetDepositAddressResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetDepositAddress(ctx, args.UserID, args.Type, args.Currency); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDepositAddress: " + err2.Error())
    oprot.WriteMessageBegin("getDepositAddress", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getDepositAddress", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorGetUserConfig struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorGetUserConfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceGetUserConfigArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceGetUserConfigResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetUserConfig(ctx, args.UserID, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserConfig: " + err2.Error())
    oprot.WriteMessageBegin("getUserConfig", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getUserConfig", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorCheckCurrencyExistOrNot struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorCheckCurrencyExistOrNot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkCurrencyExistOrNot", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceCheckCurrencyExistOrNotResult{}
var retval *TCurrency
  var err2 error
  if retval, err2 = p.handler.CheckCurrencyExistOrNot(ctx, args.Symbol); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkCurrencyExistOrNot: " + err2.Error())
    oprot.WriteMessageBegin("checkCurrencyExistOrNot", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("checkCurrencyExistOrNot", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorGetEngineByUserId struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorGetEngineByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceGetEngineByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getEngineByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceGetEngineByUserIdResult{}
var retval *TEngine
  var err2 error
  if retval, err2 = p.handler.GetEngineByUserId(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEngineByUserId: " + err2.Error())
    oprot.WriteMessageBegin("getEngineByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getEngineByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorFindAll struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorFindAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceFindAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceFindAllResult{}
var retval []*TDepositWithdraw
  var err2 error
  if retval, err2 = p.handler.FindAll(ctx, args.UserID, args.Currency, args.Type, args.Confirmations); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAll: " + err2.Error())
    oprot.WriteMessageBegin("findAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorInsertDepositeWithDraw struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorInsertDepositeWithDraw) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceInsertDepositeWithDrawArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("insertDepositeWithDraw", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceInsertDepositeWithDrawResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.InsertDepositeWithDraw(ctx, args.UserID, args.Type, args.Curreny, args.Amount, args.Fee, args.Address, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertDepositeWithDraw: " + err2.Error())
    oprot.WriteMessageBegin("insertDepositeWithDraw", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("insertDepositeWithDraw", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorFinancingPasswordVerify struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorFinancingPasswordVerify) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceFinancingPasswordVerifyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("financingPasswordVerify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceFinancingPasswordVerifyResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.FinancingPasswordVerify(ctx, args.UserID, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing financingPasswordVerify: " + err2.Error())
    oprot.WriteMessageBegin("financingPasswordVerify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("financingPasswordVerify", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorSelectMessage struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorSelectMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceSelectMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceSelectMessageResult{}
var retval *TWithdrawMessage
  var err2 error
  if retval, err2 = p.handler.SelectMessage(ctx, args.TraceId, args.UserID, args.WithdrawToken); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectMessage: " + err2.Error())
    oprot.WriteMessageBegin("selectMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorInsertMessage struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorInsertMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceInsertMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("insertMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceInsertMessageResult{}
  var err2 error
  if err2 = p.handler.InsertMessage(ctx, args.TraceId, args.Amount, args.Address, args.Symbol, args.UserID, args.WithdrawToken); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertMessage: " + err2.Error())
    oprot.WriteMessageBegin("insertMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("insertMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorDeleteMessage struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorDeleteMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceDeleteMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceDeleteMessageResult{}
  var err2 error
  if err2 = p.handler.DeleteMessage(ctx, args.TraceId, args.UserID, args.WithdrawToken); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteMessage: " + err2.Error())
    oprot.WriteMessageBegin("deleteMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("deleteMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorFindFreezeRecord struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorFindFreezeRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceFindFreezeRecordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findFreezeRecord", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceFindFreezeRecordResult{}
var retval []*TDepositWithdraw
  var err2 error
  if retval, err2 = p.handler.FindFreezeRecord(ctx, args.TraceId, args.UserID, args.Symbol); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findFreezeRecord: " + err2.Error())
    oprot.WriteMessageBegin("findFreezeRecord", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findFreezeRecord", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorSelectWithdrawTransactional struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorSelectWithdrawTransactional) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceSelectWithdrawTransactionalArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectWithdrawTransactional", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceSelectWithdrawTransactionalResult{}
var retval *TWithdrawTransactional
  var err2 error
  if retval, err2 = p.handler.SelectWithdrawTransactional(ctx, args.TraceId, args.UserID, args.Currency); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectWithdrawTransactional: " + err2.Error())
    oprot.WriteMessageBegin("selectWithdrawTransactional", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectWithdrawTransactional", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorInsertWithdrawTransactional struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorInsertWithdrawTransactional) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceInsertWithdrawTransactionalArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("insertWithdrawTransactional", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceInsertWithdrawTransactionalResult{}
  var err2 error
  if err2 = p.handler.InsertWithdrawTransactional(ctx, args.TraceId, args.UserID, args.Currency); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertWithdrawTransactional: " + err2.Error())
    oprot.WriteMessageBegin("insertWithdrawTransactional", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("insertWithdrawTransactional", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDepositeWithdrewServiceProcessorDeleteWithdrawTransactional struct {
  handler TDepositeWithdrewService
}

func (p *tDepositeWithdrewServiceProcessorDeleteWithdrawTransactional) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteWithdrawTransactional", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDepositeWithdrewServiceDeleteWithdrawTransactionalResult{}
  var err2 error
  if err2 = p.handler.DeleteWithdrawTransactional(ctx, args.TraceId, args.UserID, args.Currency); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteWithdrawTransactional: " + err2.Error())
    oprot.WriteMessageBegin("deleteWithdrawTransactional", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("deleteWithdrawTransactional", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - UserID
//  - Lang
type TDepositeWithdrewServiceSearchWithdrawByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Lang string `thrift:"lang,3" db:"lang" json:"lang"`
}

func NewTDepositeWithdrewServiceSearchWithdrawByUserIdArgs() *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs {
  return &TDepositeWithdrewServiceSearchWithdrawByUserIdArgs{}
}


func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) GetLang() string {
  return p.Lang
}
func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchWithdrawByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lang: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceSearchWithdrawByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceSearchWithdrawByUserIdResult struct {
  Success []*TDepositWithdraw `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceSearchWithdrawByUserIdResult() *TDepositeWithdrewServiceSearchWithdrawByUserIdResult {
  return &TDepositeWithdrewServiceSearchWithdrawByUserIdResult{}
}

var TDepositeWithdrewServiceSearchWithdrawByUserIdResult_Success_DEFAULT []*TDepositWithdraw

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdResult) GetSuccess() []*TDepositWithdraw {
  return p.Success
}
func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdraw, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem262 := &TDepositWithdraw{}
    if err := _elem262.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem262), err)
    }
    p.Success = append(p.Success, _elem262)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchWithdrawByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceSearchWithdrawByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceSearchWithdrawByUserIdResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Language
type TDepositeWithdrewServiceSearchWithdrawByIdArgs struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Language string `thrift:"language,2" db:"language" json:"language"`
}

func NewTDepositeWithdrewServiceSearchWithdrawByIdArgs() *TDepositeWithdrewServiceSearchWithdrawByIdArgs {
  return &TDepositeWithdrewServiceSearchWithdrawByIdArgs{}
}


func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs) GetID() int32 {
  return p.ID
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs) GetLanguage() string {
  return p.Language
}
func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchWithdrawById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("language", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
  if err := oprot.WriteString(string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceSearchWithdrawByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceSearchWithdrawByIdResult struct {
  Success *TDepositWithdraw `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceSearchWithdrawByIdResult() *TDepositeWithdrewServiceSearchWithdrawByIdResult {
  return &TDepositeWithdrewServiceSearchWithdrawByIdResult{}
}

var TDepositeWithdrewServiceSearchWithdrawByIdResult_Success_DEFAULT *TDepositWithdraw
func (p *TDepositeWithdrewServiceSearchWithdrawByIdResult) GetSuccess() *TDepositWithdraw {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceSearchWithdrawByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositeWithdrewServiceSearchWithdrawByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDepositWithdraw{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchWithdrawById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceSearchWithdrawByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceSearchWithdrawByIdResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Type
//  - Currency
type TDepositeWithdrewServiceGetDepositAddressArgs struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Type string `thrift:"type,2" db:"type" json:"type"`
  Currency string `thrift:"currency,3" db:"currency" json:"currency"`
}

func NewTDepositeWithdrewServiceGetDepositAddressArgs() *TDepositeWithdrewServiceGetDepositAddressArgs {
  return &TDepositeWithdrewServiceGetDepositAddressArgs{}
}


func (p *TDepositeWithdrewServiceGetDepositAddressArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs) GetType() string {
  return p.Type
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs) GetCurrency() string {
  return p.Currency
}
func (p *TDepositeWithdrewServiceGetDepositAddressArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDepositAddress_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currency: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceGetDepositAddressArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceGetDepositAddressArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceGetDepositAddressResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceGetDepositAddressResult() *TDepositeWithdrewServiceGetDepositAddressResult {
  return &TDepositeWithdrewServiceGetDepositAddressResult{}
}

var TDepositeWithdrewServiceGetDepositAddressResult_Success_DEFAULT string
func (p *TDepositeWithdrewServiceGetDepositAddressResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceGetDepositAddressResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositeWithdrewServiceGetDepositAddressResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDepositAddress_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceGetDepositAddressResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceGetDepositAddressResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceGetDepositAddressResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Key
type TDepositeWithdrewServiceGetUserConfigArgs struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Key string `thrift:"key,2" db:"key" json:"key"`
}

func NewTDepositeWithdrewServiceGetUserConfigArgs() *TDepositeWithdrewServiceGetUserConfigArgs {
  return &TDepositeWithdrewServiceGetUserConfigArgs{}
}


func (p *TDepositeWithdrewServiceGetUserConfigArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceGetUserConfigArgs) GetKey() string {
  return p.Key
}
func (p *TDepositeWithdrewServiceGetUserConfigArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceGetUserConfigArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceGetUserConfigArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TDepositeWithdrewServiceGetUserConfigArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserConfig_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceGetUserConfigArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceGetUserConfigArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceGetUserConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceGetUserConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceGetUserConfigResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceGetUserConfigResult() *TDepositeWithdrewServiceGetUserConfigResult {
  return &TDepositeWithdrewServiceGetUserConfigResult{}
}

var TDepositeWithdrewServiceGetUserConfigResult_Success_DEFAULT string
func (p *TDepositeWithdrewServiceGetUserConfigResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceGetUserConfigResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositeWithdrewServiceGetUserConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceGetUserConfigResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceGetUserConfigResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositeWithdrewServiceGetUserConfigResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserConfig_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceGetUserConfigResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceGetUserConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceGetUserConfigResult(%+v)", *p)
}

// Attributes:
//  - Symbol
type TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs struct {
  Symbol string `thrift:"symbol,1" db:"symbol" json:"symbol"`
}

func NewTDepositeWithdrewServiceCheckCurrencyExistOrNotArgs() *TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs {
  return &TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs{}
}


func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs) GetSymbol() string {
  return p.Symbol
}
func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkCurrencyExistOrNot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:symbol: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceCheckCurrencyExistOrNotArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceCheckCurrencyExistOrNotResult struct {
  Success *TCurrency `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceCheckCurrencyExistOrNotResult() *TDepositeWithdrewServiceCheckCurrencyExistOrNotResult {
  return &TDepositeWithdrewServiceCheckCurrencyExistOrNotResult{}
}

var TDepositeWithdrewServiceCheckCurrencyExistOrNotResult_Success_DEFAULT *TCurrency
func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotResult) GetSuccess() *TCurrency {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceCheckCurrencyExistOrNotResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TCurrency{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkCurrencyExistOrNot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceCheckCurrencyExistOrNotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceCheckCurrencyExistOrNotResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TDepositeWithdrewServiceGetEngineByUserIdArgs struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTDepositeWithdrewServiceGetEngineByUserIdArgs() *TDepositeWithdrewServiceGetEngineByUserIdArgs {
  return &TDepositeWithdrewServiceGetEngineByUserIdArgs{}
}


func (p *TDepositeWithdrewServiceGetEngineByUserIdArgs) GetUserID() int32 {
  return p.UserID
}
func (p *TDepositeWithdrewServiceGetEngineByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEngineByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceGetEngineByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceGetEngineByUserIdResult struct {
  Success *TEngine `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceGetEngineByUserIdResult() *TDepositeWithdrewServiceGetEngineByUserIdResult {
  return &TDepositeWithdrewServiceGetEngineByUserIdResult{}
}

var TDepositeWithdrewServiceGetEngineByUserIdResult_Success_DEFAULT *TEngine
func (p *TDepositeWithdrewServiceGetEngineByUserIdResult) GetSuccess() *TEngine {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceGetEngineByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositeWithdrewServiceGetEngineByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TEngine{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEngineByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceGetEngineByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceGetEngineByUserIdResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Currency
//  - Type
//  - Confirmations
type TDepositeWithdrewServiceFindAllArgs struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Currency string `thrift:"currency,2" db:"currency" json:"currency"`
  Type string `thrift:"type,3" db:"type" json:"type"`
  Confirmations string `thrift:"confirmations,4" db:"confirmations" json:"confirmations"`
}

func NewTDepositeWithdrewServiceFindAllArgs() *TDepositeWithdrewServiceFindAllArgs {
  return &TDepositeWithdrewServiceFindAllArgs{}
}


func (p *TDepositeWithdrewServiceFindAllArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceFindAllArgs) GetCurrency() string {
  return p.Currency
}

func (p *TDepositeWithdrewServiceFindAllArgs) GetType() string {
  return p.Type
}

func (p *TDepositeWithdrewServiceFindAllArgs) GetConfirmations() string {
  return p.Confirmations
}
func (p *TDepositeWithdrewServiceFindAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceFindAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFindAllArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFindAllArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFindAllArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Confirmations = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFindAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceFindAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFindAllArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:currency: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFindAllArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFindAllArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("confirmations", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:confirmations: ", p), err) }
  if err := oprot.WriteString(string(p.Confirmations)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.confirmations (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:confirmations: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFindAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceFindAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceFindAllResult struct {
  Success []*TDepositWithdraw `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceFindAllResult() *TDepositeWithdrewServiceFindAllResult {
  return &TDepositeWithdrewServiceFindAllResult{}
}

var TDepositeWithdrewServiceFindAllResult_Success_DEFAULT []*TDepositWithdraw

func (p *TDepositeWithdrewServiceFindAllResult) GetSuccess() []*TDepositWithdraw {
  return p.Success
}
func (p *TDepositeWithdrewServiceFindAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceFindAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceFindAllResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdraw, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem263 := &TDepositWithdraw{}
    if err := _elem263.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem263), err)
    }
    p.Success = append(p.Success, _elem263)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceFindAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceFindAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceFindAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceFindAllResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Type
//  - Curreny
//  - Amount
//  - Fee
//  - Address
//  - Status
type TDepositeWithdrewServiceInsertDepositeWithDrawArgs struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Type string `thrift:"type,2" db:"type" json:"type"`
  Curreny string `thrift:"curreny,3" db:"curreny" json:"curreny"`
  Amount string `thrift:"amount,4" db:"amount" json:"amount"`
  Fee string `thrift:"fee,5" db:"fee" json:"fee"`
  Address string `thrift:"address,6" db:"address" json:"address"`
  Status int32 `thrift:"status,7" db:"status" json:"status"`
}

func NewTDepositeWithdrewServiceInsertDepositeWithDrawArgs() *TDepositeWithdrewServiceInsertDepositeWithDrawArgs {
  return &TDepositeWithdrewServiceInsertDepositeWithDrawArgs{}
}


func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) GetType() string {
  return p.Type
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) GetCurreny() string {
  return p.Curreny
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) GetAmount() string {
  return p.Amount
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) GetFee() string {
  return p.Fee
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) GetAddress() string {
  return p.Address
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) GetStatus() int32 {
  return p.Status
}
func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Curreny = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertDepositeWithDraw_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("curreny", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:curreny: ", p), err) }
  if err := oprot.WriteString(string(p.Curreny)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.curreny (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:curreny: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:amount: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fee: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:address: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceInsertDepositeWithDrawArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceInsertDepositeWithDrawResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceInsertDepositeWithDrawResult() *TDepositeWithdrewServiceInsertDepositeWithDrawResult {
  return &TDepositeWithdrewServiceInsertDepositeWithDrawResult{}
}

var TDepositeWithdrewServiceInsertDepositeWithDrawResult_Success_DEFAULT int32
func (p *TDepositeWithdrewServiceInsertDepositeWithDrawResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceInsertDepositeWithDrawResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositeWithdrewServiceInsertDepositeWithDrawResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertDepositeWithDraw_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceInsertDepositeWithDrawResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceInsertDepositeWithDrawResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Password
type TDepositeWithdrewServiceFinancingPasswordVerifyArgs struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Password string `thrift:"password,2" db:"password" json:"password"`
}

func NewTDepositeWithdrewServiceFinancingPasswordVerifyArgs() *TDepositeWithdrewServiceFinancingPasswordVerifyArgs {
  return &TDepositeWithdrewServiceFinancingPasswordVerifyArgs{}
}


func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs) GetPassword() string {
  return p.Password
}
func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("financingPasswordVerify_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceFinancingPasswordVerifyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceFinancingPasswordVerifyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceFinancingPasswordVerifyResult() *TDepositeWithdrewServiceFinancingPasswordVerifyResult {
  return &TDepositeWithdrewServiceFinancingPasswordVerifyResult{}
}

var TDepositeWithdrewServiceFinancingPasswordVerifyResult_Success_DEFAULT bool
func (p *TDepositeWithdrewServiceFinancingPasswordVerifyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceFinancingPasswordVerifyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDepositeWithdrewServiceFinancingPasswordVerifyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("financingPasswordVerify_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceFinancingPasswordVerifyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceFinancingPasswordVerifyResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - WithdrawToken
type TDepositeWithdrewServiceSelectMessageArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  WithdrawToken string `thrift:"withdrawToken,3" db:"withdrawToken" json:"withdrawToken"`
}

func NewTDepositeWithdrewServiceSelectMessageArgs() *TDepositeWithdrewServiceSelectMessageArgs {
  return &TDepositeWithdrewServiceSelectMessageArgs{}
}


func (p *TDepositeWithdrewServiceSelectMessageArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositeWithdrewServiceSelectMessageArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceSelectMessageArgs) GetWithdrawToken() string {
  return p.WithdrawToken
}
func (p *TDepositeWithdrewServiceSelectMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSelectMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSelectMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSelectMessageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WithdrawToken = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSelectMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceSelectMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSelectMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSelectMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withdrawToken: ", p), err) }
  if err := oprot.WriteString(string(p.WithdrawToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withdrawToken: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSelectMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceSelectMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceSelectMessageResult struct {
  Success *TWithdrawMessage `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceSelectMessageResult() *TDepositeWithdrewServiceSelectMessageResult {
  return &TDepositeWithdrewServiceSelectMessageResult{}
}

var TDepositeWithdrewServiceSelectMessageResult_Success_DEFAULT *TWithdrawMessage
func (p *TDepositeWithdrewServiceSelectMessageResult) GetSuccess() *TWithdrawMessage {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceSelectMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositeWithdrewServiceSelectMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceSelectMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSelectMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TWithdrawMessage{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSelectMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceSelectMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceSelectMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceSelectMessageResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Amount
//  - Address
//  - Symbol
//  - UserID
//  - WithdrawToken
type TDepositeWithdrewServiceInsertMessageArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Amount string `thrift:"amount,2" db:"amount" json:"amount"`
  Address string `thrift:"address,3" db:"address" json:"address"`
  Symbol string `thrift:"symbol,4" db:"symbol" json:"symbol"`
  UserID int32 `thrift:"user_id,5" db:"user_id" json:"user_id"`
  WithdrawToken string `thrift:"withdrawToken,6" db:"withdrawToken" json:"withdrawToken"`
}

func NewTDepositeWithdrewServiceInsertMessageArgs() *TDepositeWithdrewServiceInsertMessageArgs {
  return &TDepositeWithdrewServiceInsertMessageArgs{}
}


func (p *TDepositeWithdrewServiceInsertMessageArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) GetAmount() string {
  return p.Amount
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) GetAddress() string {
  return p.Address
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) GetSymbol() string {
  return p.Symbol
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) GetWithdrawToken() string {
  return p.WithdrawToken
}
func (p *TDepositeWithdrewServiceInsertMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.WithdrawToken = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:address: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:symbol: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawToken", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:withdrawToken: ", p), err) }
  if err := oprot.WriteString(string(p.WithdrawToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawToken (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:withdrawToken: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceInsertMessageArgs(%+v)", *p)
}

type TDepositeWithdrewServiceInsertMessageResult struct {
}

func NewTDepositeWithdrewServiceInsertMessageResult() *TDepositeWithdrewServiceInsertMessageResult {
  return &TDepositeWithdrewServiceInsertMessageResult{}
}

func (p *TDepositeWithdrewServiceInsertMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceInsertMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceInsertMessageResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - WithdrawToken
type TDepositeWithdrewServiceDeleteMessageArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  WithdrawToken string `thrift:"withdrawToken,3" db:"withdrawToken" json:"withdrawToken"`
}

func NewTDepositeWithdrewServiceDeleteMessageArgs() *TDepositeWithdrewServiceDeleteMessageArgs {
  return &TDepositeWithdrewServiceDeleteMessageArgs{}
}


func (p *TDepositeWithdrewServiceDeleteMessageArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs) GetWithdrawToken() string {
  return p.WithdrawToken
}
func (p *TDepositeWithdrewServiceDeleteMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WithdrawToken = v
}
  return nil
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withdrawToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withdrawToken: ", p), err) }
  if err := oprot.WriteString(string(p.WithdrawToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withdrawToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withdrawToken: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceDeleteMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceDeleteMessageArgs(%+v)", *p)
}

type TDepositeWithdrewServiceDeleteMessageResult struct {
}

func NewTDepositeWithdrewServiceDeleteMessageResult() *TDepositeWithdrewServiceDeleteMessageResult {
  return &TDepositeWithdrewServiceDeleteMessageResult{}
}

func (p *TDepositeWithdrewServiceDeleteMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceDeleteMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceDeleteMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceDeleteMessageResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Symbol
type TDepositeWithdrewServiceFindFreezeRecordArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Symbol string `thrift:"symbol,3" db:"symbol" json:"symbol"`
}

func NewTDepositeWithdrewServiceFindFreezeRecordArgs() *TDepositeWithdrewServiceFindFreezeRecordArgs {
  return &TDepositeWithdrewServiceFindFreezeRecordArgs{}
}


func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) GetSymbol() string {
  return p.Symbol
}
func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findFreezeRecord_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:symbol: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceFindFreezeRecordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceFindFreezeRecordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceFindFreezeRecordResult struct {
  Success []*TDepositWithdraw `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceFindFreezeRecordResult() *TDepositeWithdrewServiceFindFreezeRecordResult {
  return &TDepositeWithdrewServiceFindFreezeRecordResult{}
}

var TDepositeWithdrewServiceFindFreezeRecordResult_Success_DEFAULT []*TDepositWithdraw

func (p *TDepositeWithdrewServiceFindFreezeRecordResult) GetSuccess() []*TDepositWithdraw {
  return p.Success
}
func (p *TDepositeWithdrewServiceFindFreezeRecordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDepositWithdraw, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem264 := &TDepositWithdraw{}
    if err := _elem264.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem264), err)
    }
    p.Success = append(p.Success, _elem264)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findFreezeRecord_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceFindFreezeRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceFindFreezeRecordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceFindFreezeRecordResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Currency
type TDepositeWithdrewServiceSelectWithdrawTransactionalArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Currency string `thrift:"currency,3" db:"currency" json:"currency"`
}

func NewTDepositeWithdrewServiceSelectWithdrawTransactionalArgs() *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs {
  return &TDepositeWithdrewServiceSelectWithdrawTransactionalArgs{}
}


func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) GetCurrency() string {
  return p.Currency
}
func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectWithdrawTransactional_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currency: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceSelectWithdrawTransactionalArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDepositeWithdrewServiceSelectWithdrawTransactionalResult struct {
  Success *TWithdrawTransactional `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDepositeWithdrewServiceSelectWithdrawTransactionalResult() *TDepositeWithdrewServiceSelectWithdrawTransactionalResult {
  return &TDepositeWithdrewServiceSelectWithdrawTransactionalResult{}
}

var TDepositeWithdrewServiceSelectWithdrawTransactionalResult_Success_DEFAULT *TWithdrawTransactional
func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalResult) GetSuccess() *TWithdrawTransactional {
  if !p.IsSetSuccess() {
    return TDepositeWithdrewServiceSelectWithdrawTransactionalResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TWithdrawTransactional{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectWithdrawTransactional_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDepositeWithdrewServiceSelectWithdrawTransactionalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceSelectWithdrawTransactionalResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Currency
type TDepositeWithdrewServiceInsertWithdrawTransactionalArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Currency string `thrift:"currency,3" db:"currency" json:"currency"`
}

func NewTDepositeWithdrewServiceInsertWithdrawTransactionalArgs() *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs {
  return &TDepositeWithdrewServiceInsertWithdrawTransactionalArgs{}
}


func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) GetCurrency() string {
  return p.Currency
}
func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertWithdrawTransactional_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currency: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceInsertWithdrawTransactionalArgs(%+v)", *p)
}

type TDepositeWithdrewServiceInsertWithdrawTransactionalResult struct {
}

func NewTDepositeWithdrewServiceInsertWithdrawTransactionalResult() *TDepositeWithdrewServiceInsertWithdrawTransactionalResult {
  return &TDepositeWithdrewServiceInsertWithdrawTransactionalResult{}
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("insertWithdrawTransactional_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceInsertWithdrawTransactionalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceInsertWithdrawTransactionalResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Currency
type TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Currency string `thrift:"currency,3" db:"currency" json:"currency"`
}

func NewTDepositeWithdrewServiceDeleteWithdrawTransactionalArgs() *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs {
  return &TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs{}
}


func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) GetCurrency() string {
  return p.Currency
}
func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteWithdrawTransactional_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currency: ", p), err) }
  return err
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceDeleteWithdrawTransactionalArgs(%+v)", *p)
}

type TDepositeWithdrewServiceDeleteWithdrawTransactionalResult struct {
}

func NewTDepositeWithdrewServiceDeleteWithdrawTransactionalResult() *TDepositeWithdrewServiceDeleteWithdrawTransactionalResult {
  return &TDepositeWithdrewServiceDeleteWithdrawTransactionalResult{}
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteWithdrawTransactional_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDepositeWithdrewServiceDeleteWithdrawTransactionalResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDepositeWithdrewServiceDeleteWithdrawTransactionalResult(%+v)", *p)
}


type TGoogleAuthService interface {
  // Parameters:
  //  - UserID
  //  - Secret
  CreateGoogleSecretInfo(ctx context.Context, user_id string, secret string) (err error)
  // Parameters:
  //  - UserID
  //  - Key
  //  - Value
  SetGoogleUserConfigInfo(ctx context.Context, user_id int32, key string, value string) (err error)
  // Parameters:
  //  - UserID
  UpdateGoogleStatusActivity(ctx context.Context, user_id string) (err error)
  // Parameters:
  //  - UserID
  UpdateGoogleSecretActivity(ctx context.Context, user_id string) (err error)
  // Parameters:
  //  - UserID
  SelectGoogleSecretByUserId(ctx context.Context, user_id string) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  SelectGoogleAuth(ctx context.Context, traceId string, user_id string) (r *TGoogleEntity, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Password
  CheckPasswordVerify(ctx context.Context, traceId string, user_id string, password string) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  SelectGoogleOpenStatus(ctx context.Context, traceId string, user_id string) (r *TUserConfig, err error)
  // Parameters:
  //  - TraceId
  //  - Key
  //  - UserID
  //  - Status
  UpdateGoogleStatus(ctx context.Context, traceId string, key string, user_id string, status string) (err error)
}

type TGoogleAuthServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTGoogleAuthService instead
func NewTGoogleAuthServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TGoogleAuthServiceClient {
  return &TGoogleAuthServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTGoogleAuthService instead
func NewTGoogleAuthServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TGoogleAuthServiceClient {
  return &TGoogleAuthServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTGoogleAuthServiceClient(c thrift.TClient) *TGoogleAuthServiceClient {
  return &TGoogleAuthServiceClient{
    c: c,
  }
}

// Parameters:
//  - UserID
//  - Secret
func (p *TGoogleAuthServiceClient) CreateGoogleSecretInfo(ctx context.Context, user_id string, secret string) (err error) {
  var _args314 TGoogleAuthServiceCreateGoogleSecretInfoArgs
  _args314.UserID = user_id
  _args314.Secret = secret
  var _result315 TGoogleAuthServiceCreateGoogleSecretInfoResult
  if err = p.c.Call(ctx, "createGoogleSecretInfo", &_args314, &_result315); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserID
//  - Key
//  - Value
func (p *TGoogleAuthServiceClient) SetGoogleUserConfigInfo(ctx context.Context, user_id int32, key string, value string) (err error) {
  var _args316 TGoogleAuthServiceSetGoogleUserConfigInfoArgs
  _args316.UserID = user_id
  _args316.Key = key
  _args316.Value = value
  var _result317 TGoogleAuthServiceSetGoogleUserConfigInfoResult
  if err = p.c.Call(ctx, "setGoogleUserConfigInfo", &_args316, &_result317); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserID
func (p *TGoogleAuthServiceClient) UpdateGoogleStatusActivity(ctx context.Context, user_id string) (err error) {
  var _args318 TGoogleAuthServiceUpdateGoogleStatusActivityArgs
  _args318.UserID = user_id
  var _result319 TGoogleAuthServiceUpdateGoogleStatusActivityResult
  if err = p.c.Call(ctx, "updateGoogleStatusActivity", &_args318, &_result319); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserID
func (p *TGoogleAuthServiceClient) UpdateGoogleSecretActivity(ctx context.Context, user_id string) (err error) {
  var _args320 TGoogleAuthServiceUpdateGoogleSecretActivityArgs
  _args320.UserID = user_id
  var _result321 TGoogleAuthServiceUpdateGoogleSecretActivityResult
  if err = p.c.Call(ctx, "updateGoogleSecretActivity", &_args320, &_result321); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - UserID
func (p *TGoogleAuthServiceClient) SelectGoogleSecretByUserId(ctx context.Context, user_id string) (r string, err error) {
  var _args322 TGoogleAuthServiceSelectGoogleSecretByUserIdArgs
  _args322.UserID = user_id
  var _result323 TGoogleAuthServiceSelectGoogleSecretByUserIdResult
  if err = p.c.Call(ctx, "selectGoogleSecretByUserId", &_args322, &_result323); err != nil {
    return
  }
  return _result323.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
func (p *TGoogleAuthServiceClient) SelectGoogleAuth(ctx context.Context, traceId string, user_id string) (r *TGoogleEntity, err error) {
  var _args324 TGoogleAuthServiceSelectGoogleAuthArgs
  _args324.TraceId = traceId
  _args324.UserID = user_id
  var _result325 TGoogleAuthServiceSelectGoogleAuthResult
  if err = p.c.Call(ctx, "selectGoogleAuth", &_args324, &_result325); err != nil {
    return
  }
  return _result325.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Password
func (p *TGoogleAuthServiceClient) CheckPasswordVerify(ctx context.Context, traceId string, user_id string, password string) (r bool, err error) {
  var _args326 TGoogleAuthServiceCheckPasswordVerifyArgs
  _args326.TraceId = traceId
  _args326.UserID = user_id
  _args326.Password = password
  var _result327 TGoogleAuthServiceCheckPasswordVerifyResult
  if err = p.c.Call(ctx, "checkPasswordVerify", &_args326, &_result327); err != nil {
    return
  }
  return _result327.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserID
func (p *TGoogleAuthServiceClient) SelectGoogleOpenStatus(ctx context.Context, traceId string, user_id string) (r *TUserConfig, err error) {
  var _args328 TGoogleAuthServiceSelectGoogleOpenStatusArgs
  _args328.TraceId = traceId
  _args328.UserID = user_id
  var _result329 TGoogleAuthServiceSelectGoogleOpenStatusResult
  if err = p.c.Call(ctx, "selectGoogleOpenStatus", &_args328, &_result329); err != nil {
    return
  }
  return _result329.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Key
//  - UserID
//  - Status
func (p *TGoogleAuthServiceClient) UpdateGoogleStatus(ctx context.Context, traceId string, key string, user_id string, status string) (err error) {
  var _args330 TGoogleAuthServiceUpdateGoogleStatusArgs
  _args330.TraceId = traceId
  _args330.Key = key
  _args330.UserID = user_id
  _args330.Status = status
  var _result331 TGoogleAuthServiceUpdateGoogleStatusResult
  if err = p.c.Call(ctx, "updateGoogleStatus", &_args330, &_result331); err != nil {
    return
  }
  return nil
}

type TGoogleAuthServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TGoogleAuthService
}

func (p *TGoogleAuthServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TGoogleAuthServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TGoogleAuthServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTGoogleAuthServiceProcessor(handler TGoogleAuthService) *TGoogleAuthServiceProcessor {

  self332 := &TGoogleAuthServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self332.processorMap["createGoogleSecretInfo"] = &tGoogleAuthServiceProcessorCreateGoogleSecretInfo{handler:handler}
  self332.processorMap["setGoogleUserConfigInfo"] = &tGoogleAuthServiceProcessorSetGoogleUserConfigInfo{handler:handler}
  self332.processorMap["updateGoogleStatusActivity"] = &tGoogleAuthServiceProcessorUpdateGoogleStatusActivity{handler:handler}
  self332.processorMap["updateGoogleSecretActivity"] = &tGoogleAuthServiceProcessorUpdateGoogleSecretActivity{handler:handler}
  self332.processorMap["selectGoogleSecretByUserId"] = &tGoogleAuthServiceProcessorSelectGoogleSecretByUserId{handler:handler}
  self332.processorMap["selectGoogleAuth"] = &tGoogleAuthServiceProcessorSelectGoogleAuth{handler:handler}
  self332.processorMap["checkPasswordVerify"] = &tGoogleAuthServiceProcessorCheckPasswordVerify{handler:handler}
  self332.processorMap["selectGoogleOpenStatus"] = &tGoogleAuthServiceProcessorSelectGoogleOpenStatus{handler:handler}
  self332.processorMap["updateGoogleStatus"] = &tGoogleAuthServiceProcessorUpdateGoogleStatus{handler:handler}
return self332
}

func (p *TGoogleAuthServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x333 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x333.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x333

}

type tGoogleAuthServiceProcessorCreateGoogleSecretInfo struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorCreateGoogleSecretInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceCreateGoogleSecretInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createGoogleSecretInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceCreateGoogleSecretInfoResult{}
  var err2 error
  if err2 = p.handler.CreateGoogleSecretInfo(ctx, args.UserID, args.Secret); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGoogleSecretInfo: " + err2.Error())
    oprot.WriteMessageBegin("createGoogleSecretInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("createGoogleSecretInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGoogleAuthServiceProcessorSetGoogleUserConfigInfo struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorSetGoogleUserConfigInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceSetGoogleUserConfigInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setGoogleUserConfigInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceSetGoogleUserConfigInfoResult{}
  var err2 error
  if err2 = p.handler.SetGoogleUserConfigInfo(ctx, args.UserID, args.Key, args.Value); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setGoogleUserConfigInfo: " + err2.Error())
    oprot.WriteMessageBegin("setGoogleUserConfigInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("setGoogleUserConfigInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGoogleAuthServiceProcessorUpdateGoogleStatusActivity struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorUpdateGoogleStatusActivity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceUpdateGoogleStatusActivityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGoogleStatusActivity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceUpdateGoogleStatusActivityResult{}
  var err2 error
  if err2 = p.handler.UpdateGoogleStatusActivity(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGoogleStatusActivity: " + err2.Error())
    oprot.WriteMessageBegin("updateGoogleStatusActivity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateGoogleStatusActivity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGoogleAuthServiceProcessorUpdateGoogleSecretActivity struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorUpdateGoogleSecretActivity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceUpdateGoogleSecretActivityArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGoogleSecretActivity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceUpdateGoogleSecretActivityResult{}
  var err2 error
  if err2 = p.handler.UpdateGoogleSecretActivity(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGoogleSecretActivity: " + err2.Error())
    oprot.WriteMessageBegin("updateGoogleSecretActivity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateGoogleSecretActivity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGoogleAuthServiceProcessorSelectGoogleSecretByUserId struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorSelectGoogleSecretByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceSelectGoogleSecretByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectGoogleSecretByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceSelectGoogleSecretByUserIdResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SelectGoogleSecretByUserId(ctx, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectGoogleSecretByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectGoogleSecretByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectGoogleSecretByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGoogleAuthServiceProcessorSelectGoogleAuth struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorSelectGoogleAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceSelectGoogleAuthArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectGoogleAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceSelectGoogleAuthResult{}
var retval *TGoogleEntity
  var err2 error
  if retval, err2 = p.handler.SelectGoogleAuth(ctx, args.TraceId, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectGoogleAuth: " + err2.Error())
    oprot.WriteMessageBegin("selectGoogleAuth", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectGoogleAuth", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGoogleAuthServiceProcessorCheckPasswordVerify struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorCheckPasswordVerify) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceCheckPasswordVerifyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkPasswordVerify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceCheckPasswordVerifyResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CheckPasswordVerify(ctx, args.TraceId, args.UserID, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPasswordVerify: " + err2.Error())
    oprot.WriteMessageBegin("checkPasswordVerify", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("checkPasswordVerify", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGoogleAuthServiceProcessorSelectGoogleOpenStatus struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorSelectGoogleOpenStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceSelectGoogleOpenStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectGoogleOpenStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceSelectGoogleOpenStatusResult{}
var retval *TUserConfig
  var err2 error
  if retval, err2 = p.handler.SelectGoogleOpenStatus(ctx, args.TraceId, args.UserID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectGoogleOpenStatus: " + err2.Error())
    oprot.WriteMessageBegin("selectGoogleOpenStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectGoogleOpenStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tGoogleAuthServiceProcessorUpdateGoogleStatus struct {
  handler TGoogleAuthService
}

func (p *tGoogleAuthServiceProcessorUpdateGoogleStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TGoogleAuthServiceUpdateGoogleStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGoogleStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TGoogleAuthServiceUpdateGoogleStatusResult{}
  var err2 error
  if err2 = p.handler.UpdateGoogleStatus(ctx, args.TraceId, args.Key, args.UserID, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGoogleStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateGoogleStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateGoogleStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - UserID
//  - Secret
type TGoogleAuthServiceCreateGoogleSecretInfoArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Secret string `thrift:"secret,2" db:"secret" json:"secret"`
}

func NewTGoogleAuthServiceCreateGoogleSecretInfoArgs() *TGoogleAuthServiceCreateGoogleSecretInfoArgs {
  return &TGoogleAuthServiceCreateGoogleSecretInfoArgs{}
}


func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs) GetUserID() string {
  return p.UserID
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs) GetSecret() string {
  return p.Secret
}
func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGoogleSecretInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secret", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:secret: ", p), err) }
  if err := oprot.WriteString(string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:secret: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceCreateGoogleSecretInfoArgs(%+v)", *p)
}

type TGoogleAuthServiceCreateGoogleSecretInfoResult struct {
}

func NewTGoogleAuthServiceCreateGoogleSecretInfoResult() *TGoogleAuthServiceCreateGoogleSecretInfoResult {
  return &TGoogleAuthServiceCreateGoogleSecretInfoResult{}
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGoogleSecretInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceCreateGoogleSecretInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceCreateGoogleSecretInfoResult(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Key
//  - Value
type TGoogleAuthServiceSetGoogleUserConfigInfoArgs struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewTGoogleAuthServiceSetGoogleUserConfigInfoArgs() *TGoogleAuthServiceSetGoogleUserConfigInfoArgs {
  return &TGoogleAuthServiceSetGoogleUserConfigInfoArgs{}
}


func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) GetUserID() int32 {
  return p.UserID
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) GetKey() string {
  return p.Key
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) GetValue() string {
  return p.Value
}
func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setGoogleUserConfigInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceSetGoogleUserConfigInfoArgs(%+v)", *p)
}

type TGoogleAuthServiceSetGoogleUserConfigInfoResult struct {
}

func NewTGoogleAuthServiceSetGoogleUserConfigInfoResult() *TGoogleAuthServiceSetGoogleUserConfigInfoResult {
  return &TGoogleAuthServiceSetGoogleUserConfigInfoResult{}
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setGoogleUserConfigInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceSetGoogleUserConfigInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceSetGoogleUserConfigInfoResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TGoogleAuthServiceUpdateGoogleStatusActivityArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTGoogleAuthServiceUpdateGoogleStatusActivityArgs() *TGoogleAuthServiceUpdateGoogleStatusActivityArgs {
  return &TGoogleAuthServiceUpdateGoogleStatusActivityArgs{}
}


func (p *TGoogleAuthServiceUpdateGoogleStatusActivityArgs) GetUserID() string {
  return p.UserID
}
func (p *TGoogleAuthServiceUpdateGoogleStatusActivityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusActivityArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusActivityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGoogleStatusActivity_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusActivityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceUpdateGoogleStatusActivityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceUpdateGoogleStatusActivityArgs(%+v)", *p)
}

type TGoogleAuthServiceUpdateGoogleStatusActivityResult struct {
}

func NewTGoogleAuthServiceUpdateGoogleStatusActivityResult() *TGoogleAuthServiceUpdateGoogleStatusActivityResult {
  return &TGoogleAuthServiceUpdateGoogleStatusActivityResult{}
}

func (p *TGoogleAuthServiceUpdateGoogleStatusActivityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusActivityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGoogleStatusActivity_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusActivityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceUpdateGoogleStatusActivityResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TGoogleAuthServiceUpdateGoogleSecretActivityArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTGoogleAuthServiceUpdateGoogleSecretActivityArgs() *TGoogleAuthServiceUpdateGoogleSecretActivityArgs {
  return &TGoogleAuthServiceUpdateGoogleSecretActivityArgs{}
}


func (p *TGoogleAuthServiceUpdateGoogleSecretActivityArgs) GetUserID() string {
  return p.UserID
}
func (p *TGoogleAuthServiceUpdateGoogleSecretActivityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleSecretActivityArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleSecretActivityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGoogleSecretActivity_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleSecretActivityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceUpdateGoogleSecretActivityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceUpdateGoogleSecretActivityArgs(%+v)", *p)
}

type TGoogleAuthServiceUpdateGoogleSecretActivityResult struct {
}

func NewTGoogleAuthServiceUpdateGoogleSecretActivityResult() *TGoogleAuthServiceUpdateGoogleSecretActivityResult {
  return &TGoogleAuthServiceUpdateGoogleSecretActivityResult{}
}

func (p *TGoogleAuthServiceUpdateGoogleSecretActivityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleSecretActivityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGoogleSecretActivity_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleSecretActivityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceUpdateGoogleSecretActivityResult(%+v)", *p)
}

// Attributes:
//  - UserID
type TGoogleAuthServiceSelectGoogleSecretByUserIdArgs struct {
  UserID string `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewTGoogleAuthServiceSelectGoogleSecretByUserIdArgs() *TGoogleAuthServiceSelectGoogleSecretByUserIdArgs {
  return &TGoogleAuthServiceSelectGoogleSecretByUserIdArgs{}
}


func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdArgs) GetUserID() string {
  return p.UserID
}
func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectGoogleSecretByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceSelectGoogleSecretByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGoogleAuthServiceSelectGoogleSecretByUserIdResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGoogleAuthServiceSelectGoogleSecretByUserIdResult() *TGoogleAuthServiceSelectGoogleSecretByUserIdResult {
  return &TGoogleAuthServiceSelectGoogleSecretByUserIdResult{}
}

var TGoogleAuthServiceSelectGoogleSecretByUserIdResult_Success_DEFAULT string
func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TGoogleAuthServiceSelectGoogleSecretByUserIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectGoogleSecretByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGoogleAuthServiceSelectGoogleSecretByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceSelectGoogleSecretByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
type TGoogleAuthServiceSelectGoogleAuthArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
}

func NewTGoogleAuthServiceSelectGoogleAuthArgs() *TGoogleAuthServiceSelectGoogleAuthArgs {
  return &TGoogleAuthServiceSelectGoogleAuthArgs{}
}


func (p *TGoogleAuthServiceSelectGoogleAuthArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TGoogleAuthServiceSelectGoogleAuthArgs) GetUserID() string {
  return p.UserID
}
func (p *TGoogleAuthServiceSelectGoogleAuthArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleAuthArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleAuthArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleAuthArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectGoogleAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceSelectGoogleAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceSelectGoogleAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceSelectGoogleAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGoogleAuthServiceSelectGoogleAuthResult struct {
  Success *TGoogleEntity `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGoogleAuthServiceSelectGoogleAuthResult() *TGoogleAuthServiceSelectGoogleAuthResult {
  return &TGoogleAuthServiceSelectGoogleAuthResult{}
}

var TGoogleAuthServiceSelectGoogleAuthResult_Success_DEFAULT *TGoogleEntity
func (p *TGoogleAuthServiceSelectGoogleAuthResult) GetSuccess() *TGoogleEntity {
  if !p.IsSetSuccess() {
    return TGoogleAuthServiceSelectGoogleAuthResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGoogleAuthServiceSelectGoogleAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGoogleAuthServiceSelectGoogleAuthResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleAuthResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TGoogleEntity{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleAuthResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectGoogleAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGoogleAuthServiceSelectGoogleAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceSelectGoogleAuthResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Password
type TGoogleAuthServiceCheckPasswordVerifyArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewTGoogleAuthServiceCheckPasswordVerifyArgs() *TGoogleAuthServiceCheckPasswordVerifyArgs {
  return &TGoogleAuthServiceCheckPasswordVerifyArgs{}
}


func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) GetUserID() string {
  return p.UserID
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) GetPassword() string {
  return p.Password
}
func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPasswordVerify_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceCheckPasswordVerifyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceCheckPasswordVerifyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGoogleAuthServiceCheckPasswordVerifyResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGoogleAuthServiceCheckPasswordVerifyResult() *TGoogleAuthServiceCheckPasswordVerifyResult {
  return &TGoogleAuthServiceCheckPasswordVerifyResult{}
}

var TGoogleAuthServiceCheckPasswordVerifyResult_Success_DEFAULT bool
func (p *TGoogleAuthServiceCheckPasswordVerifyResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TGoogleAuthServiceCheckPasswordVerifyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TGoogleAuthServiceCheckPasswordVerifyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPasswordVerify_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceCheckPasswordVerifyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGoogleAuthServiceCheckPasswordVerifyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceCheckPasswordVerifyResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
type TGoogleAuthServiceSelectGoogleOpenStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
}

func NewTGoogleAuthServiceSelectGoogleOpenStatusArgs() *TGoogleAuthServiceSelectGoogleOpenStatusArgs {
  return &TGoogleAuthServiceSelectGoogleOpenStatusArgs{}
}


func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs) GetUserID() string {
  return p.UserID
}
func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectGoogleOpenStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceSelectGoogleOpenStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TGoogleAuthServiceSelectGoogleOpenStatusResult struct {
  Success *TUserConfig `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTGoogleAuthServiceSelectGoogleOpenStatusResult() *TGoogleAuthServiceSelectGoogleOpenStatusResult {
  return &TGoogleAuthServiceSelectGoogleOpenStatusResult{}
}

var TGoogleAuthServiceSelectGoogleOpenStatusResult_Success_DEFAULT *TUserConfig
func (p *TGoogleAuthServiceSelectGoogleOpenStatusResult) GetSuccess() *TUserConfig {
  if !p.IsSetSuccess() {
    return TGoogleAuthServiceSelectGoogleOpenStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *TGoogleAuthServiceSelectGoogleOpenStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserConfig{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectGoogleOpenStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TGoogleAuthServiceSelectGoogleOpenStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceSelectGoogleOpenStatusResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Key
//  - UserID
//  - Status
type TGoogleAuthServiceUpdateGoogleStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  UserID string `thrift:"user_id,3" db:"user_id" json:"user_id"`
  Status string `thrift:"status,4" db:"status" json:"status"`
}

func NewTGoogleAuthServiceUpdateGoogleStatusArgs() *TGoogleAuthServiceUpdateGoogleStatusArgs {
  return &TGoogleAuthServiceUpdateGoogleStatusArgs{}
}


func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) GetKey() string {
  return p.Key
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) GetUserID() string {
  return p.UserID
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) GetStatus() string {
  return p.Status
}
func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGoogleStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *TGoogleAuthServiceUpdateGoogleStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceUpdateGoogleStatusArgs(%+v)", *p)
}

type TGoogleAuthServiceUpdateGoogleStatusResult struct {
}

func NewTGoogleAuthServiceUpdateGoogleStatusResult() *TGoogleAuthServiceUpdateGoogleStatusResult {
  return &TGoogleAuthServiceUpdateGoogleStatusResult{}
}

func (p *TGoogleAuthServiceUpdateGoogleStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGoogleStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleAuthServiceUpdateGoogleStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleAuthServiceUpdateGoogleStatusResult(%+v)", *p)
}


type TBannerService interface {
  // Parameters:
  //  - AppID
  //  - Language
  GetAllTBanner(ctx context.Context, app_id string, language string) (r []*TBanner, err error)
}

type TBannerServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTBannerService instead
func NewTBannerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TBannerServiceClient {
  return &TBannerServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTBannerService instead
func NewTBannerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TBannerServiceClient {
  return &TBannerServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTBannerServiceClient(c thrift.TClient) *TBannerServiceClient {
  return &TBannerServiceClient{
    c: c,
  }
}

// Parameters:
//  - AppID
//  - Language
func (p *TBannerServiceClient) GetAllTBanner(ctx context.Context, app_id string, language string) (r []*TBanner, err error) {
  var _args353 TBannerServiceGetAllTBannerArgs
  _args353.AppID = app_id
  _args353.Language = language
  var _result354 TBannerServiceGetAllTBannerResult
  if err = p.c.Call(ctx, "getAllTBanner", &_args353, &_result354); err != nil {
    return
  }
  return _result354.GetSuccess(), nil
}

type TBannerServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TBannerService
}

func (p *TBannerServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TBannerServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TBannerServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTBannerServiceProcessor(handler TBannerService) *TBannerServiceProcessor {

  self355 := &TBannerServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self355.processorMap["getAllTBanner"] = &tBannerServiceProcessorGetAllTBanner{handler:handler}
return self355
}

func (p *TBannerServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x356 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x356.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x356

}

type tBannerServiceProcessorGetAllTBanner struct {
  handler TBannerService
}

func (p *tBannerServiceProcessorGetAllTBanner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBannerServiceGetAllTBannerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllTBanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TBannerServiceGetAllTBannerResult{}
var retval []*TBanner
  var err2 error
  if retval, err2 = p.handler.GetAllTBanner(ctx, args.AppID, args.Language); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllTBanner: " + err2.Error())
    oprot.WriteMessageBegin("getAllTBanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllTBanner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - AppID
//  - Language
type TBannerServiceGetAllTBannerArgs struct {
  AppID string `thrift:"app_id,1" db:"app_id" json:"app_id"`
  Language string `thrift:"language,2" db:"language" json:"language"`
}

func NewTBannerServiceGetAllTBannerArgs() *TBannerServiceGetAllTBannerArgs {
  return &TBannerServiceGetAllTBannerArgs{}
}


func (p *TBannerServiceGetAllTBannerArgs) GetAppID() string {
  return p.AppID
}

func (p *TBannerServiceGetAllTBannerArgs) GetLanguage() string {
  return p.Language
}
func (p *TBannerServiceGetAllTBannerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBannerServiceGetAllTBannerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *TBannerServiceGetAllTBannerArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *TBannerServiceGetAllTBannerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllTBanner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBannerServiceGetAllTBannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("app_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_id: ", p), err) }
  if err := oprot.WriteString(string(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_id: ", p), err) }
  return err
}

func (p *TBannerServiceGetAllTBannerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("language", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
  if err := oprot.WriteString(string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  return err
}

func (p *TBannerServiceGetAllTBannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBannerServiceGetAllTBannerArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBannerServiceGetAllTBannerResult struct {
  Success []*TBanner `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBannerServiceGetAllTBannerResult() *TBannerServiceGetAllTBannerResult {
  return &TBannerServiceGetAllTBannerResult{}
}

var TBannerServiceGetAllTBannerResult_Success_DEFAULT []*TBanner

func (p *TBannerServiceGetAllTBannerResult) GetSuccess() []*TBanner {
  return p.Success
}
func (p *TBannerServiceGetAllTBannerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBannerServiceGetAllTBannerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBannerServiceGetAllTBannerResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TBanner, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem357 := &TBanner{}
    if err := _elem357.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem357), err)
    }
    p.Success = append(p.Success, _elem357)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TBannerServiceGetAllTBannerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllTBanner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBannerServiceGetAllTBannerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBannerServiceGetAllTBannerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBannerServiceGetAllTBannerResult(%+v)", *p)
}


type TTradePassword interface {
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Password
  CreateTradePassword(ctx context.Context, traceId string, user_id string, password string) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Password
  UpdateTradePassword(ctx context.Context, traceId string, user_id string, password string) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Password
  ForgerTradePassword(ctx context.Context, traceId string, user_id string, password string) (err error)
  // Parameters:
  //  - TraceId
  //  - UserID
  //  - Password
  CheckPasswordByUserId(ctx context.Context, traceId string, user_id string, password string) (r *TUserEntity, err error)
  // Parameters:
  //  - TraceId
  //  - Key
  //  - UserID
  //  - Status
  UpdateTradePasswordStatus(ctx context.Context, traceId string, key string, user_id string, status string) (err error)
}

type TTradePasswordClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTTradePassword instead
func NewTTradePasswordClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TTradePasswordClient {
  return &TTradePasswordClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTTradePassword instead
func NewTTradePasswordClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TTradePasswordClient {
  return &TTradePasswordClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTTradePasswordClient(c thrift.TClient) *TTradePasswordClient {
  return &TTradePasswordClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - UserID
//  - Password
func (p *TTradePasswordClient) CreateTradePassword(ctx context.Context, traceId string, user_id string, password string) (err error) {
  var _args360 TTradePasswordCreateTradePasswordArgs
  _args360.TraceId = traceId
  _args360.UserID = user_id
  _args360.Password = password
  var _result361 TTradePasswordCreateTradePasswordResult
  if err = p.c.Call(ctx, "createTradePassword", &_args360, &_result361); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Password
func (p *TTradePasswordClient) UpdateTradePassword(ctx context.Context, traceId string, user_id string, password string) (err error) {
  var _args362 TTradePasswordUpdateTradePasswordArgs
  _args362.TraceId = traceId
  _args362.UserID = user_id
  _args362.Password = password
  var _result363 TTradePasswordUpdateTradePasswordResult
  if err = p.c.Call(ctx, "updateTradePassword", &_args362, &_result363); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Password
func (p *TTradePasswordClient) ForgerTradePassword(ctx context.Context, traceId string, user_id string, password string) (err error) {
  var _args364 TTradePasswordForgerTradePasswordArgs
  _args364.TraceId = traceId
  _args364.UserID = user_id
  _args364.Password = password
  var _result365 TTradePasswordForgerTradePasswordResult
  if err = p.c.Call(ctx, "forgerTradePassword", &_args364, &_result365); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - UserID
//  - Password
func (p *TTradePasswordClient) CheckPasswordByUserId(ctx context.Context, traceId string, user_id string, password string) (r *TUserEntity, err error) {
  var _args366 TTradePasswordCheckPasswordByUserIdArgs
  _args366.TraceId = traceId
  _args366.UserID = user_id
  _args366.Password = password
  var _result367 TTradePasswordCheckPasswordByUserIdResult
  if err = p.c.Call(ctx, "checkPasswordByUserId", &_args366, &_result367); err != nil {
    return
  }
  return _result367.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Key
//  - UserID
//  - Status
func (p *TTradePasswordClient) UpdateTradePasswordStatus(ctx context.Context, traceId string, key string, user_id string, status string) (err error) {
  var _args368 TTradePasswordUpdateTradePasswordStatusArgs
  _args368.TraceId = traceId
  _args368.Key = key
  _args368.UserID = user_id
  _args368.Status = status
  var _result369 TTradePasswordUpdateTradePasswordStatusResult
  if err = p.c.Call(ctx, "updateTradePasswordStatus", &_args368, &_result369); err != nil {
    return
  }
  return nil
}

type TTradePasswordProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TTradePassword
}

func (p *TTradePasswordProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TTradePasswordProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TTradePasswordProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTTradePasswordProcessor(handler TTradePassword) *TTradePasswordProcessor {

  self370 := &TTradePasswordProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self370.processorMap["createTradePassword"] = &tTradePasswordProcessorCreateTradePassword{handler:handler}
  self370.processorMap["updateTradePassword"] = &tTradePasswordProcessorUpdateTradePassword{handler:handler}
  self370.processorMap["forgerTradePassword"] = &tTradePasswordProcessorForgerTradePassword{handler:handler}
  self370.processorMap["checkPasswordByUserId"] = &tTradePasswordProcessorCheckPasswordByUserId{handler:handler}
  self370.processorMap["updateTradePasswordStatus"] = &tTradePasswordProcessorUpdateTradePasswordStatus{handler:handler}
return self370
}

func (p *TTradePasswordProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x371 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x371.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x371

}

type tTradePasswordProcessorCreateTradePassword struct {
  handler TTradePassword
}

func (p *tTradePasswordProcessorCreateTradePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTradePasswordCreateTradePasswordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createTradePassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTradePasswordCreateTradePasswordResult{}
  var err2 error
  if err2 = p.handler.CreateTradePassword(ctx, args.TraceId, args.UserID, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTradePassword: " + err2.Error())
    oprot.WriteMessageBegin("createTradePassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("createTradePassword", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tTradePasswordProcessorUpdateTradePassword struct {
  handler TTradePassword
}

func (p *tTradePasswordProcessorUpdateTradePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTradePasswordUpdateTradePasswordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateTradePassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTradePasswordUpdateTradePasswordResult{}
  var err2 error
  if err2 = p.handler.UpdateTradePassword(ctx, args.TraceId, args.UserID, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateTradePassword: " + err2.Error())
    oprot.WriteMessageBegin("updateTradePassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateTradePassword", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tTradePasswordProcessorForgerTradePassword struct {
  handler TTradePassword
}

func (p *tTradePasswordProcessorForgerTradePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTradePasswordForgerTradePasswordArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("forgerTradePassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTradePasswordForgerTradePasswordResult{}
  var err2 error
  if err2 = p.handler.ForgerTradePassword(ctx, args.TraceId, args.UserID, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing forgerTradePassword: " + err2.Error())
    oprot.WriteMessageBegin("forgerTradePassword", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("forgerTradePassword", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tTradePasswordProcessorCheckPasswordByUserId struct {
  handler TTradePassword
}

func (p *tTradePasswordProcessorCheckPasswordByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTradePasswordCheckPasswordByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkPasswordByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTradePasswordCheckPasswordByUserIdResult{}
var retval *TUserEntity
  var err2 error
  if retval, err2 = p.handler.CheckPasswordByUserId(ctx, args.TraceId, args.UserID, args.Password); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPasswordByUserId: " + err2.Error())
    oprot.WriteMessageBegin("checkPasswordByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("checkPasswordByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tTradePasswordProcessorUpdateTradePasswordStatus struct {
  handler TTradePassword
}

func (p *tTradePasswordProcessorUpdateTradePasswordStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTradePasswordUpdateTradePasswordStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateTradePasswordStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTradePasswordUpdateTradePasswordStatusResult{}
  var err2 error
  if err2 = p.handler.UpdateTradePasswordStatus(ctx, args.TraceId, args.Key, args.UserID, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateTradePasswordStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateTradePasswordStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateTradePasswordStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - UserID
//  - Password
type TTradePasswordCreateTradePasswordArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewTTradePasswordCreateTradePasswordArgs() *TTradePasswordCreateTradePasswordArgs {
  return &TTradePasswordCreateTradePasswordArgs{}
}


func (p *TTradePasswordCreateTradePasswordArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TTradePasswordCreateTradePasswordArgs) GetUserID() string {
  return p.UserID
}

func (p *TTradePasswordCreateTradePasswordArgs) GetPassword() string {
  return p.Password
}
func (p *TTradePasswordCreateTradePasswordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordCreateTradePasswordArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TTradePasswordCreateTradePasswordArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TTradePasswordCreateTradePasswordArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TTradePasswordCreateTradePasswordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createTradePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordCreateTradePasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TTradePasswordCreateTradePasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TTradePasswordCreateTradePasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TTradePasswordCreateTradePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordCreateTradePasswordArgs(%+v)", *p)
}

type TTradePasswordCreateTradePasswordResult struct {
}

func NewTTradePasswordCreateTradePasswordResult() *TTradePasswordCreateTradePasswordResult {
  return &TTradePasswordCreateTradePasswordResult{}
}

func (p *TTradePasswordCreateTradePasswordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordCreateTradePasswordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createTradePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordCreateTradePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordCreateTradePasswordResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Password
type TTradePasswordUpdateTradePasswordArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewTTradePasswordUpdateTradePasswordArgs() *TTradePasswordUpdateTradePasswordArgs {
  return &TTradePasswordUpdateTradePasswordArgs{}
}


func (p *TTradePasswordUpdateTradePasswordArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TTradePasswordUpdateTradePasswordArgs) GetUserID() string {
  return p.UserID
}

func (p *TTradePasswordUpdateTradePasswordArgs) GetPassword() string {
  return p.Password
}
func (p *TTradePasswordUpdateTradePasswordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordUpdateTradePasswordArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TTradePasswordUpdateTradePasswordArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TTradePasswordUpdateTradePasswordArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TTradePasswordUpdateTradePasswordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateTradePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordUpdateTradePasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TTradePasswordUpdateTradePasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TTradePasswordUpdateTradePasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TTradePasswordUpdateTradePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordUpdateTradePasswordArgs(%+v)", *p)
}

type TTradePasswordUpdateTradePasswordResult struct {
}

func NewTTradePasswordUpdateTradePasswordResult() *TTradePasswordUpdateTradePasswordResult {
  return &TTradePasswordUpdateTradePasswordResult{}
}

func (p *TTradePasswordUpdateTradePasswordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordUpdateTradePasswordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateTradePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordUpdateTradePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordUpdateTradePasswordResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Password
type TTradePasswordForgerTradePasswordArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewTTradePasswordForgerTradePasswordArgs() *TTradePasswordForgerTradePasswordArgs {
  return &TTradePasswordForgerTradePasswordArgs{}
}


func (p *TTradePasswordForgerTradePasswordArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TTradePasswordForgerTradePasswordArgs) GetUserID() string {
  return p.UserID
}

func (p *TTradePasswordForgerTradePasswordArgs) GetPassword() string {
  return p.Password
}
func (p *TTradePasswordForgerTradePasswordArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordForgerTradePasswordArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TTradePasswordForgerTradePasswordArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TTradePasswordForgerTradePasswordArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TTradePasswordForgerTradePasswordArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("forgerTradePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordForgerTradePasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TTradePasswordForgerTradePasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TTradePasswordForgerTradePasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TTradePasswordForgerTradePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordForgerTradePasswordArgs(%+v)", *p)
}

type TTradePasswordForgerTradePasswordResult struct {
}

func NewTTradePasswordForgerTradePasswordResult() *TTradePasswordForgerTradePasswordResult {
  return &TTradePasswordForgerTradePasswordResult{}
}

func (p *TTradePasswordForgerTradePasswordResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordForgerTradePasswordResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("forgerTradePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordForgerTradePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordForgerTradePasswordResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserID
//  - Password
type TTradePasswordCheckPasswordByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserID string `thrift:"user_id,2" db:"user_id" json:"user_id"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewTTradePasswordCheckPasswordByUserIdArgs() *TTradePasswordCheckPasswordByUserIdArgs {
  return &TTradePasswordCheckPasswordByUserIdArgs{}
}


func (p *TTradePasswordCheckPasswordByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TTradePasswordCheckPasswordByUserIdArgs) GetUserID() string {
  return p.UserID
}

func (p *TTradePasswordCheckPasswordByUserIdArgs) GetPassword() string {
  return p.Password
}
func (p *TTradePasswordCheckPasswordByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordCheckPasswordByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TTradePasswordCheckPasswordByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TTradePasswordCheckPasswordByUserIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *TTradePasswordCheckPasswordByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPasswordByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordCheckPasswordByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TTradePasswordCheckPasswordByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *TTradePasswordCheckPasswordByUserIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *TTradePasswordCheckPasswordByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordCheckPasswordByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TTradePasswordCheckPasswordByUserIdResult struct {
  Success *TUserEntity `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTTradePasswordCheckPasswordByUserIdResult() *TTradePasswordCheckPasswordByUserIdResult {
  return &TTradePasswordCheckPasswordByUserIdResult{}
}

var TTradePasswordCheckPasswordByUserIdResult_Success_DEFAULT *TUserEntity
func (p *TTradePasswordCheckPasswordByUserIdResult) GetSuccess() *TUserEntity {
  if !p.IsSetSuccess() {
    return TTradePasswordCheckPasswordByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TTradePasswordCheckPasswordByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TTradePasswordCheckPasswordByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordCheckPasswordByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserEntity{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TTradePasswordCheckPasswordByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPasswordByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordCheckPasswordByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TTradePasswordCheckPasswordByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordCheckPasswordByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Key
//  - UserID
//  - Status
type TTradePasswordUpdateTradePasswordStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  UserID string `thrift:"user_id,3" db:"user_id" json:"user_id"`
  Status string `thrift:"status,4" db:"status" json:"status"`
}

func NewTTradePasswordUpdateTradePasswordStatusArgs() *TTradePasswordUpdateTradePasswordStatusArgs {
  return &TTradePasswordUpdateTradePasswordStatusArgs{}
}


func (p *TTradePasswordUpdateTradePasswordStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) GetKey() string {
  return p.Key
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) GetUserID() string {
  return p.UserID
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) GetStatus() string {
  return p.Status
}
func (p *TTradePasswordUpdateTradePasswordStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateTradePasswordStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err) }
  if err := oprot.WriteString(string(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err) }
  return err
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  return err
}

func (p *TTradePasswordUpdateTradePasswordStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordUpdateTradePasswordStatusArgs(%+v)", *p)
}

type TTradePasswordUpdateTradePasswordStatusResult struct {
}

func NewTTradePasswordUpdateTradePasswordStatusResult() *TTradePasswordUpdateTradePasswordStatusResult {
  return &TTradePasswordUpdateTradePasswordStatusResult{}
}

func (p *TTradePasswordUpdateTradePasswordStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradePasswordUpdateTradePasswordStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateTradePasswordStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradePasswordUpdateTradePasswordStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradePasswordUpdateTradePasswordStatusResult(%+v)", *p)
}


type TMaintenanceService interface {
  // Parameters:
  //  - TraceId
  //  - ClientType
  GetMaintenanceStatus(ctx context.Context, traceId string, clientType string) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - ClientType
  //  - Status
  UpdateMaintenanceStatus(ctx context.Context, traceId string, clientType string, status int32) (err error)
  // Parameters:
  //  - TraceId
  //  - Status
  UpdateAllMaintenanceStatus(ctx context.Context, traceId string, status int32) (err error)
}

type TMaintenanceServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTMaintenanceService instead
func NewTMaintenanceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TMaintenanceServiceClient {
  return &TMaintenanceServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTMaintenanceService instead
func NewTMaintenanceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TMaintenanceServiceClient {
  return &TMaintenanceServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTMaintenanceServiceClient(c thrift.TClient) *TMaintenanceServiceClient {
  return &TMaintenanceServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - ClientType
func (p *TMaintenanceServiceClient) GetMaintenanceStatus(ctx context.Context, traceId string, clientType string) (r int32, err error) {
  var _args388 TMaintenanceServiceGetMaintenanceStatusArgs
  _args388.TraceId = traceId
  _args388.ClientType = clientType
  var _result389 TMaintenanceServiceGetMaintenanceStatusResult
  if err = p.c.Call(ctx, "getMaintenanceStatus", &_args388, &_result389); err != nil {
    return
  }
  return _result389.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - ClientType
//  - Status
func (p *TMaintenanceServiceClient) UpdateMaintenanceStatus(ctx context.Context, traceId string, clientType string, status int32) (err error) {
  var _args390 TMaintenanceServiceUpdateMaintenanceStatusArgs
  _args390.TraceId = traceId
  _args390.ClientType = clientType
  _args390.Status = status
  var _result391 TMaintenanceServiceUpdateMaintenanceStatusResult
  if err = p.c.Call(ctx, "updateMaintenanceStatus", &_args390, &_result391); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - TraceId
//  - Status
func (p *TMaintenanceServiceClient) UpdateAllMaintenanceStatus(ctx context.Context, traceId string, status int32) (err error) {
  var _args392 TMaintenanceServiceUpdateAllMaintenanceStatusArgs
  _args392.TraceId = traceId
  _args392.Status = status
  var _result393 TMaintenanceServiceUpdateAllMaintenanceStatusResult
  if err = p.c.Call(ctx, "updateAllMaintenanceStatus", &_args392, &_result393); err != nil {
    return
  }
  return nil
}

type TMaintenanceServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TMaintenanceService
}

func (p *TMaintenanceServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TMaintenanceServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TMaintenanceServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTMaintenanceServiceProcessor(handler TMaintenanceService) *TMaintenanceServiceProcessor {

  self394 := &TMaintenanceServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self394.processorMap["getMaintenanceStatus"] = &tMaintenanceServiceProcessorGetMaintenanceStatus{handler:handler}
  self394.processorMap["updateMaintenanceStatus"] = &tMaintenanceServiceProcessorUpdateMaintenanceStatus{handler:handler}
  self394.processorMap["updateAllMaintenanceStatus"] = &tMaintenanceServiceProcessorUpdateAllMaintenanceStatus{handler:handler}
return self394
}

func (p *TMaintenanceServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x395 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x395.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x395

}

type tMaintenanceServiceProcessorGetMaintenanceStatus struct {
  handler TMaintenanceService
}

func (p *tMaintenanceServiceProcessorGetMaintenanceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TMaintenanceServiceGetMaintenanceStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMaintenanceStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TMaintenanceServiceGetMaintenanceStatusResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetMaintenanceStatus(ctx, args.TraceId, args.ClientType); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMaintenanceStatus: " + err2.Error())
    oprot.WriteMessageBegin("getMaintenanceStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getMaintenanceStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tMaintenanceServiceProcessorUpdateMaintenanceStatus struct {
  handler TMaintenanceService
}

func (p *tMaintenanceServiceProcessorUpdateMaintenanceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TMaintenanceServiceUpdateMaintenanceStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateMaintenanceStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TMaintenanceServiceUpdateMaintenanceStatusResult{}
  var err2 error
  if err2 = p.handler.UpdateMaintenanceStatus(ctx, args.TraceId, args.ClientType, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateMaintenanceStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateMaintenanceStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateMaintenanceStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tMaintenanceServiceProcessorUpdateAllMaintenanceStatus struct {
  handler TMaintenanceService
}

func (p *tMaintenanceServiceProcessorUpdateAllMaintenanceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TMaintenanceServiceUpdateAllMaintenanceStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateAllMaintenanceStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TMaintenanceServiceUpdateAllMaintenanceStatusResult{}
  var err2 error
  if err2 = p.handler.UpdateAllMaintenanceStatus(ctx, args.TraceId, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateAllMaintenanceStatus: " + err2.Error())
    oprot.WriteMessageBegin("updateAllMaintenanceStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("updateAllMaintenanceStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - ClientType
type TMaintenanceServiceGetMaintenanceStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ClientType string `thrift:"clientType,2" db:"clientType" json:"clientType"`
}

func NewTMaintenanceServiceGetMaintenanceStatusArgs() *TMaintenanceServiceGetMaintenanceStatusArgs {
  return &TMaintenanceServiceGetMaintenanceStatusArgs{}
}


func (p *TMaintenanceServiceGetMaintenanceStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TMaintenanceServiceGetMaintenanceStatusArgs) GetClientType() string {
  return p.ClientType
}
func (p *TMaintenanceServiceGetMaintenanceStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMaintenanceServiceGetMaintenanceStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TMaintenanceServiceGetMaintenanceStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClientType = v
}
  return nil
}

func (p *TMaintenanceServiceGetMaintenanceStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMaintenanceStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMaintenanceServiceGetMaintenanceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TMaintenanceServiceGetMaintenanceStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientType: ", p), err) }
  if err := oprot.WriteString(string(p.ClientType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientType: ", p), err) }
  return err
}

func (p *TMaintenanceServiceGetMaintenanceStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMaintenanceServiceGetMaintenanceStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMaintenanceServiceGetMaintenanceStatusResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMaintenanceServiceGetMaintenanceStatusResult() *TMaintenanceServiceGetMaintenanceStatusResult {
  return &TMaintenanceServiceGetMaintenanceStatusResult{}
}

var TMaintenanceServiceGetMaintenanceStatusResult_Success_DEFAULT int32
func (p *TMaintenanceServiceGetMaintenanceStatusResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TMaintenanceServiceGetMaintenanceStatusResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TMaintenanceServiceGetMaintenanceStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TMaintenanceServiceGetMaintenanceStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMaintenanceServiceGetMaintenanceStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TMaintenanceServiceGetMaintenanceStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMaintenanceStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMaintenanceServiceGetMaintenanceStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TMaintenanceServiceGetMaintenanceStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMaintenanceServiceGetMaintenanceStatusResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - ClientType
//  - Status
type TMaintenanceServiceUpdateMaintenanceStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ClientType string `thrift:"clientType,2" db:"clientType" json:"clientType"`
  Status int32 `thrift:"status,3" db:"status" json:"status"`
}

func NewTMaintenanceServiceUpdateMaintenanceStatusArgs() *TMaintenanceServiceUpdateMaintenanceStatusArgs {
  return &TMaintenanceServiceUpdateMaintenanceStatusArgs{}
}


func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) GetClientType() string {
  return p.ClientType
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) GetStatus() int32 {
  return p.Status
}
func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClientType = v
}
  return nil
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateMaintenanceStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientType: ", p), err) }
  if err := oprot.WriteString(string(p.ClientType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientType: ", p), err) }
  return err
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMaintenanceServiceUpdateMaintenanceStatusArgs(%+v)", *p)
}

type TMaintenanceServiceUpdateMaintenanceStatusResult struct {
}

func NewTMaintenanceServiceUpdateMaintenanceStatusResult() *TMaintenanceServiceUpdateMaintenanceStatusResult {
  return &TMaintenanceServiceUpdateMaintenanceStatusResult{}
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateMaintenanceStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMaintenanceServiceUpdateMaintenanceStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMaintenanceServiceUpdateMaintenanceStatusResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Status
type TMaintenanceServiceUpdateAllMaintenanceStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Status int32 `thrift:"status,2" db:"status" json:"status"`
}

func NewTMaintenanceServiceUpdateAllMaintenanceStatusArgs() *TMaintenanceServiceUpdateAllMaintenanceStatusArgs {
  return &TMaintenanceServiceUpdateAllMaintenanceStatusArgs{}
}


func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs) GetStatus() int32 {
  return p.Status
}
func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateAllMaintenanceStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMaintenanceServiceUpdateAllMaintenanceStatusArgs(%+v)", *p)
}

type TMaintenanceServiceUpdateAllMaintenanceStatusResult struct {
}

func NewTMaintenanceServiceUpdateAllMaintenanceStatusResult() *TMaintenanceServiceUpdateAllMaintenanceStatusResult {
  return &TMaintenanceServiceUpdateAllMaintenanceStatusResult{}
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateAllMaintenanceStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMaintenanceServiceUpdateAllMaintenanceStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMaintenanceServiceUpdateAllMaintenanceStatusResult(%+v)", *p)
}


type TActivityService interface {
  // Parameters:
  //  - TraceId
  GetCandyParameter(ctx context.Context, traceId string) (r *TCandyParameter, err error)
}

type TActivityServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTActivityService instead
func NewTActivityServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TActivityServiceClient {
  return &TActivityServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTActivityService instead
func NewTActivityServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TActivityServiceClient {
  return &TActivityServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTActivityServiceClient(c thrift.TClient) *TActivityServiceClient {
  return &TActivityServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
func (p *TActivityServiceClient) GetCandyParameter(ctx context.Context, traceId string) (r *TCandyParameter, err error) {
  var _args403 TActivityServiceGetCandyParameterArgs
  _args403.TraceId = traceId
  var _result404 TActivityServiceGetCandyParameterResult
  if err = p.c.Call(ctx, "getCandyParameter", &_args403, &_result404); err != nil {
    return
  }
  return _result404.GetSuccess(), nil
}

type TActivityServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TActivityService
}

func (p *TActivityServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TActivityServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TActivityServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTActivityServiceProcessor(handler TActivityService) *TActivityServiceProcessor {

  self405 := &TActivityServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self405.processorMap["getCandyParameter"] = &tActivityServiceProcessorGetCandyParameter{handler:handler}
return self405
}

func (p *TActivityServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x406 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x406.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x406

}

type tActivityServiceProcessorGetCandyParameter struct {
  handler TActivityService
}

func (p *tActivityServiceProcessorGetCandyParameter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TActivityServiceGetCandyParameterArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCandyParameter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TActivityServiceGetCandyParameterResult{}
var retval *TCandyParameter
  var err2 error
  if retval, err2 = p.handler.GetCandyParameter(ctx, args.TraceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCandyParameter: " + err2.Error())
    oprot.WriteMessageBegin("getCandyParameter", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCandyParameter", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
type TActivityServiceGetCandyParameterArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewTActivityServiceGetCandyParameterArgs() *TActivityServiceGetCandyParameterArgs {
  return &TActivityServiceGetCandyParameterArgs{}
}


func (p *TActivityServiceGetCandyParameterArgs) GetTraceId() string {
  return p.TraceId
}
func (p *TActivityServiceGetCandyParameterArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActivityServiceGetCandyParameterArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TActivityServiceGetCandyParameterArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCandyParameter_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActivityServiceGetCandyParameterArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TActivityServiceGetCandyParameterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActivityServiceGetCandyParameterArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TActivityServiceGetCandyParameterResult struct {
  Success *TCandyParameter `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTActivityServiceGetCandyParameterResult() *TActivityServiceGetCandyParameterResult {
  return &TActivityServiceGetCandyParameterResult{}
}

var TActivityServiceGetCandyParameterResult_Success_DEFAULT *TCandyParameter
func (p *TActivityServiceGetCandyParameterResult) GetSuccess() *TCandyParameter {
  if !p.IsSetSuccess() {
    return TActivityServiceGetCandyParameterResult_Success_DEFAULT
  }
return p.Success
}
func (p *TActivityServiceGetCandyParameterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TActivityServiceGetCandyParameterResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActivityServiceGetCandyParameterResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TCandyParameter{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TActivityServiceGetCandyParameterResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCandyParameter_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActivityServiceGetCandyParameterResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TActivityServiceGetCandyParameterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActivityServiceGetCandyParameterResult(%+v)", *p)
}


