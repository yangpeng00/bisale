// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "bisale/bisale-console-api/thrift/business"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "   searchWithdrawByUserId(string traceId, i32 user_id, string lang)")
  fmt.Fprintln(os.Stderr, "  TDepositWithdraw searchWithdrawById(i32 id, string language)")
  fmt.Fprintln(os.Stderr, "  string getDepositAddress(i32 user_id, string type, string currency)")
  fmt.Fprintln(os.Stderr, "  string getUserConfig(i32 user_id, string key)")
  fmt.Fprintln(os.Stderr, "  TCurrency checkCurrencyExistOrNot(string symbol)")
  fmt.Fprintln(os.Stderr, "  TEngine getEngineByUserId(i32 user_id)")
  fmt.Fprintln(os.Stderr, "   findAll(i32 user_id, string currency, string type, string confirmations)")
  fmt.Fprintln(os.Stderr, "  i32 insertDepositeWithDraw(i32 user_id, string type, string curreny, string amount, string fee, string address, i32 status)")
  fmt.Fprintln(os.Stderr, "  bool financingPasswordVerify(i32 user_id, string password)")
  fmt.Fprintln(os.Stderr, "  TWithdrawMessage selectMessage(string traceId, i32 user_id, string withdrawToken)")
  fmt.Fprintln(os.Stderr, "  void insertMessage(string traceId, string amount, string address, string symbol, i32 user_id, string withdrawToken)")
  fmt.Fprintln(os.Stderr, "  void deleteMessage(string traceId, i32 user_id, string withdrawToken)")
  fmt.Fprintln(os.Stderr, "   findFreezeRecord(string traceId, i32 user_id, string symbol)")
  fmt.Fprintln(os.Stderr, "  TWithdrawTransactional selectWithdrawTransactional(string traceId, i32 user_id, string currency)")
  fmt.Fprintln(os.Stderr, "  void insertWithdrawTransactional(string traceId, i32 user_id, string currency)")
  fmt.Fprintln(os.Stderr, "  void deleteWithdrawTransactional(string traceId, i32 user_id, string currency)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := business.NewTDepositeWithdrewServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "searchWithdrawByUserId":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SearchWithdrawByUserId requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err266 := (strconv.Atoi(flag.Arg(2)))
    if err266 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SearchWithdrawByUserId(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "searchWithdrawById":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SearchWithdrawById requires 2 args")
      flag.Usage()
    }
    tmp0, err268 := (strconv.Atoi(flag.Arg(1)))
    if err268 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SearchWithdrawById(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getDepositAddress":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetDepositAddress requires 3 args")
      flag.Usage()
    }
    tmp0, err270 := (strconv.Atoi(flag.Arg(1)))
    if err270 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetDepositAddress(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getUserConfig":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUserConfig requires 2 args")
      flag.Usage()
    }
    tmp0, err273 := (strconv.Atoi(flag.Arg(1)))
    if err273 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetUserConfig(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkCurrencyExistOrNot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckCurrencyExistOrNot requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CheckCurrencyExistOrNot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getEngineByUserId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEngineByUserId requires 1 args")
      flag.Usage()
    }
    tmp0, err276 := (strconv.Atoi(flag.Arg(1)))
    if err276 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetEngineByUserId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findAll":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAll requires 4 args")
      flag.Usage()
    }
    tmp0, err277 := (strconv.Atoi(flag.Arg(1)))
    if err277 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAll(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "insertDepositeWithDraw":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "InsertDepositeWithDraw requires 7 args")
      flag.Usage()
    }
    tmp0, err281 := (strconv.Atoi(flag.Arg(1)))
    if err281 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    tmp6, err287 := (strconv.Atoi(flag.Arg(7)))
    if err287 != nil {
      Usage()
      return
    }
    argvalue6 := int32(tmp6)
    value6 := argvalue6
    fmt.Print(client.InsertDepositeWithDraw(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "financingPasswordVerify":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FinancingPasswordVerify requires 2 args")
      flag.Usage()
    }
    tmp0, err288 := (strconv.Atoi(flag.Arg(1)))
    if err288 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FinancingPasswordVerify(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "selectMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SelectMessage requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err291 := (strconv.Atoi(flag.Arg(2)))
    if err291 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SelectMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "insertMessage":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "InsertMessage requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err297 := (strconv.Atoi(flag.Arg(5)))
    if err297 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    fmt.Print(client.InsertMessage(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "deleteMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteMessage requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err300 := (strconv.Atoi(flag.Arg(2)))
    if err300 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findFreezeRecord":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindFreezeRecord requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err303 := (strconv.Atoi(flag.Arg(2)))
    if err303 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindFreezeRecord(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "selectWithdrawTransactional":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SelectWithdrawTransactional requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err306 := (strconv.Atoi(flag.Arg(2)))
    if err306 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SelectWithdrawTransactional(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "insertWithdrawTransactional":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InsertWithdrawTransactional requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err309 := (strconv.Atoi(flag.Arg(2)))
    if err309 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.InsertWithdrawTransactional(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteWithdrawTransactional":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteWithdrawTransactional requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err312 := (strconv.Atoi(flag.Arg(2)))
    if err312 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteWithdrawTransactional(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
