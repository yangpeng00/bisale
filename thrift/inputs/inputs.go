// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package inputs

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Mobile
//  - Password
type MobileLoginInput struct {
  Mobile string `thrift:"Mobile,1" db:"Mobile" json:"Mobile"`
  Password string `thrift:"Password,2" db:"Password" json:"Password"`
}

func NewMobileLoginInput() *MobileLoginInput {
  return &MobileLoginInput{}
}


func (p *MobileLoginInput) GetMobile() string {
  return p.Mobile
}

func (p *MobileLoginInput) GetPassword() string {
  return p.Password
}
func (p *MobileLoginInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MobileLoginInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *MobileLoginInput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *MobileLoginInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MobileLoginInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MobileLoginInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Mobile", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Mobile (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Mobile: ", p), err) }
  return err
}

func (p *MobileLoginInput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Password: ", p), err) }
  return err
}

func (p *MobileLoginInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MobileLoginInput(%+v)", *p)
}

// Attributes:
//  - Account
//  - Email
//  - Mobile
//  - Password
//  - AvatarUrl
//  - Status
type CreateMemberInput struct {
  Account string `thrift:"Account,1" db:"Account" json:"Account"`
  Email string `thrift:"Email,2" db:"Email" json:"Email"`
  Mobile string `thrift:"Mobile,3" db:"Mobile" json:"Mobile"`
  Password string `thrift:"Password,4" db:"Password" json:"Password"`
  AvatarUrl string `thrift:"AvatarUrl,5" db:"AvatarUrl" json:"AvatarUrl"`
  Status int32 `thrift:"Status,6" db:"Status" json:"Status"`
}

func NewCreateMemberInput() *CreateMemberInput {
  return &CreateMemberInput{}
}


func (p *CreateMemberInput) GetAccount() string {
  return p.Account
}

func (p *CreateMemberInput) GetEmail() string {
  return p.Email
}

func (p *CreateMemberInput) GetMobile() string {
  return p.Mobile
}

func (p *CreateMemberInput) GetPassword() string {
  return p.Password
}

func (p *CreateMemberInput) GetAvatarUrl() string {
  return p.AvatarUrl
}

func (p *CreateMemberInput) GetStatus() int32 {
  return p.Status
}
func (p *CreateMemberInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateMemberInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *CreateMemberInput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *CreateMemberInput)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *CreateMemberInput)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *CreateMemberInput)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AvatarUrl = v
}
  return nil
}

func (p *CreateMemberInput)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *CreateMemberInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateMemberInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateMemberInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Account: ", p), err) }
  return err
}

func (p *CreateMemberInput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Email: ", p), err) }
  return err
}

func (p *CreateMemberInput) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Mobile", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Mobile (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Mobile: ", p), err) }
  return err
}

func (p *CreateMemberInput) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Password: ", p), err) }
  return err
}

func (p *CreateMemberInput) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("AvatarUrl", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:AvatarUrl: ", p), err) }
  if err := oprot.WriteString(string(p.AvatarUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.AvatarUrl (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:AvatarUrl: ", p), err) }
  return err
}

func (p *CreateMemberInput) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Status", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Status: ", p), err) }
  return err
}

func (p *CreateMemberInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateMemberInput(%+v)", *p)
}

// Attributes:
//  - Username
//  - Password
type CreateRoleInput struct {
  Username string `thrift:"Username,1" db:"Username" json:"Username"`
  Password string `thrift:"Password,2" db:"Password" json:"Password"`
}

func NewCreateRoleInput() *CreateRoleInput {
  return &CreateRoleInput{}
}


func (p *CreateRoleInput) GetUsername() string {
  return p.Username
}

func (p *CreateRoleInput) GetPassword() string {
  return p.Password
}
func (p *CreateRoleInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateRoleInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *CreateRoleInput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *CreateRoleInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateRoleInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateRoleInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Username: ", p), err) }
  return err
}

func (p *CreateRoleInput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Password: ", p), err) }
  return err
}

func (p *CreateRoleInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateRoleInput(%+v)", *p)
}

// Attributes:
//  - Username
//  - Password
type CreatePermissionInput struct {
  Username string `thrift:"Username,1" db:"Username" json:"Username"`
  Password string `thrift:"Password,2" db:"Password" json:"Password"`
}

func NewCreatePermissionInput() *CreatePermissionInput {
  return &CreatePermissionInput{}
}


func (p *CreatePermissionInput) GetUsername() string {
  return p.Username
}

func (p *CreatePermissionInput) GetPassword() string {
  return p.Password
}
func (p *CreatePermissionInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreatePermissionInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *CreatePermissionInput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *CreatePermissionInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreatePermissionInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreatePermissionInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Username: ", p), err) }
  return err
}

func (p *CreatePermissionInput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Password: ", p), err) }
  return err
}

func (p *CreatePermissionInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreatePermissionInput(%+v)", *p)
}

// Attributes:
//  - Username
//  - Password
type CreateLogInput struct {
  Username string `thrift:"Username,1" db:"Username" json:"Username"`
  Password string `thrift:"Password,2" db:"Password" json:"Password"`
}

func NewCreateLogInput() *CreateLogInput {
  return &CreateLogInput{}
}


func (p *CreateLogInput) GetUsername() string {
  return p.Username
}

func (p *CreateLogInput) GetPassword() string {
  return p.Password
}
func (p *CreateLogInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateLogInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *CreateLogInput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *CreateLogInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateLogInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateLogInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Username: ", p), err) }
  return err
}

func (p *CreateLogInput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Password", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Password (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Password: ", p), err) }
  return err
}

func (p *CreateLogInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateLogInput(%+v)", *p)
}

// Attributes:
//  - MemberId
type JWTInput struct {
  MemberId string `thrift:"MemberId,1" db:"MemberId" json:"MemberId"`
}

func NewJWTInput() *JWTInput {
  return &JWTInput{}
}


func (p *JWTInput) GetMemberId() string {
  return p.MemberId
}
func (p *JWTInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *JWTInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberId = v
}
  return nil
}

func (p *JWTInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JWTInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JWTInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("MemberId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MemberId: ", p), err) }
  if err := oprot.WriteString(string(p.MemberId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MemberId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MemberId: ", p), err) }
  return err
}

func (p *JWTInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JWTInput(%+v)", *p)
}

