// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package account

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"bisale/bisale-console-api/thrift/inputs"
	"bisale/bisale-console-api/thrift/outputs"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = inputs.GoUnusedProtection__
var _ = outputs.GoUnusedProtection__
// Attributes:
//  - Code
//  - Message
type Status struct {
  Code int32 `thrift:"Code,1" db:"Code" json:"Code"`
  Message string `thrift:"Message,2" db:"Message" json:"Message"`
}

func NewStatus() *Status {
  return &Status{}
}


func (p *Status) GetCode() int32 {
  return p.Code
}

func (p *Status) GetMessage() string {
  return p.Message
}
func (p *Status) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Status)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Status)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *Status) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Status"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Status) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Code: ", p), err) }
  return err
}

func (p *Status) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Message: ", p), err) }
  return err
}

func (p *Status) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Status(%+v)", *p)
}

func (p *Status) Error() string {
  return p.String()
}

type Account interface {
  Ping(ctx context.Context) (r bool, err error)
  Version(ctx context.Context) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - Output
  MobileLogin(ctx context.Context, traceId string, output *inputs.MobileLoginInput) (r *outputs.LoginOutput, err error)
  // Parameters:
  //  - TraceId
  //  - Input
  CreateMember(ctx context.Context, traceId string, input *inputs.CreateMemberInput) (r *outputs.CreateMemberOutput, err error)
  // Parameters:
  //  - TraceId
  //  - SecretKey
  //  - Expired
  GenerateJWTToken(ctx context.Context, traceId string, secretKey string, expired int32) (r string, err error)
  // Parameters:
  //  - TraceId
  //  - TokenString
  //  - SecretKey
  ValidateJWT(ctx context.Context, traceId string, tokenString string, secretKey string) (r bool, err error)
}

type AccountClient struct {
  c thrift.TClient
}

// Deprecated: Use NewAccount instead
func NewAccountClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AccountClient {
  return &AccountClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewAccount instead
func NewAccountClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AccountClient {
  return &AccountClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewAccountClient(c thrift.TClient) *AccountClient {
  return &AccountClient{
    c: c,
  }
}

func (p *AccountClient) Ping(ctx context.Context) (r bool, err error) {
  var _args0 AccountPingArgs
  var _result1 AccountPingResult
  if err = p.c.Call(ctx, "Ping", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.Status!= nil:
    return r, _result1.Status
  }

  return _result1.GetSuccess(), nil
}

func (p *AccountClient) Version(ctx context.Context) (r string, err error) {
  var _args2 AccountVersionArgs
  var _result3 AccountVersionResult
  if err = p.c.Call(ctx, "Version", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.Status!= nil:
    return r, _result3.Status
  }

  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Output
func (p *AccountClient) MobileLogin(ctx context.Context, traceId string, output *inputs.MobileLoginInput) (r *outputs.LoginOutput, err error) {
  var _args4 AccountMobileLoginArgs
  _args4.TraceId = traceId
  _args4.Output = output
  var _result5 AccountMobileLoginResult
  if err = p.c.Call(ctx, "MobileLogin", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Status!= nil:
    return r, _result5.Status
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Input
func (p *AccountClient) CreateMember(ctx context.Context, traceId string, input *inputs.CreateMemberInput) (r *outputs.CreateMemberOutput, err error) {
  var _args6 AccountCreateMemberArgs
  _args6.TraceId = traceId
  _args6.Input = input
  var _result7 AccountCreateMemberResult
  if err = p.c.Call(ctx, "CreateMember", &_args6, &_result7); err != nil {
    return
  }
  switch {
  case _result7.Status!= nil:
    return r, _result7.Status
  }

  return _result7.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - SecretKey
//  - Expired
func (p *AccountClient) GenerateJWTToken(ctx context.Context, traceId string, secretKey string, expired int32) (r string, err error) {
  var _args8 AccountGenerateJWTTokenArgs
  _args8.TraceId = traceId
  _args8.SecretKey = secretKey
  _args8.Expired = expired
  var _result9 AccountGenerateJWTTokenResult
  if err = p.c.Call(ctx, "GenerateJWTToken", &_args8, &_result9); err != nil {
    return
  }
  switch {
  case _result9.Status!= nil:
    return r, _result9.Status
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - TokenString
//  - SecretKey
func (p *AccountClient) ValidateJWT(ctx context.Context, traceId string, tokenString string, secretKey string) (r bool, err error) {
  var _args10 AccountValidateJWTArgs
  _args10.TraceId = traceId
  _args10.TokenString = tokenString
  _args10.SecretKey = secretKey
  var _result11 AccountValidateJWTResult
  if err = p.c.Call(ctx, "ValidateJWT", &_args10, &_result11); err != nil {
    return
  }
  switch {
  case _result11.Status!= nil:
    return r, _result11.Status
  }

  return _result11.GetSuccess(), nil
}

type AccountProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Account
}

func (p *AccountProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AccountProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AccountProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAccountProcessor(handler Account) *AccountProcessor {

  self12 := &AccountProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["Ping"] = &accountProcessorPing{handler:handler}
  self12.processorMap["Version"] = &accountProcessorVersion{handler:handler}
  self12.processorMap["MobileLogin"] = &accountProcessorMobileLogin{handler:handler}
  self12.processorMap["CreateMember"] = &accountProcessorCreateMember{handler:handler}
  self12.processorMap["GenerateJWTToken"] = &accountProcessorGenerateJWTToken{handler:handler}
  self12.processorMap["ValidateJWT"] = &accountProcessorValidateJWT{handler:handler}
return self12
}

func (p *AccountProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type accountProcessorPing struct {
  handler Account
}

func (p *accountProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AccountPingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AccountPingResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Ping(ctx); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type accountProcessorVersion struct {
  handler Account
}

func (p *accountProcessorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AccountVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AccountVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Version(ctx); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Version: " + err2.Error())
    oprot.WriteMessageBegin("Version", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Version", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type accountProcessorMobileLogin struct {
  handler Account
}

func (p *accountProcessorMobileLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AccountMobileLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("MobileLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AccountMobileLoginResult{}
var retval *outputs.LoginOutput
  var err2 error
  if retval, err2 = p.handler.MobileLogin(ctx, args.TraceId, args.Output); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing MobileLogin: " + err2.Error())
    oprot.WriteMessageBegin("MobileLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("MobileLogin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type accountProcessorCreateMember struct {
  handler Account
}

func (p *accountProcessorCreateMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AccountCreateMemberArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateMember", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AccountCreateMemberResult{}
var retval *outputs.CreateMemberOutput
  var err2 error
  if retval, err2 = p.handler.CreateMember(ctx, args.TraceId, args.Input); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateMember: " + err2.Error())
    oprot.WriteMessageBegin("CreateMember", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("CreateMember", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type accountProcessorGenerateJWTToken struct {
  handler Account
}

func (p *accountProcessorGenerateJWTToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AccountGenerateJWTTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GenerateJWTToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AccountGenerateJWTTokenResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GenerateJWTToken(ctx, args.TraceId, args.SecretKey, args.Expired); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenerateJWTToken: " + err2.Error())
    oprot.WriteMessageBegin("GenerateJWTToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GenerateJWTToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type accountProcessorValidateJWT struct {
  handler Account
}

func (p *accountProcessorValidateJWT) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AccountValidateJWTArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ValidateJWT", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AccountValidateJWTResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ValidateJWT(ctx, args.TraceId, args.TokenString, args.SecretKey); err2 != nil {
  switch v := err2.(type) {
    case *Status:
  result.Status = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ValidateJWT: " + err2.Error())
    oprot.WriteMessageBegin("ValidateJWT", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ValidateJWT", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type AccountPingArgs struct {
}

func NewAccountPingArgs() *AccountPingArgs {
  return &AccountPingArgs{}
}

func (p *AccountPingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountPingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountPingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type AccountPingResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewAccountPingResult() *AccountPingResult {
  return &AccountPingResult{}
}

var AccountPingResult_Success_DEFAULT bool
func (p *AccountPingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AccountPingResult_Success_DEFAULT
  }
return *p.Success
}
var AccountPingResult_Status_DEFAULT *Status
func (p *AccountPingResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return AccountPingResult_Status_DEFAULT
  }
return p.Status
}
func (p *AccountPingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AccountPingResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *AccountPingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountPingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AccountPingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *AccountPingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountPingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AccountPingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *AccountPingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountPingResult(%+v)", *p)
}

type AccountVersionArgs struct {
}

func NewAccountVersionArgs() *AccountVersionArgs {
  return &AccountVersionArgs{}
}

func (p *AccountVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type AccountVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewAccountVersionResult() *AccountVersionResult {
  return &AccountVersionResult{}
}

var AccountVersionResult_Success_DEFAULT string
func (p *AccountVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AccountVersionResult_Success_DEFAULT
  }
return *p.Success
}
var AccountVersionResult_Status_DEFAULT *Status
func (p *AccountVersionResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return AccountVersionResult_Status_DEFAULT
  }
return p.Status
}
func (p *AccountVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AccountVersionResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *AccountVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AccountVersionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *AccountVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AccountVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *AccountVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountVersionResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Output
type AccountMobileLoginArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Output *inputs.MobileLoginInput `thrift:"output,2" db:"output" json:"output"`
}

func NewAccountMobileLoginArgs() *AccountMobileLoginArgs {
  return &AccountMobileLoginArgs{}
}


func (p *AccountMobileLoginArgs) GetTraceId() string {
  return p.TraceId
}
var AccountMobileLoginArgs_Output_DEFAULT *inputs.MobileLoginInput
func (p *AccountMobileLoginArgs) GetOutput() *inputs.MobileLoginInput {
  if !p.IsSetOutput() {
    return AccountMobileLoginArgs_Output_DEFAULT
  }
return p.Output
}
func (p *AccountMobileLoginArgs) IsSetOutput() bool {
  return p.Output != nil
}

func (p *AccountMobileLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountMobileLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *AccountMobileLoginArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Output = &inputs.MobileLoginInput{}
  if err := p.Output.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Output), err)
  }
  return nil
}

func (p *AccountMobileLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MobileLogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountMobileLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *AccountMobileLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("output", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:output: ", p), err) }
  if err := p.Output.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Output), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:output: ", p), err) }
  return err
}

func (p *AccountMobileLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountMobileLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type AccountMobileLoginResult struct {
  Success *outputs.LoginOutput `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewAccountMobileLoginResult() *AccountMobileLoginResult {
  return &AccountMobileLoginResult{}
}

var AccountMobileLoginResult_Success_DEFAULT *outputs.LoginOutput
func (p *AccountMobileLoginResult) GetSuccess() *outputs.LoginOutput {
  if !p.IsSetSuccess() {
    return AccountMobileLoginResult_Success_DEFAULT
  }
return p.Success
}
var AccountMobileLoginResult_Status_DEFAULT *Status
func (p *AccountMobileLoginResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return AccountMobileLoginResult_Status_DEFAULT
  }
return p.Status
}
func (p *AccountMobileLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AccountMobileLoginResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *AccountMobileLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountMobileLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &outputs.LoginOutput{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AccountMobileLoginResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *AccountMobileLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MobileLogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountMobileLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AccountMobileLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *AccountMobileLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountMobileLoginResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Input
type AccountCreateMemberArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Input *inputs.CreateMemberInput `thrift:"input,2" db:"input" json:"input"`
}

func NewAccountCreateMemberArgs() *AccountCreateMemberArgs {
  return &AccountCreateMemberArgs{}
}


func (p *AccountCreateMemberArgs) GetTraceId() string {
  return p.TraceId
}
var AccountCreateMemberArgs_Input_DEFAULT *inputs.CreateMemberInput
func (p *AccountCreateMemberArgs) GetInput() *inputs.CreateMemberInput {
  if !p.IsSetInput() {
    return AccountCreateMemberArgs_Input_DEFAULT
  }
return p.Input
}
func (p *AccountCreateMemberArgs) IsSetInput() bool {
  return p.Input != nil
}

func (p *AccountCreateMemberArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountCreateMemberArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *AccountCreateMemberArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Input = &inputs.CreateMemberInput{}
  if err := p.Input.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Input), err)
  }
  return nil
}

func (p *AccountCreateMemberArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateMember_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountCreateMemberArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *AccountCreateMemberArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("input", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:input: ", p), err) }
  if err := p.Input.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Input), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:input: ", p), err) }
  return err
}

func (p *AccountCreateMemberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountCreateMemberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type AccountCreateMemberResult struct {
  Success *outputs.CreateMemberOutput `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewAccountCreateMemberResult() *AccountCreateMemberResult {
  return &AccountCreateMemberResult{}
}

var AccountCreateMemberResult_Success_DEFAULT *outputs.CreateMemberOutput
func (p *AccountCreateMemberResult) GetSuccess() *outputs.CreateMemberOutput {
  if !p.IsSetSuccess() {
    return AccountCreateMemberResult_Success_DEFAULT
  }
return p.Success
}
var AccountCreateMemberResult_Status_DEFAULT *Status
func (p *AccountCreateMemberResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return AccountCreateMemberResult_Status_DEFAULT
  }
return p.Status
}
func (p *AccountCreateMemberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AccountCreateMemberResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *AccountCreateMemberResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountCreateMemberResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &outputs.CreateMemberOutput{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AccountCreateMemberResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *AccountCreateMemberResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateMember_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountCreateMemberResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AccountCreateMemberResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *AccountCreateMemberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountCreateMemberResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - SecretKey
//  - Expired
type AccountGenerateJWTTokenArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  SecretKey string `thrift:"secretKey,2" db:"secretKey" json:"secretKey"`
  Expired int32 `thrift:"expired,3" db:"expired" json:"expired"`
}

func NewAccountGenerateJWTTokenArgs() *AccountGenerateJWTTokenArgs {
  return &AccountGenerateJWTTokenArgs{}
}


func (p *AccountGenerateJWTTokenArgs) GetTraceId() string {
  return p.TraceId
}

func (p *AccountGenerateJWTTokenArgs) GetSecretKey() string {
  return p.SecretKey
}

func (p *AccountGenerateJWTTokenArgs) GetExpired() int32 {
  return p.Expired
}
func (p *AccountGenerateJWTTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountGenerateJWTTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *AccountGenerateJWTTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SecretKey = v
}
  return nil
}

func (p *AccountGenerateJWTTokenArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expired = v
}
  return nil
}

func (p *AccountGenerateJWTTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerateJWTToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountGenerateJWTTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *AccountGenerateJWTTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secretKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:secretKey: ", p), err) }
  if err := oprot.WriteString(string(p.SecretKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secretKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:secretKey: ", p), err) }
  return err
}

func (p *AccountGenerateJWTTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expired", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expired: ", p), err) }
  if err := oprot.WriteI32(int32(p.Expired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expired (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expired: ", p), err) }
  return err
}

func (p *AccountGenerateJWTTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountGenerateJWTTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type AccountGenerateJWTTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewAccountGenerateJWTTokenResult() *AccountGenerateJWTTokenResult {
  return &AccountGenerateJWTTokenResult{}
}

var AccountGenerateJWTTokenResult_Success_DEFAULT string
func (p *AccountGenerateJWTTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AccountGenerateJWTTokenResult_Success_DEFAULT
  }
return *p.Success
}
var AccountGenerateJWTTokenResult_Status_DEFAULT *Status
func (p *AccountGenerateJWTTokenResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return AccountGenerateJWTTokenResult_Status_DEFAULT
  }
return p.Status
}
func (p *AccountGenerateJWTTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AccountGenerateJWTTokenResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *AccountGenerateJWTTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountGenerateJWTTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AccountGenerateJWTTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *AccountGenerateJWTTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GenerateJWTToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountGenerateJWTTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AccountGenerateJWTTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *AccountGenerateJWTTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountGenerateJWTTokenResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - TokenString
//  - SecretKey
type AccountValidateJWTArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  TokenString string `thrift:"tokenString,2" db:"tokenString" json:"tokenString"`
  SecretKey string `thrift:"secretKey,3" db:"secretKey" json:"secretKey"`
}

func NewAccountValidateJWTArgs() *AccountValidateJWTArgs {
  return &AccountValidateJWTArgs{}
}


func (p *AccountValidateJWTArgs) GetTraceId() string {
  return p.TraceId
}

func (p *AccountValidateJWTArgs) GetTokenString() string {
  return p.TokenString
}

func (p *AccountValidateJWTArgs) GetSecretKey() string {
  return p.SecretKey
}
func (p *AccountValidateJWTArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountValidateJWTArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *AccountValidateJWTArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TokenString = v
}
  return nil
}

func (p *AccountValidateJWTArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SecretKey = v
}
  return nil
}

func (p *AccountValidateJWTArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidateJWT_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountValidateJWTArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *AccountValidateJWTArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tokenString", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenString: ", p), err) }
  if err := oprot.WriteString(string(p.TokenString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenString (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenString: ", p), err) }
  return err
}

func (p *AccountValidateJWTArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secretKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:secretKey: ", p), err) }
  if err := oprot.WriteString(string(p.SecretKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secretKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:secretKey: ", p), err) }
  return err
}

func (p *AccountValidateJWTArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountValidateJWTArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Status
type AccountValidateJWTResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Status *Status `thrift:"status,1" db:"status" json:"status,omitempty"`
}

func NewAccountValidateJWTResult() *AccountValidateJWTResult {
  return &AccountValidateJWTResult{}
}

var AccountValidateJWTResult_Success_DEFAULT bool
func (p *AccountValidateJWTResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return AccountValidateJWTResult_Success_DEFAULT
  }
return *p.Success
}
var AccountValidateJWTResult_Status_DEFAULT *Status
func (p *AccountValidateJWTResult) GetStatus() *Status {
  if !p.IsSetStatus() {
    return AccountValidateJWTResult_Status_DEFAULT
  }
return p.Status
}
func (p *AccountValidateJWTResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AccountValidateJWTResult) IsSetStatus() bool {
  return p.Status != nil
}

func (p *AccountValidateJWTResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountValidateJWTResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AccountValidateJWTResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Status = &Status{}
  if err := p.Status.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Status), err)
  }
  return nil
}

func (p *AccountValidateJWTResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ValidateJWT_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountValidateJWTResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AccountValidateJWTResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := p.Status.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Status), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *AccountValidateJWTResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountValidateJWTResult(%+v)", *p)
}


