// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package balanceAccount

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - UserId
//  - OrderId
//  - Currency
//  - Amount
//  - InAddress
//  - OutAddress
//  - TxId
//  - Status
//  - CheckExec
//  - Fee
//  - NetworkFee
//  - TradeTime
type TChainDepositWithdrawResult_ struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  OrderId int32 `thrift:"orderId,3" db:"orderId" json:"orderId"`
  Currency string `thrift:"currency,4" db:"currency" json:"currency"`
  Amount string `thrift:"amount,5" db:"amount" json:"amount"`
  InAddress string `thrift:"inAddress,6" db:"inAddress" json:"inAddress"`
  OutAddress string `thrift:"outAddress,7" db:"outAddress" json:"outAddress"`
  TxId string `thrift:"txId,8" db:"txId" json:"txId"`
  Status int8 `thrift:"status,9" db:"status" json:"status"`
  CheckExec int8 `thrift:"checkExec,10" db:"checkExec" json:"checkExec"`
  Fee string `thrift:"fee,11" db:"fee" json:"fee"`
  NetworkFee string `thrift:"networkFee,12" db:"networkFee" json:"networkFee"`
  TradeTime string `thrift:"tradeTime,13" db:"tradeTime" json:"tradeTime"`
}

func NewTChainDepositWithdrawResult_() *TChainDepositWithdrawResult_ {
  return &TChainDepositWithdrawResult_{}
}


func (p *TChainDepositWithdrawResult_) GetID() int32 {
  return p.ID
}

func (p *TChainDepositWithdrawResult_) GetUserId() int32 {
  return p.UserId
}

func (p *TChainDepositWithdrawResult_) GetOrderId() int32 {
  return p.OrderId
}

func (p *TChainDepositWithdrawResult_) GetCurrency() string {
  return p.Currency
}

func (p *TChainDepositWithdrawResult_) GetAmount() string {
  return p.Amount
}

func (p *TChainDepositWithdrawResult_) GetInAddress() string {
  return p.InAddress
}

func (p *TChainDepositWithdrawResult_) GetOutAddress() string {
  return p.OutAddress
}

func (p *TChainDepositWithdrawResult_) GetTxId() string {
  return p.TxId
}

func (p *TChainDepositWithdrawResult_) GetStatus() int8 {
  return p.Status
}

func (p *TChainDepositWithdrawResult_) GetCheckExec() int8 {
  return p.CheckExec
}

func (p *TChainDepositWithdrawResult_) GetFee() string {
  return p.Fee
}

func (p *TChainDepositWithdrawResult_) GetNetworkFee() string {
  return p.NetworkFee
}

func (p *TChainDepositWithdrawResult_) GetTradeTime() string {
  return p.TradeTime
}
func (p *TChainDepositWithdrawResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.InAddress = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OutAddress = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TxId = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := int8(v)
  p.Status = temp
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := int8(v)
  p.CheckExec = temp
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NetworkFee = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.TradeTime = v
}
  return nil
}

func (p *TChainDepositWithdrawResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TChainDepositWithdrawResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChainDepositWithdrawResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orderId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orderId: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:currency: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:amount: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inAddress", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:inAddress: ", p), err) }
  if err := oprot.WriteString(string(p.InAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inAddress (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:inAddress: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outAddress", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:outAddress: ", p), err) }
  if err := oprot.WriteString(string(p.OutAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outAddress (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:outAddress: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:txId: ", p), err) }
  if err := oprot.WriteString(string(p.TxId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:txId: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.BYTE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err) }
  if err := oprot.WriteByte(int8(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("checkExec", thrift.BYTE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:checkExec: ", p), err) }
  if err := oprot.WriteByte(int8(p.CheckExec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checkExec (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:checkExec: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:fee: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkFee", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:networkFee: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkFee (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:networkFee: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeTime", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:tradeTime: ", p), err) }
  if err := oprot.WriteString(string(p.TradeTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeTime (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:tradeTime: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChainDepositWithdrawResult_(%+v)", *p)
}

// Attributes:
//  - TotalCount
//  - Resultlist
type TChainDataViewResult_ struct {
  TotalCount int32 `thrift:"totalCount,1" db:"totalCount" json:"totalCount"`
  Resultlist []*TChainDepositWithdrawResult_ `thrift:"resultlist,2" db:"resultlist" json:"resultlist"`
}

func NewTChainDataViewResult_() *TChainDataViewResult_ {
  return &TChainDataViewResult_{}
}


func (p *TChainDataViewResult_) GetTotalCount() int32 {
  return p.TotalCount
}

func (p *TChainDataViewResult_) GetResultlist() []*TChainDepositWithdrawResult_ {
  return p.Resultlist
}
func (p *TChainDataViewResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChainDataViewResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalCount = v
}
  return nil
}

func (p *TChainDataViewResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TChainDepositWithdrawResult_, 0, size)
  p.Resultlist =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TChainDepositWithdrawResult_{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Resultlist = append(p.Resultlist, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TChainDataViewResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TChainDataViewResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChainDataViewResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalCount", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalCount: ", p), err) }
  return err
}

func (p *TChainDataViewResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resultlist", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resultlist: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resultlist)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Resultlist {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resultlist: ", p), err) }
  return err
}

func (p *TChainDataViewResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChainDataViewResult_(%+v)", *p)
}

// Attributes:
//  - TxId
//  - StartTime
//  - EndTime
//  - OrderId
//  - Status
//  - Currency
//  - Page
//  - PageSize
//  - CheckExec
type TChainDepositWithdrawParams struct {
  TxId string `thrift:"txId,1" db:"txId" json:"txId"`
  StartTime string `thrift:"startTime,2" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,3" db:"endTime" json:"endTime"`
  OrderId int32 `thrift:"orderId,4" db:"orderId" json:"orderId"`
  Status int8 `thrift:"status,5" db:"status" json:"status"`
  Currency string `thrift:"currency,6" db:"currency" json:"currency"`
  Page int32 `thrift:"page,7" db:"page" json:"page"`
  PageSize int32 `thrift:"pageSize,8" db:"pageSize" json:"pageSize"`
  CheckExec int8 `thrift:"checkExec,9" db:"checkExec" json:"checkExec"`
}

func NewTChainDepositWithdrawParams() *TChainDepositWithdrawParams {
  return &TChainDepositWithdrawParams{}
}


func (p *TChainDepositWithdrawParams) GetTxId() string {
  return p.TxId
}

func (p *TChainDepositWithdrawParams) GetStartTime() string {
  return p.StartTime
}

func (p *TChainDepositWithdrawParams) GetEndTime() string {
  return p.EndTime
}

func (p *TChainDepositWithdrawParams) GetOrderId() int32 {
  return p.OrderId
}

func (p *TChainDepositWithdrawParams) GetStatus() int8 {
  return p.Status
}

func (p *TChainDepositWithdrawParams) GetCurrency() string {
  return p.Currency
}

func (p *TChainDepositWithdrawParams) GetPage() int32 {
  return p.Page
}

func (p *TChainDepositWithdrawParams) GetPageSize() int32 {
  return p.PageSize
}

func (p *TChainDepositWithdrawParams) GetCheckExec() int8 {
  return p.CheckExec
}
func (p *TChainDepositWithdrawParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TxId = v
}
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.Status = temp
}
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TChainDepositWithdrawParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := int8(v)
  p.CheckExec = temp
}
  return nil
}

func (p *TChainDepositWithdrawParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TChainDepositWithdrawParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChainDepositWithdrawParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("txId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:txId: ", p), err) }
  if err := oprot.WriteString(string(p.TxId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.txId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:txId: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTime: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endTime: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:orderId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:orderId: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteByte(int8(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currency: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:page: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:pageSize: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("checkExec", thrift.BYTE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:checkExec: ", p), err) }
  if err := oprot.WriteByte(int8(p.CheckExec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checkExec (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:checkExec: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChainDepositWithdrawParams(%+v)", *p)
}

type TChainDepositWithdrawService interface {
  // Parameters:
  //  - Params
  GetChainDeposit(ctx context.Context, params *TChainDepositWithdrawParams) (r *TChainDataViewResult_, err error)
  // Parameters:
  //  - Params
  GetChainWithdraw(ctx context.Context, params *TChainDepositWithdrawParams) (r *TChainDataViewResult_, err error)
}

type TChainDepositWithdrawServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTChainDepositWithdrawService instead
func NewTChainDepositWithdrawServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TChainDepositWithdrawServiceClient {
  return &TChainDepositWithdrawServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTChainDepositWithdrawService instead
func NewTChainDepositWithdrawServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TChainDepositWithdrawServiceClient {
  return &TChainDepositWithdrawServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTChainDepositWithdrawServiceClient(c thrift.TClient) *TChainDepositWithdrawServiceClient {
  return &TChainDepositWithdrawServiceClient{
    c: c,
  }
}

// Parameters:
//  - Params
func (p *TChainDepositWithdrawServiceClient) GetChainDeposit(ctx context.Context, params *TChainDepositWithdrawParams) (r *TChainDataViewResult_, err error) {
  var _args1 TChainDepositWithdrawServiceGetChainDepositArgs
  _args1.Params = params
  var _result2 TChainDepositWithdrawServiceGetChainDepositResult
  if err = p.c.Call(ctx, "getChainDeposit", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TChainDepositWithdrawServiceClient) GetChainWithdraw(ctx context.Context, params *TChainDepositWithdrawParams) (r *TChainDataViewResult_, err error) {
  var _args3 TChainDepositWithdrawServiceGetChainWithdrawArgs
  _args3.Params = params
  var _result4 TChainDepositWithdrawServiceGetChainWithdrawResult
  if err = p.c.Call(ctx, "getChainWithdraw", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

type TChainDepositWithdrawServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TChainDepositWithdrawService
}

func (p *TChainDepositWithdrawServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TChainDepositWithdrawServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TChainDepositWithdrawServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTChainDepositWithdrawServiceProcessor(handler TChainDepositWithdrawService) *TChainDepositWithdrawServiceProcessor {

  self5 := &TChainDepositWithdrawServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self5.processorMap["getChainDeposit"] = &tChainDepositWithdrawServiceProcessorGetChainDeposit{handler:handler}
  self5.processorMap["getChainWithdraw"] = &tChainDepositWithdrawServiceProcessorGetChainWithdraw{handler:handler}
return self5
}

func (p *TChainDepositWithdrawServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x6.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x6

}

type tChainDepositWithdrawServiceProcessorGetChainDeposit struct {
  handler TChainDepositWithdrawService
}

func (p *tChainDepositWithdrawServiceProcessorGetChainDeposit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TChainDepositWithdrawServiceGetChainDepositArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChainDeposit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TChainDepositWithdrawServiceGetChainDepositResult{}
var retval *TChainDataViewResult_
  var err2 error
  if retval, err2 = p.handler.GetChainDeposit(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChainDeposit: " + err2.Error())
    oprot.WriteMessageBegin("getChainDeposit", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChainDeposit", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tChainDepositWithdrawServiceProcessorGetChainWithdraw struct {
  handler TChainDepositWithdrawService
}

func (p *tChainDepositWithdrawServiceProcessorGetChainWithdraw) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TChainDepositWithdrawServiceGetChainWithdrawArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChainWithdraw", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TChainDepositWithdrawServiceGetChainWithdrawResult{}
var retval *TChainDataViewResult_
  var err2 error
  if retval, err2 = p.handler.GetChainWithdraw(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChainWithdraw: " + err2.Error())
    oprot.WriteMessageBegin("getChainWithdraw", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChainWithdraw", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Params
type TChainDepositWithdrawServiceGetChainDepositArgs struct {
  Params *TChainDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTChainDepositWithdrawServiceGetChainDepositArgs() *TChainDepositWithdrawServiceGetChainDepositArgs {
  return &TChainDepositWithdrawServiceGetChainDepositArgs{}
}

var TChainDepositWithdrawServiceGetChainDepositArgs_Params_DEFAULT *TChainDepositWithdrawParams
func (p *TChainDepositWithdrawServiceGetChainDepositArgs) GetParams() *TChainDepositWithdrawParams {
  if !p.IsSetParams() {
    return TChainDepositWithdrawServiceGetChainDepositArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TChainDepositWithdrawServiceGetChainDepositArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TChainDepositWithdrawServiceGetChainDepositArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainDepositArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TChainDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainDepositArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChainDeposit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainDepositArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawServiceGetChainDepositArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChainDepositWithdrawServiceGetChainDepositArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TChainDepositWithdrawServiceGetChainDepositResult struct {
  Success *TChainDataViewResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTChainDepositWithdrawServiceGetChainDepositResult() *TChainDepositWithdrawServiceGetChainDepositResult {
  return &TChainDepositWithdrawServiceGetChainDepositResult{}
}

var TChainDepositWithdrawServiceGetChainDepositResult_Success_DEFAULT *TChainDataViewResult_
func (p *TChainDepositWithdrawServiceGetChainDepositResult) GetSuccess() *TChainDataViewResult_ {
  if !p.IsSetSuccess() {
    return TChainDepositWithdrawServiceGetChainDepositResult_Success_DEFAULT
  }
return p.Success
}
func (p *TChainDepositWithdrawServiceGetChainDepositResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TChainDepositWithdrawServiceGetChainDepositResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainDepositResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChainDataViewResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainDepositResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChainDeposit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainDepositResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TChainDepositWithdrawServiceGetChainDepositResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChainDepositWithdrawServiceGetChainDepositResult(%+v)", *p)
}

// Attributes:
//  - Params
type TChainDepositWithdrawServiceGetChainWithdrawArgs struct {
  Params *TChainDepositWithdrawParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTChainDepositWithdrawServiceGetChainWithdrawArgs() *TChainDepositWithdrawServiceGetChainWithdrawArgs {
  return &TChainDepositWithdrawServiceGetChainWithdrawArgs{}
}

var TChainDepositWithdrawServiceGetChainWithdrawArgs_Params_DEFAULT *TChainDepositWithdrawParams
func (p *TChainDepositWithdrawServiceGetChainWithdrawArgs) GetParams() *TChainDepositWithdrawParams {
  if !p.IsSetParams() {
    return TChainDepositWithdrawServiceGetChainWithdrawArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TChainDepositWithdrawServiceGetChainWithdrawArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TChainDepositWithdrawParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChainWithdraw_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChainDepositWithdrawServiceGetChainWithdrawArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TChainDepositWithdrawServiceGetChainWithdrawResult struct {
  Success *TChainDataViewResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTChainDepositWithdrawServiceGetChainWithdrawResult() *TChainDepositWithdrawServiceGetChainWithdrawResult {
  return &TChainDepositWithdrawServiceGetChainWithdrawResult{}
}

var TChainDepositWithdrawServiceGetChainWithdrawResult_Success_DEFAULT *TChainDataViewResult_
func (p *TChainDepositWithdrawServiceGetChainWithdrawResult) GetSuccess() *TChainDataViewResult_ {
  if !p.IsSetSuccess() {
    return TChainDepositWithdrawServiceGetChainWithdrawResult_Success_DEFAULT
  }
return p.Success
}
func (p *TChainDepositWithdrawServiceGetChainWithdrawResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TChainDataViewResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChainWithdraw_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TChainDepositWithdrawServiceGetChainWithdrawResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TChainDepositWithdrawServiceGetChainWithdrawResult(%+v)", *p)
}


