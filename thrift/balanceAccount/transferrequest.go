// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package balanceAccount

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Type
//  - UserId
//  - Source
//  - SourceId
//  - FromAccount
//  - FromTransactionId
//  - ToAccount
//  - ToTransactionId
//  - Currency
//  - Amount
//  - ProcessTimes
//  - Status
//  - CreatedAt
//  - UpdatedAt
//  - Email
type TTransferRequestResult_ struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Type int32 `thrift:"type,2" db:"type" json:"type"`
  UserId int32 `thrift:"userId,3" db:"userId" json:"userId"`
  Source int32 `thrift:"source,4" db:"source" json:"source"`
  SourceId int32 `thrift:"sourceId,5" db:"sourceId" json:"sourceId"`
  FromAccount string `thrift:"fromAccount,6" db:"fromAccount" json:"fromAccount"`
  FromTransactionId string `thrift:"fromTransactionId,7" db:"fromTransactionId" json:"fromTransactionId"`
  ToAccount string `thrift:"toAccount,8" db:"toAccount" json:"toAccount"`
  ToTransactionId string `thrift:"toTransactionId,9" db:"toTransactionId" json:"toTransactionId"`
  Currency string `thrift:"currency,10" db:"currency" json:"currency"`
  Amount string `thrift:"amount,11" db:"amount" json:"amount"`
  ProcessTimes int32 `thrift:"processTimes,12" db:"processTimes" json:"processTimes"`
  Status int32 `thrift:"status,13" db:"status" json:"status"`
  CreatedAt string `thrift:"createdAt,14" db:"createdAt" json:"createdAt"`
  UpdatedAt string `thrift:"updatedAt,15" db:"updatedAt" json:"updatedAt"`
  Email string `thrift:"email,16" db:"email" json:"email"`
}

func NewTTransferRequestResult_() *TTransferRequestResult_ {
  return &TTransferRequestResult_{}
}


func (p *TTransferRequestResult_) GetID() int32 {
  return p.ID
}

func (p *TTransferRequestResult_) GetType() int32 {
  return p.Type
}

func (p *TTransferRequestResult_) GetUserId() int32 {
  return p.UserId
}

func (p *TTransferRequestResult_) GetSource() int32 {
  return p.Source
}

func (p *TTransferRequestResult_) GetSourceId() int32 {
  return p.SourceId
}

func (p *TTransferRequestResult_) GetFromAccount() string {
  return p.FromAccount
}

func (p *TTransferRequestResult_) GetFromTransactionId() string {
  return p.FromTransactionId
}

func (p *TTransferRequestResult_) GetToAccount() string {
  return p.ToAccount
}

func (p *TTransferRequestResult_) GetToTransactionId() string {
  return p.ToTransactionId
}

func (p *TTransferRequestResult_) GetCurrency() string {
  return p.Currency
}

func (p *TTransferRequestResult_) GetAmount() string {
  return p.Amount
}

func (p *TTransferRequestResult_) GetProcessTimes() int32 {
  return p.ProcessTimes
}

func (p *TTransferRequestResult_) GetStatus() int32 {
  return p.Status
}

func (p *TTransferRequestResult_) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TTransferRequestResult_) GetUpdatedAt() string {
  return p.UpdatedAt
}

func (p *TTransferRequestResult_) GetEmail() string {
  return p.Email
}
func (p *TTransferRequestResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTransferRequestResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SourceId = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FromAccount = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FromTransactionId = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ToAccount = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ToTransactionId = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ProcessTimes = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TTransferRequestResult_)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TTransferRequestResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTransferRequestResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTransferRequestResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userId: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:source: ", p), err) }
  if err := oprot.WriteI32(int32(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:source: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sourceId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sourceId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SourceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sourceId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sourceId: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromAccount", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fromAccount: ", p), err) }
  if err := oprot.WriteString(string(p.FromAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromAccount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fromAccount: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromTransactionId", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fromTransactionId: ", p), err) }
  if err := oprot.WriteString(string(p.FromTransactionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromTransactionId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fromTransactionId: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toAccount", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:toAccount: ", p), err) }
  if err := oprot.WriteString(string(p.ToAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toAccount (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:toAccount: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toTransactionId", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:toTransactionId: ", p), err) }
  if err := oprot.WriteString(string(p.ToTransactionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toTransactionId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:toTransactionId: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:currency: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:amount: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("processTimes", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:processTimes: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProcessTimes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.processTimes (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:processTimes: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:status: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:createdAt: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:updatedAt: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:updatedAt: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:email: ", p), err) }
  return err
}

func (p *TTransferRequestResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTransferRequestResult_(%+v)", *p)
}

// Attributes:
//  - TotalCount
//  - Resultlist
type TTransferRequestDataViewResult_ struct {
  TotalCount int32 `thrift:"totalCount,1" db:"totalCount" json:"totalCount"`
  Resultlist []*TTransferRequestResult_ `thrift:"resultlist,2" db:"resultlist" json:"resultlist"`
}

func NewTTransferRequestDataViewResult_() *TTransferRequestDataViewResult_ {
  return &TTransferRequestDataViewResult_{}
}


func (p *TTransferRequestDataViewResult_) GetTotalCount() int32 {
  return p.TotalCount
}

func (p *TTransferRequestDataViewResult_) GetResultlist() []*TTransferRequestResult_ {
  return p.Resultlist
}
func (p *TTransferRequestDataViewResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTransferRequestDataViewResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalCount = v
}
  return nil
}

func (p *TTransferRequestDataViewResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTransferRequestResult_, 0, size)
  p.Resultlist =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TTransferRequestResult_{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Resultlist = append(p.Resultlist, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTransferRequestDataViewResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTransferRequestDataViewResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTransferRequestDataViewResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalCount", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalCount: ", p), err) }
  return err
}

func (p *TTransferRequestDataViewResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resultlist", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resultlist: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resultlist)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Resultlist {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resultlist: ", p), err) }
  return err
}

func (p *TTransferRequestDataViewResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTransferRequestDataViewResult_(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Email
//  - Source
//  - Type
//  - StartTime
//  - EndTime
//  - Currency
//  - Status
//  - Page
//  - PageSize
type TTransferRequestParams struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  Source int32 `thrift:"source,3" db:"source" json:"source"`
  Type int32 `thrift:"type,4" db:"type" json:"type"`
  StartTime string `thrift:"startTime,5" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,6" db:"endTime" json:"endTime"`
  Currency string `thrift:"currency,7" db:"currency" json:"currency"`
  Status int32 `thrift:"status,8" db:"status" json:"status"`
  Page int32 `thrift:"page,9" db:"page" json:"page"`
  PageSize int32 `thrift:"pageSize,10" db:"pageSize" json:"pageSize"`
}

func NewTTransferRequestParams() *TTransferRequestParams {
  return &TTransferRequestParams{}
}


func (p *TTransferRequestParams) GetUserId() int32 {
  return p.UserId
}

func (p *TTransferRequestParams) GetEmail() string {
  return p.Email
}

func (p *TTransferRequestParams) GetSource() int32 {
  return p.Source
}

func (p *TTransferRequestParams) GetType() int32 {
  return p.Type
}

func (p *TTransferRequestParams) GetStartTime() string {
  return p.StartTime
}

func (p *TTransferRequestParams) GetEndTime() string {
  return p.EndTime
}

func (p *TTransferRequestParams) GetCurrency() string {
  return p.Currency
}

func (p *TTransferRequestParams) GetStatus() int32 {
  return p.Status
}

func (p *TTransferRequestParams) GetPage() int32 {
  return p.Page
}

func (p *TTransferRequestParams) GetPageSize() int32 {
  return p.PageSize
}
func (p *TTransferRequestParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTransferRequestParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Source = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Page = v
}
  return nil
}

func (p *TTransferRequestParams)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TTransferRequestParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTransferRequestParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTransferRequestParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("source", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:source: ", p), err) }
  if err := oprot.WriteI32(int32(p.Source)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.source (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:source: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:startTime: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:endTime: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:currency: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("page", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:page: ", p), err) }
  if err := oprot.WriteI32(int32(p.Page)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.page (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:page: ", p), err) }
  return err
}

func (p *TTransferRequestParams) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pageSize: ", p), err) }
  return err
}

func (p *TTransferRequestParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTransferRequestParams(%+v)", *p)
}

type TTransferRequestService interface {
  // Parameters:
  //  - Params
  GetTransferRequestList(ctx context.Context, params *TTransferRequestParams) (r *TTransferRequestDataViewResult_, err error)
}

type TTransferRequestServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTTransferRequestService instead
func NewTTransferRequestServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TTransferRequestServiceClient {
  return &TTransferRequestServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTTransferRequestService instead
func NewTTransferRequestServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TTransferRequestServiceClient {
  return &TTransferRequestServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTTransferRequestServiceClient(c thrift.TClient) *TTransferRequestServiceClient {
  return &TTransferRequestServiceClient{
    c: c,
  }
}

// Parameters:
//  - Params
func (p *TTransferRequestServiceClient) GetTransferRequestList(ctx context.Context, params *TTransferRequestParams) (r *TTransferRequestDataViewResult_, err error) {
  var _args1 TTransferRequestServiceGetTransferRequestListArgs
  _args1.Params = params
  var _result2 TTransferRequestServiceGetTransferRequestListResult
  if err = p.c.Call(ctx, "getTransferRequestList", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

type TTransferRequestServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TTransferRequestService
}

func (p *TTransferRequestServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TTransferRequestServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TTransferRequestServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTTransferRequestServiceProcessor(handler TTransferRequestService) *TTransferRequestServiceProcessor {

  self3 := &TTransferRequestServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["getTransferRequestList"] = &tTransferRequestServiceProcessorGetTransferRequestList{handler:handler}
return self3
}

func (p *TTransferRequestServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x4

}

type tTransferRequestServiceProcessorGetTransferRequestList struct {
  handler TTransferRequestService
}

func (p *tTransferRequestServiceProcessorGetTransferRequestList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTransferRequestServiceGetTransferRequestListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTransferRequestList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTransferRequestServiceGetTransferRequestListResult{}
var retval *TTransferRequestDataViewResult_
  var err2 error
  if retval, err2 = p.handler.GetTransferRequestList(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTransferRequestList: " + err2.Error())
    oprot.WriteMessageBegin("getTransferRequestList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getTransferRequestList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Params
type TTransferRequestServiceGetTransferRequestListArgs struct {
  Params *TTransferRequestParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTTransferRequestServiceGetTransferRequestListArgs() *TTransferRequestServiceGetTransferRequestListArgs {
  return &TTransferRequestServiceGetTransferRequestListArgs{}
}

var TTransferRequestServiceGetTransferRequestListArgs_Params_DEFAULT *TTransferRequestParams
func (p *TTransferRequestServiceGetTransferRequestListArgs) GetParams() *TTransferRequestParams {
  if !p.IsSetParams() {
    return TTransferRequestServiceGetTransferRequestListArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TTransferRequestServiceGetTransferRequestListArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TTransferRequestServiceGetTransferRequestListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTransferRequestServiceGetTransferRequestListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTransferRequestParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TTransferRequestServiceGetTransferRequestListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTransferRequestList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTransferRequestServiceGetTransferRequestListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TTransferRequestServiceGetTransferRequestListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTransferRequestServiceGetTransferRequestListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TTransferRequestServiceGetTransferRequestListResult struct {
  Success *TTransferRequestDataViewResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTTransferRequestServiceGetTransferRequestListResult() *TTransferRequestServiceGetTransferRequestListResult {
  return &TTransferRequestServiceGetTransferRequestListResult{}
}

var TTransferRequestServiceGetTransferRequestListResult_Success_DEFAULT *TTransferRequestDataViewResult_
func (p *TTransferRequestServiceGetTransferRequestListResult) GetSuccess() *TTransferRequestDataViewResult_ {
  if !p.IsSetSuccess() {
    return TTransferRequestServiceGetTransferRequestListResult_Success_DEFAULT
  }
return p.Success
}
func (p *TTransferRequestServiceGetTransferRequestListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TTransferRequestServiceGetTransferRequestListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTransferRequestServiceGetTransferRequestListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TTransferRequestDataViewResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TTransferRequestServiceGetTransferRequestListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTransferRequestList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTransferRequestServiceGetTransferRequestListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TTransferRequestServiceGetTransferRequestListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTransferRequestServiceGetTransferRequestListResult(%+v)", *p)
}


