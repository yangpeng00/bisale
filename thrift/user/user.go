// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Mobile
//  - Email
//  - Lang
//  - LoginPwd
//  - LoginPwdSalt
//  - TradePwd
//  - TradePwdSalt
//  - Status
//  - CreatedAt
//  - UpdatedAt
//  - ErrorCount
//  - ErrorStartAt
//  - Empty
type TUser struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Mobile string `thrift:"mobile,2" db:"mobile" json:"mobile"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Lang string `thrift:"lang,4" db:"lang" json:"lang"`
  LoginPwd string `thrift:"loginPwd,5" db:"loginPwd" json:"loginPwd"`
  LoginPwdSalt string `thrift:"loginPwdSalt,6" db:"loginPwdSalt" json:"loginPwdSalt"`
  TradePwd string `thrift:"tradePwd,7" db:"tradePwd" json:"tradePwd"`
  TradePwdSalt string `thrift:"tradePwdSalt,8" db:"tradePwdSalt" json:"tradePwdSalt"`
  Status string `thrift:"status,9" db:"status" json:"status"`
  CreatedAt string `thrift:"createdAt,10" db:"createdAt" json:"createdAt"`
  UpdatedAt string `thrift:"updatedAt,11" db:"updatedAt" json:"updatedAt"`
  ErrorCount int32 `thrift:"errorCount,12" db:"errorCount" json:"errorCount"`
  ErrorStartAt string `thrift:"errorStartAt,13" db:"errorStartAt" json:"errorStartAt"`
  Empty bool `thrift:"empty,14" db:"empty" json:"empty,omitempty"`
}

func NewTUser() *TUser {
  return &TUser{}
}


func (p *TUser) GetID() int32 {
  return p.ID
}

func (p *TUser) GetMobile() string {
  return p.Mobile
}

func (p *TUser) GetEmail() string {
  return p.Email
}

func (p *TUser) GetLang() string {
  return p.Lang
}

func (p *TUser) GetLoginPwd() string {
  return p.LoginPwd
}

func (p *TUser) GetLoginPwdSalt() string {
  return p.LoginPwdSalt
}

func (p *TUser) GetTradePwd() string {
  return p.TradePwd
}

func (p *TUser) GetTradePwdSalt() string {
  return p.TradePwdSalt
}

func (p *TUser) GetStatus() string {
  return p.Status
}

func (p *TUser) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUser) GetUpdatedAt() string {
  return p.UpdatedAt
}

func (p *TUser) GetErrorCount() int32 {
  return p.ErrorCount
}

func (p *TUser) GetErrorStartAt() string {
  return p.ErrorStartAt
}
var TUser_Empty_DEFAULT bool = false

func (p *TUser) GetEmpty() bool {
  return p.Empty
}
func (p *TUser) IsSetEmpty() bool {
  return p.Empty != TUser_Empty_DEFAULT
}

func (p *TUser) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUser)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUser)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUser)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUser)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *TUser)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LoginPwd = v
}
  return nil
}

func (p *TUser)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LoginPwdSalt = v
}
  return nil
}

func (p *TUser)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TradePwd = v
}
  return nil
}

func (p *TUser)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TradePwdSalt = v
}
  return nil
}

func (p *TUser)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUser)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUser)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TUser)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ErrorCount = v
}
  return nil
}

func (p *TUser)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ErrorStartAt = v
}
  return nil
}

func (p *TUser)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TUser) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUser) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUser) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mobile: ", p), err) }
  return err
}

func (p *TUser) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUser) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lang: ", p), err) }
  return err
}

func (p *TUser) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginPwd", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:loginPwd: ", p), err) }
  if err := oprot.WriteString(string(p.LoginPwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginPwd (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:loginPwd: ", p), err) }
  return err
}

func (p *TUser) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginPwdSalt", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:loginPwdSalt: ", p), err) }
  if err := oprot.WriteString(string(p.LoginPwdSalt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginPwdSalt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:loginPwdSalt: ", p), err) }
  return err
}

func (p *TUser) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePwd", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tradePwd: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradePwd (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tradePwd: ", p), err) }
  return err
}

func (p *TUser) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePwdSalt", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:tradePwdSalt: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwdSalt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradePwdSalt (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:tradePwdSalt: ", p), err) }
  return err
}

func (p *TUser) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err) }
  return err
}

func (p *TUser) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:createdAt: ", p), err) }
  return err
}

func (p *TUser) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updatedAt: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updatedAt: ", p), err) }
  return err
}

func (p *TUser) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCount", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:errorCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCount (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:errorCount: ", p), err) }
  return err
}

func (p *TUser) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorStartAt", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:errorStartAt: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorStartAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorStartAt (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:errorStartAt: ", p), err) }
  return err
}

func (p *TUser) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:empty: ", p), err) }
  }
  return err
}

func (p *TUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUser(%+v)", *p)
}

// Attributes:
//  - UserName
//  - LoginStatus
//  - AccountStatus
//  - KycStatus
//  - StartPage
//  - PageSize
//  - TraceId
type TUserParams struct {
  UserName string `thrift:"userName,1" db:"userName" json:"userName"`
  LoginStatus string `thrift:"loginStatus,2" db:"loginStatus" json:"loginStatus"`
  AccountStatus string `thrift:"accountStatus,3" db:"accountStatus" json:"accountStatus"`
  KycStatus string `thrift:"kycStatus,4" db:"kycStatus" json:"kycStatus"`
  StartPage int32 `thrift:"startPage,5" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,6" db:"pageSize" json:"pageSize"`
  TraceId string `thrift:"traceId,7" db:"traceId" json:"traceId"`
}

func NewTUserParams() *TUserParams {
  return &TUserParams{}
}


func (p *TUserParams) GetUserName() string {
  return p.UserName
}

func (p *TUserParams) GetLoginStatus() string {
  return p.LoginStatus
}

func (p *TUserParams) GetAccountStatus() string {
  return p.AccountStatus
}

func (p *TUserParams) GetKycStatus() string {
  return p.KycStatus
}

func (p *TUserParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TUserParams) GetPageSize() int32 {
  return p.PageSize
}

func (p *TUserParams) GetTraceId() string {
  return p.TraceId
}
func (p *TUserParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *TUserParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LoginStatus = v
}
  return nil
}

func (p *TUserParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccountStatus = v
}
  return nil
}

func (p *TUserParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KycStatus = v
}
  return nil
}

func (p *TUserParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TUserParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TUserParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userName: ", p), err) }
  return err
}

func (p *TUserParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginStatus", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginStatus: ", p), err) }
  if err := oprot.WriteString(string(p.LoginStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginStatus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginStatus: ", p), err) }
  return err
}

func (p *TUserParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountStatus", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountStatus: ", p), err) }
  if err := oprot.WriteString(string(p.AccountStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountStatus (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountStatus: ", p), err) }
  return err
}

func (p *TUserParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycStatus", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:kycStatus: ", p), err) }
  if err := oprot.WriteString(string(p.KycStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycStatus (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:kycStatus: ", p), err) }
  return err
}

func (p *TUserParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:startPage: ", p), err) }
  return err
}

func (p *TUserParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pageSize: ", p), err) }
  return err
}

func (p *TUserParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:traceId: ", p), err) }
  return err
}

func (p *TUserParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserParams(%+v)", *p)
}

// Attributes:
//  - ID
//  - IdRealName
//  - Email
//  - Mobile
//  - CreatedAt
//  - AccountStatus
//  - LoginStatus
//  - KycStatus
//  - VerifyType
//  - PassportLastName
//  - PassportFirstName
type TUserResults struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  IdRealName string `thrift:"idRealName,2" db:"idRealName" json:"idRealName"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Mobile string `thrift:"mobile,4" db:"mobile" json:"mobile"`
  CreatedAt string `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  AccountStatus string `thrift:"accountStatus,6" db:"accountStatus" json:"accountStatus"`
  LoginStatus string `thrift:"loginStatus,7" db:"loginStatus" json:"loginStatus"`
  KycStatus string `thrift:"kycStatus,8" db:"kycStatus" json:"kycStatus"`
  VerifyType string `thrift:"verifyType,9" db:"verifyType" json:"verifyType"`
  PassportLastName string `thrift:"passportLastName,10" db:"passportLastName" json:"passportLastName"`
  PassportFirstName string `thrift:"passportFirstName,11" db:"passportFirstName" json:"passportFirstName"`
}

func NewTUserResults() *TUserResults {
  return &TUserResults{}
}


func (p *TUserResults) GetID() int32 {
  return p.ID
}

func (p *TUserResults) GetIdRealName() string {
  return p.IdRealName
}

func (p *TUserResults) GetEmail() string {
  return p.Email
}

func (p *TUserResults) GetMobile() string {
  return p.Mobile
}

func (p *TUserResults) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserResults) GetAccountStatus() string {
  return p.AccountStatus
}

func (p *TUserResults) GetLoginStatus() string {
  return p.LoginStatus
}

func (p *TUserResults) GetKycStatus() string {
  return p.KycStatus
}

func (p *TUserResults) GetVerifyType() string {
  return p.VerifyType
}

func (p *TUserResults) GetPassportLastName() string {
  return p.PassportLastName
}

func (p *TUserResults) GetPassportFirstName() string {
  return p.PassportFirstName
}
func (p *TUserResults) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserResults)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserResults)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IdRealName = v
}
  return nil
}

func (p *TUserResults)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserResults)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserResults)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserResults)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AccountStatus = v
}
  return nil
}

func (p *TUserResults)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LoginStatus = v
}
  return nil
}

func (p *TUserResults)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.KycStatus = v
}
  return nil
}

func (p *TUserResults)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VerifyType = v
}
  return nil
}

func (p *TUserResults)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PassportLastName = v
}
  return nil
}

func (p *TUserResults)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PassportFirstName = v
}
  return nil
}

func (p *TUserResults) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserResults"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserResults) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserResults) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idRealName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idRealName: ", p), err) }
  if err := oprot.WriteString(string(p.IdRealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idRealName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idRealName: ", p), err) }
  return err
}

func (p *TUserResults) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUserResults) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mobile: ", p), err) }
  return err
}

func (p *TUserResults) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TUserResults) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountStatus", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accountStatus: ", p), err) }
  if err := oprot.WriteString(string(p.AccountStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountStatus (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accountStatus: ", p), err) }
  return err
}

func (p *TUserResults) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginStatus", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:loginStatus: ", p), err) }
  if err := oprot.WriteString(string(p.LoginStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginStatus (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:loginStatus: ", p), err) }
  return err
}

func (p *TUserResults) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycStatus", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:kycStatus: ", p), err) }
  if err := oprot.WriteString(string(p.KycStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycStatus (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:kycStatus: ", p), err) }
  return err
}

func (p *TUserResults) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifyType", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:verifyType: ", p), err) }
  if err := oprot.WriteString(string(p.VerifyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifyType (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:verifyType: ", p), err) }
  return err
}

func (p *TUserResults) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportLastName", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:passportLastName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportLastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportLastName (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:passportLastName: ", p), err) }
  return err
}

func (p *TUserResults) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportFirstName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:passportFirstName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportFirstName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:passportFirstName: ", p), err) }
  return err
}

func (p *TUserResults) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserResults(%+v)", *p)
}

// Attributes:
//  - ID
//  - IdRealName
//  - Email
//  - Mobile
//  - CreatedAt
//  - AccountStatus
//  - LoginStatus
//  - KycStatus
//  - CountryCode
//  - VerifyType
//  - IdNumber
//  - PassportId
//  - PassportLastName
//  - PassportFirstName
//  - UserKycId
type TUserInfo struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  IdRealName string `thrift:"idRealName,2" db:"idRealName" json:"idRealName"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Mobile string `thrift:"mobile,4" db:"mobile" json:"mobile"`
  CreatedAt string `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  AccountStatus string `thrift:"accountStatus,6" db:"accountStatus" json:"accountStatus"`
  LoginStatus string `thrift:"loginStatus,7" db:"loginStatus" json:"loginStatus"`
  KycStatus string `thrift:"kycStatus,8" db:"kycStatus" json:"kycStatus"`
  CountryCode string `thrift:"countryCode,9" db:"countryCode" json:"countryCode"`
  VerifyType string `thrift:"verifyType,10" db:"verifyType" json:"verifyType"`
  IdNumber string `thrift:"idNumber,11" db:"idNumber" json:"idNumber"`
  PassportId string `thrift:"passportId,12" db:"passportId" json:"passportId"`
  PassportLastName string `thrift:"passportLastName,13" db:"passportLastName" json:"passportLastName"`
  PassportFirstName string `thrift:"passportFirstName,14" db:"passportFirstName" json:"passportFirstName"`
  UserKycId int32 `thrift:"userKycId,15" db:"userKycId" json:"userKycId"`
}

func NewTUserInfo() *TUserInfo {
  return &TUserInfo{}
}


func (p *TUserInfo) GetID() int32 {
  return p.ID
}

func (p *TUserInfo) GetIdRealName() string {
  return p.IdRealName
}

func (p *TUserInfo) GetEmail() string {
  return p.Email
}

func (p *TUserInfo) GetMobile() string {
  return p.Mobile
}

func (p *TUserInfo) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserInfo) GetAccountStatus() string {
  return p.AccountStatus
}

func (p *TUserInfo) GetLoginStatus() string {
  return p.LoginStatus
}

func (p *TUserInfo) GetKycStatus() string {
  return p.KycStatus
}

func (p *TUserInfo) GetCountryCode() string {
  return p.CountryCode
}

func (p *TUserInfo) GetVerifyType() string {
  return p.VerifyType
}

func (p *TUserInfo) GetIdNumber() string {
  return p.IdNumber
}

func (p *TUserInfo) GetPassportId() string {
  return p.PassportId
}

func (p *TUserInfo) GetPassportLastName() string {
  return p.PassportLastName
}

func (p *TUserInfo) GetPassportFirstName() string {
  return p.PassportFirstName
}

func (p *TUserInfo) GetUserKycId() int32 {
  return p.UserKycId
}
func (p *TUserInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IdRealName = v
}
  return nil
}

func (p *TUserInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AccountStatus = v
}
  return nil
}

func (p *TUserInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LoginStatus = v
}
  return nil
}

func (p *TUserInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.KycStatus = v
}
  return nil
}

func (p *TUserInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *TUserInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VerifyType = v
}
  return nil
}

func (p *TUserInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IdNumber = v
}
  return nil
}

func (p *TUserInfo)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PassportId = v
}
  return nil
}

func (p *TUserInfo)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PassportLastName = v
}
  return nil
}

func (p *TUserInfo)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.PassportFirstName = v
}
  return nil
}

func (p *TUserInfo)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.UserKycId = v
}
  return nil
}

func (p *TUserInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idRealName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idRealName: ", p), err) }
  if err := oprot.WriteString(string(p.IdRealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idRealName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idRealName: ", p), err) }
  return err
}

func (p *TUserInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUserInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mobile: ", p), err) }
  return err
}

func (p *TUserInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TUserInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountStatus", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accountStatus: ", p), err) }
  if err := oprot.WriteString(string(p.AccountStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountStatus (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accountStatus: ", p), err) }
  return err
}

func (p *TUserInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginStatus", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:loginStatus: ", p), err) }
  if err := oprot.WriteString(string(p.LoginStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginStatus (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:loginStatus: ", p), err) }
  return err
}

func (p *TUserInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycStatus", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:kycStatus: ", p), err) }
  if err := oprot.WriteString(string(p.KycStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycStatus (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:kycStatus: ", p), err) }
  return err
}

func (p *TUserInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:countryCode: ", p), err) }
  if err := oprot.WriteString(string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:countryCode: ", p), err) }
  return err
}

func (p *TUserInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifyType", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:verifyType: ", p), err) }
  if err := oprot.WriteString(string(p.VerifyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifyType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:verifyType: ", p), err) }
  return err
}

func (p *TUserInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idNumber", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:idNumber: ", p), err) }
  if err := oprot.WriteString(string(p.IdNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idNumber (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:idNumber: ", p), err) }
  return err
}

func (p *TUserInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:passportId: ", p), err) }
  if err := oprot.WriteString(string(p.PassportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:passportId: ", p), err) }
  return err
}

func (p *TUserInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportLastName", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:passportLastName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportLastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportLastName (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:passportLastName: ", p), err) }
  return err
}

func (p *TUserInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportFirstName", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:passportFirstName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportFirstName (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:passportFirstName: ", p), err) }
  return err
}

func (p *TUserInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userKycId", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:userKycId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserKycId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userKycId (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:userKycId: ", p), err) }
  return err
}

func (p *TUserInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserInfo(%+v)", *p)
}

type TUserService interface {
  // Parameters:
  //  - Params
  SelectUserByConditions(ctx context.Context, params *TUserParams) (r []*TUserResults, err error)
  // Parameters:
  //  - Params
  SelectUserCountByConditions(ctx context.Context, params *TUserParams) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  UpdateUserStatusByUserId(ctx context.Context, traceId string, userId int32) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectUserBaseInfoByUserId(ctx context.Context, traceId string, userId int32) (r *TUserInfo, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  ResetGoogleCode(ctx context.Context, traceId string, userId int32) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectUserById(ctx context.Context, traceId string, userId int32) (r *TUser, err error)
}

type TUserServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTUserService instead
func NewTUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TUserServiceClient {
  return &TUserServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTUserService instead
func NewTUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TUserServiceClient {
  return &TUserServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTUserServiceClient(c thrift.TClient) *TUserServiceClient {
  return &TUserServiceClient{
    c: c,
  }
}

// Parameters:
//  - Params
func (p *TUserServiceClient) SelectUserByConditions(ctx context.Context, params *TUserParams) (r []*TUserResults, err error) {
  var _args0 TUserServiceSelectUserByConditionsArgs
  _args0.Params = params
  var _result1 TUserServiceSelectUserByConditionsResult
  if err = p.c.Call(ctx, "selectUserByConditions", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TUserServiceClient) SelectUserCountByConditions(ctx context.Context, params *TUserParams) (r int32, err error) {
  var _args2 TUserServiceSelectUserCountByConditionsArgs
  _args2.Params = params
  var _result3 TUserServiceSelectUserCountByConditionsResult
  if err = p.c.Call(ctx, "selectUserCountByConditions", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) UpdateUserStatusByUserId(ctx context.Context, traceId string, userId int32) (r bool, err error) {
  var _args4 TUserServiceUpdateUserStatusByUserIdArgs
  _args4.TraceId = traceId
  _args4.UserId = userId
  var _result5 TUserServiceUpdateUserStatusByUserIdResult
  if err = p.c.Call(ctx, "updateUserStatusByUserId", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) SelectUserBaseInfoByUserId(ctx context.Context, traceId string, userId int32) (r *TUserInfo, err error) {
  var _args6 TUserServiceSelectUserBaseInfoByUserIdArgs
  _args6.TraceId = traceId
  _args6.UserId = userId
  var _result7 TUserServiceSelectUserBaseInfoByUserIdResult
  if err = p.c.Call(ctx, "selectUserBaseInfoByUserId", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) ResetGoogleCode(ctx context.Context, traceId string, userId int32) (r bool, err error) {
  var _args8 TUserServiceResetGoogleCodeArgs
  _args8.TraceId = traceId
  _args8.UserId = userId
  var _result9 TUserServiceResetGoogleCodeResult
  if err = p.c.Call(ctx, "resetGoogleCode", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) SelectUserById(ctx context.Context, traceId string, userId int32) (r *TUser, err error) {
  var _args10 TUserServiceSelectUserByIdArgs
  _args10.TraceId = traceId
  _args10.UserId = userId
  var _result11 TUserServiceSelectUserByIdResult
  if err = p.c.Call(ctx, "selectUserById", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type TUserServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TUserService
}

func (p *TUserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TUserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TUserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTUserServiceProcessor(handler TUserService) *TUserServiceProcessor {

  self12 := &TUserServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["selectUserByConditions"] = &tUserServiceProcessorSelectUserByConditions{handler:handler}
  self12.processorMap["selectUserCountByConditions"] = &tUserServiceProcessorSelectUserCountByConditions{handler:handler}
  self12.processorMap["updateUserStatusByUserId"] = &tUserServiceProcessorUpdateUserStatusByUserId{handler:handler}
  self12.processorMap["selectUserBaseInfoByUserId"] = &tUserServiceProcessorSelectUserBaseInfoByUserId{handler:handler}
  self12.processorMap["resetGoogleCode"] = &tUserServiceProcessorResetGoogleCode{handler:handler}
  self12.processorMap["selectUserById"] = &tUserServiceProcessorSelectUserById{handler:handler}
return self12
}

func (p *TUserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type tUserServiceProcessorSelectUserByConditions struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserByConditionsResult{}
var retval []*TUserResults
  var err2 error
  if retval, err2 = p.handler.SelectUserByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectUserByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserCountByConditions struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectUserCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectUserCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectUserCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorUpdateUserStatusByUserId struct {
  handler TUserService
}

func (p *tUserServiceProcessorUpdateUserStatusByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceUpdateUserStatusByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUserStatusByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceUpdateUserStatusByUserIdResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateUserStatusByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserStatusByUserId: " + err2.Error())
    oprot.WriteMessageBegin("updateUserStatusByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateUserStatusByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserBaseInfoByUserId struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserBaseInfoByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserBaseInfoByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserBaseInfoByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserBaseInfoByUserIdResult{}
var retval *TUserInfo
  var err2 error
  if retval, err2 = p.handler.SelectUserBaseInfoByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserBaseInfoByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectUserBaseInfoByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserBaseInfoByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorResetGoogleCode struct {
  handler TUserService
}

func (p *tUserServiceProcessorResetGoogleCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceResetGoogleCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("resetGoogleCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceResetGoogleCodeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ResetGoogleCode(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resetGoogleCode: " + err2.Error())
    oprot.WriteMessageBegin("resetGoogleCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("resetGoogleCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserById struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserByIdResult{}
var retval *TUser
  var err2 error
  if retval, err2 = p.handler.SelectUserById(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserById: " + err2.Error())
    oprot.WriteMessageBegin("selectUserById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Params
type TUserServiceSelectUserByConditionsArgs struct {
  Params *TUserParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTUserServiceSelectUserByConditionsArgs() *TUserServiceSelectUserByConditionsArgs {
  return &TUserServiceSelectUserByConditionsArgs{}
}

var TUserServiceSelectUserByConditionsArgs_Params_DEFAULT *TUserParams
func (p *TUserServiceSelectUserByConditionsArgs) GetParams() *TUserParams {
  if !p.IsSetParams() {
    return TUserServiceSelectUserByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TUserServiceSelectUserByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TUserServiceSelectUserByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TUserParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserByConditionsResult struct {
  Success []*TUserResults `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserByConditionsResult() *TUserServiceSelectUserByConditionsResult {
  return &TUserServiceSelectUserByConditionsResult{}
}

var TUserServiceSelectUserByConditionsResult_Success_DEFAULT []*TUserResults

func (p *TUserServiceSelectUserByConditionsResult) GetSuccess() []*TUserResults {
  return p.Success
}
func (p *TUserServiceSelectUserByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TUserResults, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &TUserResults{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserServiceSelectUserByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TUserServiceSelectUserCountByConditionsArgs struct {
  Params *TUserParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTUserServiceSelectUserCountByConditionsArgs() *TUserServiceSelectUserCountByConditionsArgs {
  return &TUserServiceSelectUserCountByConditionsArgs{}
}

var TUserServiceSelectUserCountByConditionsArgs_Params_DEFAULT *TUserParams
func (p *TUserServiceSelectUserCountByConditionsArgs) GetParams() *TUserParams {
  if !p.IsSetParams() {
    return TUserServiceSelectUserCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TUserServiceSelectUserCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TUserServiceSelectUserCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TUserParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserCountByConditionsResult() *TUserServiceSelectUserCountByConditionsResult {
  return &TUserServiceSelectUserCountByConditionsResult{}
}

var TUserServiceSelectUserCountByConditionsResult_Success_DEFAULT int32
func (p *TUserServiceSelectUserCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TUserServiceSelectUserCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceSelectUserCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceUpdateUserStatusByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceUpdateUserStatusByUserIdArgs() *TUserServiceUpdateUserStatusByUserIdArgs {
  return &TUserServiceUpdateUserStatusByUserIdArgs{}
}


func (p *TUserServiceUpdateUserStatusByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceUpdateUserStatusByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserStatusByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceUpdateUserStatusByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceUpdateUserStatusByUserIdResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceUpdateUserStatusByUserIdResult() *TUserServiceUpdateUserStatusByUserIdResult {
  return &TUserServiceUpdateUserStatusByUserIdResult{}
}

var TUserServiceUpdateUserStatusByUserIdResult_Success_DEFAULT bool
func (p *TUserServiceUpdateUserStatusByUserIdResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TUserServiceUpdateUserStatusByUserIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceUpdateUserStatusByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceUpdateUserStatusByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserStatusByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceUpdateUserStatusByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceUpdateUserStatusByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceSelectUserBaseInfoByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceSelectUserBaseInfoByUserIdArgs() *TUserServiceSelectUserBaseInfoByUserIdArgs {
  return &TUserServiceSelectUserBaseInfoByUserIdArgs{}
}


func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserBaseInfoByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserBaseInfoByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserBaseInfoByUserIdResult struct {
  Success *TUserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserBaseInfoByUserIdResult() *TUserServiceSelectUserBaseInfoByUserIdResult {
  return &TUserServiceSelectUserBaseInfoByUserIdResult{}
}

var TUserServiceSelectUserBaseInfoByUserIdResult_Success_DEFAULT *TUserInfo
func (p *TUserServiceSelectUserBaseInfoByUserIdResult) GetSuccess() *TUserInfo {
  if !p.IsSetSuccess() {
    return TUserServiceSelectUserBaseInfoByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TUserServiceSelectUserBaseInfoByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserBaseInfoByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserBaseInfoByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceResetGoogleCodeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceResetGoogleCodeArgs() *TUserServiceResetGoogleCodeArgs {
  return &TUserServiceResetGoogleCodeArgs{}
}


func (p *TUserServiceResetGoogleCodeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceResetGoogleCodeArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceResetGoogleCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceResetGoogleCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceResetGoogleCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceResetGoogleCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("resetGoogleCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceResetGoogleCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceResetGoogleCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceResetGoogleCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceResetGoogleCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceResetGoogleCodeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceResetGoogleCodeResult() *TUserServiceResetGoogleCodeResult {
  return &TUserServiceResetGoogleCodeResult{}
}

var TUserServiceResetGoogleCodeResult_Success_DEFAULT bool
func (p *TUserServiceResetGoogleCodeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TUserServiceResetGoogleCodeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceResetGoogleCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceResetGoogleCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceResetGoogleCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceResetGoogleCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("resetGoogleCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceResetGoogleCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceResetGoogleCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceResetGoogleCodeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceSelectUserByIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceSelectUserByIdArgs() *TUserServiceSelectUserByIdArgs {
  return &TUserServiceSelectUserByIdArgs{}
}


func (p *TUserServiceSelectUserByIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectUserByIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceSelectUserByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectUserByIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceSelectUserByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserByIdResult struct {
  Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserByIdResult() *TUserServiceSelectUserByIdResult {
  return &TUserServiceSelectUserByIdResult{}
}

var TUserServiceSelectUserByIdResult_Success_DEFAULT *TUser
func (p *TUserServiceSelectUserByIdResult) GetSuccess() *TUser {
  if !p.IsSetSuccess() {
    return TUserServiceSelectUserByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TUserServiceSelectUserByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUser{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserByIdResult(%+v)", *p)
}


