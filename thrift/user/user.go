// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - Mobile
//  - Email
//  - Lang
//  - LoginPwd
//  - LoginPwdSalt
//  - TradePwd
//  - TradePwdSalt
//  - Status
//  - CreatedAt
//  - UpdatedAt
//  - ErrorCount
//  - ErrorStartAt
//  - Empty
//  - PrefixMobile
type TUser struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Mobile string `thrift:"mobile,2" db:"mobile" json:"mobile"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Lang string `thrift:"lang,4" db:"lang" json:"lang"`
  LoginPwd string `thrift:"loginPwd,5" db:"loginPwd" json:"loginPwd"`
  LoginPwdSalt string `thrift:"loginPwdSalt,6" db:"loginPwdSalt" json:"loginPwdSalt"`
  TradePwd string `thrift:"tradePwd,7" db:"tradePwd" json:"tradePwd"`
  TradePwdSalt string `thrift:"tradePwdSalt,8" db:"tradePwdSalt" json:"tradePwdSalt"`
  Status string `thrift:"status,9" db:"status" json:"status"`
  CreatedAt string `thrift:"createdAt,10" db:"createdAt" json:"createdAt"`
  UpdatedAt string `thrift:"updatedAt,11" db:"updatedAt" json:"updatedAt"`
  ErrorCount int32 `thrift:"errorCount,12" db:"errorCount" json:"errorCount"`
  ErrorStartAt string `thrift:"errorStartAt,13" db:"errorStartAt" json:"errorStartAt"`
  Empty bool `thrift:"empty,14" db:"empty" json:"empty,omitempty"`
  PrefixMobile string `thrift:"prefixMobile,15" db:"prefixMobile" json:"prefixMobile"`
}

func NewTUser() *TUser {
  return &TUser{}
}


func (p *TUser) GetID() int32 {
  return p.ID
}

func (p *TUser) GetMobile() string {
  return p.Mobile
}

func (p *TUser) GetEmail() string {
  return p.Email
}

func (p *TUser) GetLang() string {
  return p.Lang
}

func (p *TUser) GetLoginPwd() string {
  return p.LoginPwd
}

func (p *TUser) GetLoginPwdSalt() string {
  return p.LoginPwdSalt
}

func (p *TUser) GetTradePwd() string {
  return p.TradePwd
}

func (p *TUser) GetTradePwdSalt() string {
  return p.TradePwdSalt
}

func (p *TUser) GetStatus() string {
  return p.Status
}

func (p *TUser) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUser) GetUpdatedAt() string {
  return p.UpdatedAt
}

func (p *TUser) GetErrorCount() int32 {
  return p.ErrorCount
}

func (p *TUser) GetErrorStartAt() string {
  return p.ErrorStartAt
}
var TUser_Empty_DEFAULT bool = false

func (p *TUser) GetEmpty() bool {
  return p.Empty
}

func (p *TUser) GetPrefixMobile() string {
  return p.PrefixMobile
}
func (p *TUser) IsSetEmpty() bool {
  return p.Empty != TUser_Empty_DEFAULT
}

func (p *TUser) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUser)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUser)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUser)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUser)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *TUser)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LoginPwd = v
}
  return nil
}

func (p *TUser)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LoginPwdSalt = v
}
  return nil
}

func (p *TUser)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TradePwd = v
}
  return nil
}

func (p *TUser)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TradePwdSalt = v
}
  return nil
}

func (p *TUser)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUser)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUser)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TUser)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ErrorCount = v
}
  return nil
}

func (p *TUser)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ErrorStartAt = v
}
  return nil
}

func (p *TUser)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TUser)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PrefixMobile = v
}
  return nil
}

func (p *TUser) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUser) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUser) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mobile: ", p), err) }
  return err
}

func (p *TUser) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUser) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lang: ", p), err) }
  return err
}

func (p *TUser) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginPwd", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:loginPwd: ", p), err) }
  if err := oprot.WriteString(string(p.LoginPwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginPwd (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:loginPwd: ", p), err) }
  return err
}

func (p *TUser) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginPwdSalt", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:loginPwdSalt: ", p), err) }
  if err := oprot.WriteString(string(p.LoginPwdSalt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginPwdSalt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:loginPwdSalt: ", p), err) }
  return err
}

func (p *TUser) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePwd", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tradePwd: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradePwd (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tradePwd: ", p), err) }
  return err
}

func (p *TUser) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradePwdSalt", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:tradePwdSalt: ", p), err) }
  if err := oprot.WriteString(string(p.TradePwdSalt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradePwdSalt (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:tradePwdSalt: ", p), err) }
  return err
}

func (p *TUser) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err) }
  return err
}

func (p *TUser) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:createdAt: ", p), err) }
  return err
}

func (p *TUser) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updatedAt: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updatedAt: ", p), err) }
  return err
}

func (p *TUser) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCount", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:errorCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCount (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:errorCount: ", p), err) }
  return err
}

func (p *TUser) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorStartAt", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:errorStartAt: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorStartAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorStartAt (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:errorStartAt: ", p), err) }
  return err
}

func (p *TUser) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:empty: ", p), err) }
  }
  return err
}

func (p *TUser) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prefixMobile", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:prefixMobile: ", p), err) }
  if err := oprot.WriteString(string(p.PrefixMobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prefixMobile (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:prefixMobile: ", p), err) }
  return err
}

func (p *TUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUser(%+v)", *p)
}

// Attributes:
//  - UserName
//  - LoginStatus
//  - AccountStatus
//  - KycStatus
//  - StartPage
//  - PageSize
//  - TraceId
//  - UserId
//  - Mobile
//  - Email
type TUserParams struct {
  UserName string `thrift:"userName,1" db:"userName" json:"userName"`
  LoginStatus string `thrift:"loginStatus,2" db:"loginStatus" json:"loginStatus"`
  AccountStatus string `thrift:"accountStatus,3" db:"accountStatus" json:"accountStatus"`
  KycStatus string `thrift:"kycStatus,4" db:"kycStatus" json:"kycStatus"`
  StartPage int32 `thrift:"startPage,5" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,6" db:"pageSize" json:"pageSize"`
  TraceId string `thrift:"traceId,7" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,8" db:"userId" json:"userId"`
  Mobile string `thrift:"mobile,9" db:"mobile" json:"mobile"`
  Email string `thrift:"email,10" db:"email" json:"email"`
}

func NewTUserParams() *TUserParams {
  return &TUserParams{}
}


func (p *TUserParams) GetUserName() string {
  return p.UserName
}

func (p *TUserParams) GetLoginStatus() string {
  return p.LoginStatus
}

func (p *TUserParams) GetAccountStatus() string {
  return p.AccountStatus
}

func (p *TUserParams) GetKycStatus() string {
  return p.KycStatus
}

func (p *TUserParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TUserParams) GetPageSize() int32 {
  return p.PageSize
}

func (p *TUserParams) GetTraceId() string {
  return p.TraceId
}

func (p *TUserParams) GetUserId() int32 {
  return p.UserId
}

func (p *TUserParams) GetMobile() string {
  return p.Mobile
}

func (p *TUserParams) GetEmail() string {
  return p.Email
}
func (p *TUserParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *TUserParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LoginStatus = v
}
  return nil
}

func (p *TUserParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccountStatus = v
}
  return nil
}

func (p *TUserParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KycStatus = v
}
  return nil
}

func (p *TUserParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TUserParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TUserParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserParams)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userName: ", p), err) }
  return err
}

func (p *TUserParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginStatus", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginStatus: ", p), err) }
  if err := oprot.WriteString(string(p.LoginStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginStatus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginStatus: ", p), err) }
  return err
}

func (p *TUserParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountStatus", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountStatus: ", p), err) }
  if err := oprot.WriteString(string(p.AccountStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountStatus (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountStatus: ", p), err) }
  return err
}

func (p *TUserParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycStatus", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:kycStatus: ", p), err) }
  if err := oprot.WriteString(string(p.KycStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycStatus (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:kycStatus: ", p), err) }
  return err
}

func (p *TUserParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:startPage: ", p), err) }
  return err
}

func (p *TUserParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pageSize: ", p), err) }
  return err
}

func (p *TUserParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:traceId: ", p), err) }
  return err
}

func (p *TUserParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:userId: ", p), err) }
  return err
}

func (p *TUserParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:mobile: ", p), err) }
  return err
}

func (p *TUserParams) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:email: ", p), err) }
  return err
}

func (p *TUserParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserParams(%+v)", *p)
}

// Attributes:
//  - ID
//  - IdRealName
//  - Email
//  - Mobile
//  - CreatedAt
//  - AccountStatus
//  - LoginStatus
//  - KycStatus
//  - VerifyType
//  - PassportLastName
//  - PassportFirstName
type TUserResults struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  IdRealName string `thrift:"idRealName,2" db:"idRealName" json:"idRealName"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Mobile string `thrift:"mobile,4" db:"mobile" json:"mobile"`
  CreatedAt string `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  AccountStatus string `thrift:"accountStatus,6" db:"accountStatus" json:"accountStatus"`
  LoginStatus string `thrift:"loginStatus,7" db:"loginStatus" json:"loginStatus"`
  KycStatus string `thrift:"kycStatus,8" db:"kycStatus" json:"kycStatus"`
  VerifyType string `thrift:"verifyType,9" db:"verifyType" json:"verifyType"`
  PassportLastName string `thrift:"passportLastName,10" db:"passportLastName" json:"passportLastName"`
  PassportFirstName string `thrift:"passportFirstName,11" db:"passportFirstName" json:"passportFirstName"`
}

func NewTUserResults() *TUserResults {
  return &TUserResults{}
}


func (p *TUserResults) GetID() int32 {
  return p.ID
}

func (p *TUserResults) GetIdRealName() string {
  return p.IdRealName
}

func (p *TUserResults) GetEmail() string {
  return p.Email
}

func (p *TUserResults) GetMobile() string {
  return p.Mobile
}

func (p *TUserResults) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserResults) GetAccountStatus() string {
  return p.AccountStatus
}

func (p *TUserResults) GetLoginStatus() string {
  return p.LoginStatus
}

func (p *TUserResults) GetKycStatus() string {
  return p.KycStatus
}

func (p *TUserResults) GetVerifyType() string {
  return p.VerifyType
}

func (p *TUserResults) GetPassportLastName() string {
  return p.PassportLastName
}

func (p *TUserResults) GetPassportFirstName() string {
  return p.PassportFirstName
}
func (p *TUserResults) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserResults)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserResults)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IdRealName = v
}
  return nil
}

func (p *TUserResults)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserResults)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserResults)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserResults)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AccountStatus = v
}
  return nil
}

func (p *TUserResults)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LoginStatus = v
}
  return nil
}

func (p *TUserResults)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.KycStatus = v
}
  return nil
}

func (p *TUserResults)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VerifyType = v
}
  return nil
}

func (p *TUserResults)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PassportLastName = v
}
  return nil
}

func (p *TUserResults)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PassportFirstName = v
}
  return nil
}

func (p *TUserResults) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserResults"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserResults) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserResults) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idRealName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idRealName: ", p), err) }
  if err := oprot.WriteString(string(p.IdRealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idRealName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idRealName: ", p), err) }
  return err
}

func (p *TUserResults) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUserResults) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mobile: ", p), err) }
  return err
}

func (p *TUserResults) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TUserResults) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountStatus", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accountStatus: ", p), err) }
  if err := oprot.WriteString(string(p.AccountStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountStatus (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accountStatus: ", p), err) }
  return err
}

func (p *TUserResults) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginStatus", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:loginStatus: ", p), err) }
  if err := oprot.WriteString(string(p.LoginStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginStatus (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:loginStatus: ", p), err) }
  return err
}

func (p *TUserResults) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycStatus", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:kycStatus: ", p), err) }
  if err := oprot.WriteString(string(p.KycStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycStatus (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:kycStatus: ", p), err) }
  return err
}

func (p *TUserResults) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifyType", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:verifyType: ", p), err) }
  if err := oprot.WriteString(string(p.VerifyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifyType (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:verifyType: ", p), err) }
  return err
}

func (p *TUserResults) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportLastName", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:passportLastName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportLastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportLastName (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:passportLastName: ", p), err) }
  return err
}

func (p *TUserResults) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportFirstName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:passportFirstName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportFirstName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:passportFirstName: ", p), err) }
  return err
}

func (p *TUserResults) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserResults(%+v)", *p)
}

// Attributes:
//  - ID
//  - IdRealName
//  - Email
//  - Mobile
//  - CreatedAt
//  - AccountStatus
//  - LoginStatus
//  - KycStatus
//  - CountryCode
//  - VerifyType
//  - IdNumber
//  - PassportId
//  - PassportLastName
//  - PassportFirstName
//  - UserKycId
//  - Account
//  - AccountPassword
type TUserInfo struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  IdRealName string `thrift:"idRealName,2" db:"idRealName" json:"idRealName"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Mobile string `thrift:"mobile,4" db:"mobile" json:"mobile"`
  CreatedAt string `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  AccountStatus string `thrift:"accountStatus,6" db:"accountStatus" json:"accountStatus"`
  LoginStatus string `thrift:"loginStatus,7" db:"loginStatus" json:"loginStatus"`
  KycStatus string `thrift:"kycStatus,8" db:"kycStatus" json:"kycStatus"`
  CountryCode string `thrift:"countryCode,9" db:"countryCode" json:"countryCode"`
  VerifyType string `thrift:"verifyType,10" db:"verifyType" json:"verifyType"`
  IdNumber string `thrift:"idNumber,11" db:"idNumber" json:"idNumber"`
  PassportId string `thrift:"passportId,12" db:"passportId" json:"passportId"`
  PassportLastName string `thrift:"passportLastName,13" db:"passportLastName" json:"passportLastName"`
  PassportFirstName string `thrift:"passportFirstName,14" db:"passportFirstName" json:"passportFirstName"`
  UserKycId int32 `thrift:"userKycId,15" db:"userKycId" json:"userKycId"`
  Account string `thrift:"account,16" db:"account" json:"account"`
  AccountPassword string `thrift:"accountPassword,17" db:"accountPassword" json:"accountPassword"`
}

func NewTUserInfo() *TUserInfo {
  return &TUserInfo{}
}


func (p *TUserInfo) GetID() int32 {
  return p.ID
}

func (p *TUserInfo) GetIdRealName() string {
  return p.IdRealName
}

func (p *TUserInfo) GetEmail() string {
  return p.Email
}

func (p *TUserInfo) GetMobile() string {
  return p.Mobile
}

func (p *TUserInfo) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserInfo) GetAccountStatus() string {
  return p.AccountStatus
}

func (p *TUserInfo) GetLoginStatus() string {
  return p.LoginStatus
}

func (p *TUserInfo) GetKycStatus() string {
  return p.KycStatus
}

func (p *TUserInfo) GetCountryCode() string {
  return p.CountryCode
}

func (p *TUserInfo) GetVerifyType() string {
  return p.VerifyType
}

func (p *TUserInfo) GetIdNumber() string {
  return p.IdNumber
}

func (p *TUserInfo) GetPassportId() string {
  return p.PassportId
}

func (p *TUserInfo) GetPassportLastName() string {
  return p.PassportLastName
}

func (p *TUserInfo) GetPassportFirstName() string {
  return p.PassportFirstName
}

func (p *TUserInfo) GetUserKycId() int32 {
  return p.UserKycId
}

func (p *TUserInfo) GetAccount() string {
  return p.Account
}

func (p *TUserInfo) GetAccountPassword() string {
  return p.AccountPassword
}
func (p *TUserInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IdRealName = v
}
  return nil
}

func (p *TUserInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AccountStatus = v
}
  return nil
}

func (p *TUserInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LoginStatus = v
}
  return nil
}

func (p *TUserInfo)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.KycStatus = v
}
  return nil
}

func (p *TUserInfo)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *TUserInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.VerifyType = v
}
  return nil
}

func (p *TUserInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IdNumber = v
}
  return nil
}

func (p *TUserInfo)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PassportId = v
}
  return nil
}

func (p *TUserInfo)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PassportLastName = v
}
  return nil
}

func (p *TUserInfo)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.PassportFirstName = v
}
  return nil
}

func (p *TUserInfo)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.UserKycId = v
}
  return nil
}

func (p *TUserInfo)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *TUserInfo)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.AccountPassword = v
}
  return nil
}

func (p *TUserInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idRealName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idRealName: ", p), err) }
  if err := oprot.WriteString(string(p.IdRealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idRealName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idRealName: ", p), err) }
  return err
}

func (p *TUserInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUserInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mobile: ", p), err) }
  return err
}

func (p *TUserInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TUserInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountStatus", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accountStatus: ", p), err) }
  if err := oprot.WriteString(string(p.AccountStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountStatus (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accountStatus: ", p), err) }
  return err
}

func (p *TUserInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginStatus", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:loginStatus: ", p), err) }
  if err := oprot.WriteString(string(p.LoginStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loginStatus (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:loginStatus: ", p), err) }
  return err
}

func (p *TUserInfo) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycStatus", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:kycStatus: ", p), err) }
  if err := oprot.WriteString(string(p.KycStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycStatus (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:kycStatus: ", p), err) }
  return err
}

func (p *TUserInfo) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:countryCode: ", p), err) }
  if err := oprot.WriteString(string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:countryCode: ", p), err) }
  return err
}

func (p *TUserInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifyType", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:verifyType: ", p), err) }
  if err := oprot.WriteString(string(p.VerifyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifyType (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:verifyType: ", p), err) }
  return err
}

func (p *TUserInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idNumber", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:idNumber: ", p), err) }
  if err := oprot.WriteString(string(p.IdNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idNumber (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:idNumber: ", p), err) }
  return err
}

func (p *TUserInfo) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:passportId: ", p), err) }
  if err := oprot.WriteString(string(p.PassportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:passportId: ", p), err) }
  return err
}

func (p *TUserInfo) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportLastName", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:passportLastName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportLastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportLastName (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:passportLastName: ", p), err) }
  return err
}

func (p *TUserInfo) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportFirstName", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:passportFirstName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportFirstName (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:passportFirstName: ", p), err) }
  return err
}

func (p *TUserInfo) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userKycId", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:userKycId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserKycId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userKycId (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:userKycId: ", p), err) }
  return err
}

func (p *TUserInfo) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:account: ", p), err) }
  return err
}

func (p *TUserInfo) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountPassword", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:accountPassword: ", p), err) }
  if err := oprot.WriteString(string(p.AccountPassword)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountPassword (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:accountPassword: ", p), err) }
  return err
}

func (p *TUserInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserInfo(%+v)", *p)
}

// Attributes:
//  - RegisterCount
//  - RegisterDate
type TRegisterCountDay struct {
  RegisterCount int32 `thrift:"registerCount,1" db:"registerCount" json:"registerCount"`
  RegisterDate string `thrift:"registerDate,2" db:"registerDate" json:"registerDate"`
}

func NewTRegisterCountDay() *TRegisterCountDay {
  return &TRegisterCountDay{}
}


func (p *TRegisterCountDay) GetRegisterCount() int32 {
  return p.RegisterCount
}

func (p *TRegisterCountDay) GetRegisterDate() string {
  return p.RegisterDate
}
func (p *TRegisterCountDay) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TRegisterCountDay)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RegisterCount = v
}
  return nil
}

func (p *TRegisterCountDay)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RegisterDate = v
}
  return nil
}

func (p *TRegisterCountDay) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRegisterCountDay"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRegisterCountDay) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("registerCount", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:registerCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.RegisterCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.registerCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:registerCount: ", p), err) }
  return err
}

func (p *TRegisterCountDay) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("registerDate", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:registerDate: ", p), err) }
  if err := oprot.WriteString(string(p.RegisterDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.registerDate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:registerDate: ", p), err) }
  return err
}

func (p *TRegisterCountDay) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRegisterCountDay(%+v)", *p)
}

// Attributes:
//  - GoogleStatus
//  - GoogleLoginStatus
//  - GoogleWithdrawStatus
type TGoogleStatusResult_ struct {
  GoogleStatus int32 `thrift:"googleStatus,1" db:"googleStatus" json:"googleStatus"`
  GoogleLoginStatus int32 `thrift:"googleLoginStatus,2" db:"googleLoginStatus" json:"googleLoginStatus"`
  GoogleWithdrawStatus int32 `thrift:"googleWithdrawStatus,3" db:"googleWithdrawStatus" json:"googleWithdrawStatus"`
}

func NewTGoogleStatusResult_() *TGoogleStatusResult_ {
  return &TGoogleStatusResult_{}
}


func (p *TGoogleStatusResult_) GetGoogleStatus() int32 {
  return p.GoogleStatus
}

func (p *TGoogleStatusResult_) GetGoogleLoginStatus() int32 {
  return p.GoogleLoginStatus
}

func (p *TGoogleStatusResult_) GetGoogleWithdrawStatus() int32 {
  return p.GoogleWithdrawStatus
}
func (p *TGoogleStatusResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGoogleStatusResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GoogleStatus = v
}
  return nil
}

func (p *TGoogleStatusResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GoogleLoginStatus = v
}
  return nil
}

func (p *TGoogleStatusResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GoogleWithdrawStatus = v
}
  return nil
}

func (p *TGoogleStatusResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGoogleStatusResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGoogleStatusResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleStatus", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:googleStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.GoogleStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.googleStatus (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:googleStatus: ", p), err) }
  return err
}

func (p *TGoogleStatusResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleLoginStatus", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:googleLoginStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.GoogleLoginStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.googleLoginStatus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:googleLoginStatus: ", p), err) }
  return err
}

func (p *TGoogleStatusResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("googleWithdrawStatus", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:googleWithdrawStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.GoogleWithdrawStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.googleWithdrawStatus (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:googleWithdrawStatus: ", p), err) }
  return err
}

func (p *TGoogleStatusResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGoogleStatusResult_(%+v)", *p)
}

// Attributes:
//  - Username
//  - TotalAward
type TInviteFriendsAwardTop struct {
  Username string `thrift:"username,1" db:"username" json:"username"`
  TotalAward int32 `thrift:"totalAward,2" db:"totalAward" json:"totalAward"`
}

func NewTInviteFriendsAwardTop() *TInviteFriendsAwardTop {
  return &TInviteFriendsAwardTop{}
}


func (p *TInviteFriendsAwardTop) GetUsername() string {
  return p.Username
}

func (p *TInviteFriendsAwardTop) GetTotalAward() int32 {
  return p.TotalAward
}
func (p *TInviteFriendsAwardTop) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInviteFriendsAwardTop)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *TInviteFriendsAwardTop)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalAward = v
}
  return nil
}

func (p *TInviteFriendsAwardTop) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInviteFriendsAwardTop"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInviteFriendsAwardTop) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  return err
}

func (p *TInviteFriendsAwardTop) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalAward", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalAward: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalAward)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalAward (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalAward: ", p), err) }
  return err
}

func (p *TInviteFriendsAwardTop) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInviteFriendsAwardTop(%+v)", *p)
}

// Attributes:
//  - InvitedUserId
type TInviteUserRelation struct {
  InvitedUserId int32 `thrift:"invitedUserId,1" db:"invitedUserId" json:"invitedUserId"`
}

func NewTInviteUserRelation() *TInviteUserRelation {
  return &TInviteUserRelation{}
}


func (p *TInviteUserRelation) GetInvitedUserId() int32 {
  return p.InvitedUserId
}
func (p *TInviteUserRelation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TInviteUserRelation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.InvitedUserId = v
}
  return nil
}

func (p *TInviteUserRelation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TInviteUserRelation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TInviteUserRelation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invitedUserId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:invitedUserId: ", p), err) }
  if err := oprot.WriteI32(int32(p.InvitedUserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitedUserId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:invitedUserId: ", p), err) }
  return err
}

func (p *TInviteUserRelation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TInviteUserRelation(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserId
//  - Account
//  - Email
//  - Type
//  - CreatedAt
//  - UpdatedAt
//  - Empty
type TEngineAccount struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Account string `thrift:"account,3" db:"account" json:"account"`
  Email string `thrift:"email,4" db:"email" json:"email"`
  Type int32 `thrift:"type,5" db:"type" json:"type"`
  CreatedAt string `thrift:"createdAt,6" db:"createdAt" json:"createdAt"`
  UpdatedAt string `thrift:"updatedAt,7" db:"updatedAt" json:"updatedAt"`
  Empty bool `thrift:"empty,8" db:"empty" json:"empty,omitempty"`
}

func NewTEngineAccount() *TEngineAccount {
  return &TEngineAccount{}
}


func (p *TEngineAccount) GetID() int32 {
  return p.ID
}

func (p *TEngineAccount) GetUserId() int32 {
  return p.UserId
}

func (p *TEngineAccount) GetAccount() string {
  return p.Account
}

func (p *TEngineAccount) GetEmail() string {
  return p.Email
}

func (p *TEngineAccount) GetType() int32 {
  return p.Type
}

func (p *TEngineAccount) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TEngineAccount) GetUpdatedAt() string {
  return p.UpdatedAt
}
var TEngineAccount_Empty_DEFAULT bool = false

func (p *TEngineAccount) GetEmpty() bool {
  return p.Empty
}
func (p *TEngineAccount) IsSetEmpty() bool {
  return p.Empty != TEngineAccount_Empty_DEFAULT
}

func (p *TEngineAccount) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEngineAccount)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TEngineAccount)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TEngineAccount)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *TEngineAccount)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TEngineAccount)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TEngineAccount)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TEngineAccount)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TEngineAccount)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TEngineAccount) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEngineAccount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEngineAccount) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TEngineAccount) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TEngineAccount) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:account: ", p), err) }
  return err
}

func (p *TEngineAccount) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err) }
  return err
}

func (p *TEngineAccount) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err) }
  return err
}

func (p *TEngineAccount) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createdAt: ", p), err) }
  return err
}

func (p *TEngineAccount) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:updatedAt: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:updatedAt: ", p), err) }
  return err
}

func (p *TEngineAccount) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:empty: ", p), err) }
  }
  return err
}

func (p *TEngineAccount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEngineAccount(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserId
//  - IsKyc
//  - KycTime
//  - IsBlack
//  - BlackTime
//  - IsSpecial
//  - SpecialTime
//  - IsTrade
//  - CreatedAt
//  - UpdatedAt
//  - Empty
type TUserAttribute struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  UserId string `thrift:"userId,2" db:"userId" json:"userId"`
  IsKyc string `thrift:"isKyc,3" db:"isKyc" json:"isKyc"`
  KycTime string `thrift:"kycTime,4" db:"kycTime" json:"kycTime"`
  IsBlack string `thrift:"isBlack,5" db:"isBlack" json:"isBlack"`
  BlackTime string `thrift:"blackTime,6" db:"blackTime" json:"blackTime"`
  IsSpecial string `thrift:"isSpecial,7" db:"isSpecial" json:"isSpecial"`
  SpecialTime string `thrift:"specialTime,8" db:"specialTime" json:"specialTime"`
  IsTrade string `thrift:"isTrade,9" db:"isTrade" json:"isTrade"`
  CreatedAt string `thrift:"createdAt,10" db:"createdAt" json:"createdAt"`
  UpdatedAt string `thrift:"updatedAt,11" db:"updatedAt" json:"updatedAt"`
  Empty bool `thrift:"empty,12" db:"empty" json:"empty,omitempty"`
}

func NewTUserAttribute() *TUserAttribute {
  return &TUserAttribute{}
}


func (p *TUserAttribute) GetID() string {
  return p.ID
}

func (p *TUserAttribute) GetUserId() string {
  return p.UserId
}

func (p *TUserAttribute) GetIsKyc() string {
  return p.IsKyc
}

func (p *TUserAttribute) GetKycTime() string {
  return p.KycTime
}

func (p *TUserAttribute) GetIsBlack() string {
  return p.IsBlack
}

func (p *TUserAttribute) GetBlackTime() string {
  return p.BlackTime
}

func (p *TUserAttribute) GetIsSpecial() string {
  return p.IsSpecial
}

func (p *TUserAttribute) GetSpecialTime() string {
  return p.SpecialTime
}

func (p *TUserAttribute) GetIsTrade() string {
  return p.IsTrade
}

func (p *TUserAttribute) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserAttribute) GetUpdatedAt() string {
  return p.UpdatedAt
}
var TUserAttribute_Empty_DEFAULT bool = false

func (p *TUserAttribute) GetEmpty() bool {
  return p.Empty
}
func (p *TUserAttribute) IsSetEmpty() bool {
  return p.Empty != TUserAttribute_Empty_DEFAULT
}

func (p *TUserAttribute) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAttribute)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserAttribute)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserAttribute)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsKyc = v
}
  return nil
}

func (p *TUserAttribute)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KycTime = v
}
  return nil
}

func (p *TUserAttribute)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsBlack = v
}
  return nil
}

func (p *TUserAttribute)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BlackTime = v
}
  return nil
}

func (p *TUserAttribute)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IsSpecial = v
}
  return nil
}

func (p *TUserAttribute)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.SpecialTime = v
}
  return nil
}

func (p *TUserAttribute)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IsTrade = v
}
  return nil
}

func (p *TUserAttribute)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserAttribute)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TUserAttribute)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TUserAttribute) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserAttribute"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAttribute) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isKyc", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isKyc: ", p), err) }
  if err := oprot.WriteString(string(p.IsKyc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isKyc (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isKyc: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kycTime", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:kycTime: ", p), err) }
  if err := oprot.WriteString(string(p.KycTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kycTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:kycTime: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isBlack", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isBlack: ", p), err) }
  if err := oprot.WriteString(string(p.IsBlack)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isBlack (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isBlack: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blackTime", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:blackTime: ", p), err) }
  if err := oprot.WriteString(string(p.BlackTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.blackTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:blackTime: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isSpecial", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:isSpecial: ", p), err) }
  if err := oprot.WriteString(string(p.IsSpecial)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSpecial (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:isSpecial: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specialTime", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:specialTime: ", p), err) }
  if err := oprot.WriteString(string(p.SpecialTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specialTime (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:specialTime: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isTrade", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:isTrade: ", p), err) }
  if err := oprot.WriteString(string(p.IsTrade)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTrade (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:isTrade: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:createdAt: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updatedAt: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updatedAt: ", p), err) }
  return err
}

func (p *TUserAttribute) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:empty: ", p), err) }
  }
  return err
}

func (p *TUserAttribute) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAttribute(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Email
//  - StartPage
//  - PageSize
//  - IsTrade
//  - IsSpecial
//  - Mobile
type TUserAttributeParam struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  StartPage int32 `thrift:"startPage,3" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,4" db:"pageSize" json:"pageSize"`
  IsTrade string `thrift:"isTrade,5" db:"isTrade" json:"isTrade"`
  IsSpecial int32 `thrift:"isSpecial,6" db:"isSpecial" json:"isSpecial"`
  Mobile string `thrift:"mobile,7" db:"mobile" json:"mobile"`
}

func NewTUserAttributeParam() *TUserAttributeParam {
  return &TUserAttributeParam{}
}


func (p *TUserAttributeParam) GetUserId() int32 {
  return p.UserId
}

func (p *TUserAttributeParam) GetEmail() string {
  return p.Email
}

func (p *TUserAttributeParam) GetStartPage() int32 {
  return p.StartPage
}

func (p *TUserAttributeParam) GetPageSize() int32 {
  return p.PageSize
}

func (p *TUserAttributeParam) GetIsTrade() string {
  return p.IsTrade
}

func (p *TUserAttributeParam) GetIsSpecial() int32 {
  return p.IsSpecial
}

func (p *TUserAttributeParam) GetMobile() string {
  return p.Mobile
}
func (p *TUserAttributeParam) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAttributeParam)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserAttributeParam)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserAttributeParam)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TUserAttributeParam)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TUserAttributeParam)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsTrade = v
}
  return nil
}

func (p *TUserAttributeParam)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IsSpecial = v
}
  return nil
}

func (p *TUserAttributeParam)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserAttributeParam) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserAttributeParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAttributeParam) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TUserAttributeParam) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *TUserAttributeParam) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startPage: ", p), err) }
  return err
}

func (p *TUserAttributeParam) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageSize: ", p), err) }
  return err
}

func (p *TUserAttributeParam) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isTrade", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isTrade: ", p), err) }
  if err := oprot.WriteString(string(p.IsTrade)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTrade (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isTrade: ", p), err) }
  return err
}

func (p *TUserAttributeParam) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isSpecial", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isSpecial: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsSpecial)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSpecial (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isSpecial: ", p), err) }
  return err
}

func (p *TUserAttributeParam) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:mobile: ", p), err) }
  return err
}

func (p *TUserAttributeParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAttributeParam(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Email
//  - IsTrade
//  - Empty
//  - CreatedAt
//  - IsSpecial
//  - Mobile
type TUserAttributeResult_ struct {
  UserId string `thrift:"userId,1" db:"userId" json:"userId"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  IsTrade string `thrift:"isTrade,3" db:"isTrade" json:"isTrade"`
  Empty bool `thrift:"empty,4" db:"empty" json:"empty,omitempty"`
  CreatedAt string `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  IsSpecial int32 `thrift:"isSpecial,6" db:"isSpecial" json:"isSpecial"`
  Mobile string `thrift:"mobile,7" db:"mobile" json:"mobile"`
}

func NewTUserAttributeResult_() *TUserAttributeResult_ {
  return &TUserAttributeResult_{}
}


func (p *TUserAttributeResult_) GetUserId() string {
  return p.UserId
}

func (p *TUserAttributeResult_) GetEmail() string {
  return p.Email
}

func (p *TUserAttributeResult_) GetIsTrade() string {
  return p.IsTrade
}
var TUserAttributeResult__Empty_DEFAULT bool = false

func (p *TUserAttributeResult_) GetEmpty() bool {
  return p.Empty
}

func (p *TUserAttributeResult_) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserAttributeResult_) GetIsSpecial() int32 {
  return p.IsSpecial
}

func (p *TUserAttributeResult_) GetMobile() string {
  return p.Mobile
}
func (p *TUserAttributeResult_) IsSetEmpty() bool {
  return p.Empty != TUserAttributeResult__Empty_DEFAULT
}

func (p *TUserAttributeResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAttributeResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserAttributeResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserAttributeResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsTrade = v
}
  return nil
}

func (p *TUserAttributeResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TUserAttributeResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserAttributeResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IsSpecial = v
}
  return nil
}

func (p *TUserAttributeResult_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserAttributeResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserAttributeResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAttributeResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteString(string(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TUserAttributeResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *TUserAttributeResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isTrade", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isTrade: ", p), err) }
  if err := oprot.WriteString(string(p.IsTrade)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTrade (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isTrade: ", p), err) }
  return err
}

func (p *TUserAttributeResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:empty: ", p), err) }
  }
  return err
}

func (p *TUserAttributeResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TUserAttributeResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isSpecial", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isSpecial: ", p), err) }
  if err := oprot.WriteI32(int32(p.IsSpecial)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSpecial (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isSpecial: ", p), err) }
  return err
}

func (p *TUserAttributeResult_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:mobile: ", p), err) }
  return err
}

func (p *TUserAttributeResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAttributeResult_(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Type
//  - CreateTime
type TUserAttributeLogResult_ struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Type int32 `thrift:"type,2" db:"type" json:"type"`
  CreateTime string `thrift:"createTime,3" db:"createTime" json:"createTime"`
}

func NewTUserAttributeLogResult_() *TUserAttributeLogResult_ {
  return &TUserAttributeLogResult_{}
}


func (p *TUserAttributeLogResult_) GetUserId() int32 {
  return p.UserId
}

func (p *TUserAttributeLogResult_) GetType() int32 {
  return p.Type
}

func (p *TUserAttributeLogResult_) GetCreateTime() string {
  return p.CreateTime
}
func (p *TUserAttributeLogResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserAttributeLogResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserAttributeLogResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TUserAttributeLogResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *TUserAttributeLogResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserAttributeLogResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserAttributeLogResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TUserAttributeLogResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TUserAttributeLogResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createTime", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createTime: ", p), err) }
  if err := oprot.WriteString(string(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createTime: ", p), err) }
  return err
}

func (p *TUserAttributeLogResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserAttributeLogResult_(%+v)", *p)
}

type TUserService interface {
  // Parameters:
  //  - Params
  SelectUserByConditions(ctx context.Context, params *TUserParams) (r []*TUserResults, err error)
  // Parameters:
  //  - Params
  SelectUserCountByConditions(ctx context.Context, params *TUserParams) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  UpdateUserStatusByUserId(ctx context.Context, traceId string, userId int32) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectUserBaseInfoByUserId(ctx context.Context, traceId string, userId int32) (r *TUserInfo, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  ResetGoogleCode(ctx context.Context, traceId string, userId int32) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectUserById(ctx context.Context, traceId string, userId int32) (r *TUser, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectUserGoogleStatus(ctx context.Context, traceId string, userId int32) (r *TGoogleStatusResult_, err error)
  // Parameters:
  //  - TraceId
  //  - Type
  //  - StartPage
  //  - PageSize
  SelectEngineAccountListByType(ctx context.Context, traceId string, type_a1 int32, startPage int32, pageSize int32) (r []*TEngineAccount, err error)
  // Parameters:
  //  - TraceId
  //  - Type
  SelectEngineAccountCountByType(ctx context.Context, traceId string, type_a1 int32) (r int32, err error)
  // Parameters:
  //  - TraceId
  SelectSlaveAllUserCount(ctx context.Context, traceId string) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - Days
  SelectSlaveRegisterCountDay(ctx context.Context, traceId string, days int32) (r []*TRegisterCountDay, err error)
  // Parameters:
  //  - TraceId
  //  - Top
  SelectSlaveInviteFriendsAwardTop(ctx context.Context, traceId string, top int32) (r []*TInviteFriendsAwardTop, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  //  - Level
  SelectSlaveInviteUserRelation(ctx context.Context, traceId string, userId int32, level int32) (r []*TInviteUserRelation, err error)
  // Parameters:
  //  - TraceId
  //  - Params
  SelectUserAttributeListByConditions(ctx context.Context, traceId string, params *TUserAttributeParam) (r []*TUserAttributeResult_, err error)
  // Parameters:
  //  - TraceId
  //  - Params
  SelectUserAttributeCountByConditions(ctx context.Context, traceId string, params *TUserAttributeParam) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - Params
  UpdateUserAttributeByUserId(ctx context.Context, traceId string, params *TUserAttributeParam) (r bool, err error)
  // Parameters:
  //  - TraceId
  //  - UserId
  SelectUserAttributeLogByUserId(ctx context.Context, traceId string, userId int32) (r []*TUserAttributeLogResult_, err error)
}

type TUserServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTUserService instead
func NewTUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TUserServiceClient {
  return &TUserServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTUserService instead
func NewTUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TUserServiceClient {
  return &TUserServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTUserServiceClient(c thrift.TClient) *TUserServiceClient {
  return &TUserServiceClient{
    c: c,
  }
}

// Parameters:
//  - Params
func (p *TUserServiceClient) SelectUserByConditions(ctx context.Context, params *TUserParams) (r []*TUserResults, err error) {
  var _args0 TUserServiceSelectUserByConditionsArgs
  _args0.Params = params
  var _result1 TUserServiceSelectUserByConditionsResult
  if err = p.c.Call(ctx, "selectUserByConditions", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TUserServiceClient) SelectUserCountByConditions(ctx context.Context, params *TUserParams) (r int32, err error) {
  var _args2 TUserServiceSelectUserCountByConditionsArgs
  _args2.Params = params
  var _result3 TUserServiceSelectUserCountByConditionsResult
  if err = p.c.Call(ctx, "selectUserCountByConditions", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) UpdateUserStatusByUserId(ctx context.Context, traceId string, userId int32) (r bool, err error) {
  var _args4 TUserServiceUpdateUserStatusByUserIdArgs
  _args4.TraceId = traceId
  _args4.UserId = userId
  var _result5 TUserServiceUpdateUserStatusByUserIdResult
  if err = p.c.Call(ctx, "updateUserStatusByUserId", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) SelectUserBaseInfoByUserId(ctx context.Context, traceId string, userId int32) (r *TUserInfo, err error) {
  var _args6 TUserServiceSelectUserBaseInfoByUserIdArgs
  _args6.TraceId = traceId
  _args6.UserId = userId
  var _result7 TUserServiceSelectUserBaseInfoByUserIdResult
  if err = p.c.Call(ctx, "selectUserBaseInfoByUserId", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) ResetGoogleCode(ctx context.Context, traceId string, userId int32) (r bool, err error) {
  var _args8 TUserServiceResetGoogleCodeArgs
  _args8.TraceId = traceId
  _args8.UserId = userId
  var _result9 TUserServiceResetGoogleCodeResult
  if err = p.c.Call(ctx, "resetGoogleCode", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) SelectUserById(ctx context.Context, traceId string, userId int32) (r *TUser, err error) {
  var _args10 TUserServiceSelectUserByIdArgs
  _args10.TraceId = traceId
  _args10.UserId = userId
  var _result11 TUserServiceSelectUserByIdResult
  if err = p.c.Call(ctx, "selectUserById", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) SelectUserGoogleStatus(ctx context.Context, traceId string, userId int32) (r *TGoogleStatusResult_, err error) {
  var _args12 TUserServiceSelectUserGoogleStatusArgs
  _args12.TraceId = traceId
  _args12.UserId = userId
  var _result13 TUserServiceSelectUserGoogleStatusResult
  if err = p.c.Call(ctx, "selectUserGoogleStatus", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Type
//  - StartPage
//  - PageSize
func (p *TUserServiceClient) SelectEngineAccountListByType(ctx context.Context, traceId string, type_a1 int32, startPage int32, pageSize int32) (r []*TEngineAccount, err error) {
  var _args14 TUserServiceSelectEngineAccountListByTypeArgs
  _args14.TraceId = traceId
  _args14.Type = type_a1
  _args14.StartPage = startPage
  _args14.PageSize = pageSize
  var _result15 TUserServiceSelectEngineAccountListByTypeResult
  if err = p.c.Call(ctx, "selectEngineAccountListByType", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Type
func (p *TUserServiceClient) SelectEngineAccountCountByType(ctx context.Context, traceId string, type_a1 int32) (r int32, err error) {
  var _args16 TUserServiceSelectEngineAccountCountByTypeArgs
  _args16.TraceId = traceId
  _args16.Type = type_a1
  var _result17 TUserServiceSelectEngineAccountCountByTypeResult
  if err = p.c.Call(ctx, "selectEngineAccountCountByType", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - TraceId
func (p *TUserServiceClient) SelectSlaveAllUserCount(ctx context.Context, traceId string) (r int32, err error) {
  var _args18 TUserServiceSelectSlaveAllUserCountArgs
  _args18.TraceId = traceId
  var _result19 TUserServiceSelectSlaveAllUserCountResult
  if err = p.c.Call(ctx, "selectSlaveAllUserCount", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Days
func (p *TUserServiceClient) SelectSlaveRegisterCountDay(ctx context.Context, traceId string, days int32) (r []*TRegisterCountDay, err error) {
  var _args20 TUserServiceSelectSlaveRegisterCountDayArgs
  _args20.TraceId = traceId
  _args20.Days = days
  var _result21 TUserServiceSelectSlaveRegisterCountDayResult
  if err = p.c.Call(ctx, "selectSlaveRegisterCountDay", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Top
func (p *TUserServiceClient) SelectSlaveInviteFriendsAwardTop(ctx context.Context, traceId string, top int32) (r []*TInviteFriendsAwardTop, err error) {
  var _args22 TUserServiceSelectSlaveInviteFriendsAwardTopArgs
  _args22.TraceId = traceId
  _args22.Top = top
  var _result23 TUserServiceSelectSlaveInviteFriendsAwardTopResult
  if err = p.c.Call(ctx, "selectSlaveInviteFriendsAwardTop", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
//  - Level
func (p *TUserServiceClient) SelectSlaveInviteUserRelation(ctx context.Context, traceId string, userId int32, level int32) (r []*TInviteUserRelation, err error) {
  var _args24 TUserServiceSelectSlaveInviteUserRelationArgs
  _args24.TraceId = traceId
  _args24.UserId = userId
  _args24.Level = level
  var _result25 TUserServiceSelectSlaveInviteUserRelationResult
  if err = p.c.Call(ctx, "selectSlaveInviteUserRelation", &_args24, &_result25); err != nil {
    return
  }
  return _result25.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Params
func (p *TUserServiceClient) SelectUserAttributeListByConditions(ctx context.Context, traceId string, params *TUserAttributeParam) (r []*TUserAttributeResult_, err error) {
  var _args26 TUserServiceSelectUserAttributeListByConditionsArgs
  _args26.TraceId = traceId
  _args26.Params = params
  var _result27 TUserServiceSelectUserAttributeListByConditionsResult
  if err = p.c.Call(ctx, "selectUserAttributeListByConditions", &_args26, &_result27); err != nil {
    return
  }
  return _result27.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Params
func (p *TUserServiceClient) SelectUserAttributeCountByConditions(ctx context.Context, traceId string, params *TUserAttributeParam) (r int32, err error) {
  var _args28 TUserServiceSelectUserAttributeCountByConditionsArgs
  _args28.TraceId = traceId
  _args28.Params = params
  var _result29 TUserServiceSelectUserAttributeCountByConditionsResult
  if err = p.c.Call(ctx, "selectUserAttributeCountByConditions", &_args28, &_result29); err != nil {
    return
  }
  return _result29.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - Params
func (p *TUserServiceClient) UpdateUserAttributeByUserId(ctx context.Context, traceId string, params *TUserAttributeParam) (r bool, err error) {
  var _args30 TUserServiceUpdateUserAttributeByUserIdArgs
  _args30.TraceId = traceId
  _args30.Params = params
  var _result31 TUserServiceUpdateUserAttributeByUserIdResult
  if err = p.c.Call(ctx, "updateUserAttributeByUserId", &_args30, &_result31); err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserId
func (p *TUserServiceClient) SelectUserAttributeLogByUserId(ctx context.Context, traceId string, userId int32) (r []*TUserAttributeLogResult_, err error) {
  var _args32 TUserServiceSelectUserAttributeLogByUserIdArgs
  _args32.TraceId = traceId
  _args32.UserId = userId
  var _result33 TUserServiceSelectUserAttributeLogByUserIdResult
  if err = p.c.Call(ctx, "selectUserAttributeLogByUserId", &_args32, &_result33); err != nil {
    return
  }
  return _result33.GetSuccess(), nil
}

type TUserServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TUserService
}

func (p *TUserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TUserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TUserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTUserServiceProcessor(handler TUserService) *TUserServiceProcessor {

  self34 := &TUserServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self34.processorMap["selectUserByConditions"] = &tUserServiceProcessorSelectUserByConditions{handler:handler}
  self34.processorMap["selectUserCountByConditions"] = &tUserServiceProcessorSelectUserCountByConditions{handler:handler}
  self34.processorMap["updateUserStatusByUserId"] = &tUserServiceProcessorUpdateUserStatusByUserId{handler:handler}
  self34.processorMap["selectUserBaseInfoByUserId"] = &tUserServiceProcessorSelectUserBaseInfoByUserId{handler:handler}
  self34.processorMap["resetGoogleCode"] = &tUserServiceProcessorResetGoogleCode{handler:handler}
  self34.processorMap["selectUserById"] = &tUserServiceProcessorSelectUserById{handler:handler}
  self34.processorMap["selectUserGoogleStatus"] = &tUserServiceProcessorSelectUserGoogleStatus{handler:handler}
  self34.processorMap["selectEngineAccountListByType"] = &tUserServiceProcessorSelectEngineAccountListByType{handler:handler}
  self34.processorMap["selectEngineAccountCountByType"] = &tUserServiceProcessorSelectEngineAccountCountByType{handler:handler}
  self34.processorMap["selectSlaveAllUserCount"] = &tUserServiceProcessorSelectSlaveAllUserCount{handler:handler}
  self34.processorMap["selectSlaveRegisterCountDay"] = &tUserServiceProcessorSelectSlaveRegisterCountDay{handler:handler}
  self34.processorMap["selectSlaveInviteFriendsAwardTop"] = &tUserServiceProcessorSelectSlaveInviteFriendsAwardTop{handler:handler}
  self34.processorMap["selectSlaveInviteUserRelation"] = &tUserServiceProcessorSelectSlaveInviteUserRelation{handler:handler}
  self34.processorMap["selectUserAttributeListByConditions"] = &tUserServiceProcessorSelectUserAttributeListByConditions{handler:handler}
  self34.processorMap["selectUserAttributeCountByConditions"] = &tUserServiceProcessorSelectUserAttributeCountByConditions{handler:handler}
  self34.processorMap["updateUserAttributeByUserId"] = &tUserServiceProcessorUpdateUserAttributeByUserId{handler:handler}
  self34.processorMap["selectUserAttributeLogByUserId"] = &tUserServiceProcessorSelectUserAttributeLogByUserId{handler:handler}
return self34
}

func (p *TUserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x35 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x35.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x35

}

type tUserServiceProcessorSelectUserByConditions struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserByConditionsResult{}
var retval []*TUserResults
  var err2 error
  if retval, err2 = p.handler.SelectUserByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectUserByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserCountByConditions struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectUserCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectUserCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectUserCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorUpdateUserStatusByUserId struct {
  handler TUserService
}

func (p *tUserServiceProcessorUpdateUserStatusByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceUpdateUserStatusByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUserStatusByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceUpdateUserStatusByUserIdResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateUserStatusByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserStatusByUserId: " + err2.Error())
    oprot.WriteMessageBegin("updateUserStatusByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateUserStatusByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserBaseInfoByUserId struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserBaseInfoByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserBaseInfoByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserBaseInfoByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserBaseInfoByUserIdResult{}
var retval *TUserInfo
  var err2 error
  if retval, err2 = p.handler.SelectUserBaseInfoByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserBaseInfoByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectUserBaseInfoByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserBaseInfoByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorResetGoogleCode struct {
  handler TUserService
}

func (p *tUserServiceProcessorResetGoogleCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceResetGoogleCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("resetGoogleCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceResetGoogleCodeResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.ResetGoogleCode(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resetGoogleCode: " + err2.Error())
    oprot.WriteMessageBegin("resetGoogleCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("resetGoogleCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserById struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserByIdResult{}
var retval *TUser
  var err2 error
  if retval, err2 = p.handler.SelectUserById(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserById: " + err2.Error())
    oprot.WriteMessageBegin("selectUserById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserGoogleStatus struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserGoogleStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserGoogleStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserGoogleStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserGoogleStatusResult{}
var retval *TGoogleStatusResult_
  var err2 error
  if retval, err2 = p.handler.SelectUserGoogleStatus(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserGoogleStatus: " + err2.Error())
    oprot.WriteMessageBegin("selectUserGoogleStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserGoogleStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectEngineAccountListByType struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectEngineAccountListByType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectEngineAccountListByTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectEngineAccountListByType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectEngineAccountListByTypeResult{}
var retval []*TEngineAccount
  var err2 error
  if retval, err2 = p.handler.SelectEngineAccountListByType(ctx, args.TraceId, args.Type, args.StartPage, args.PageSize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectEngineAccountListByType: " + err2.Error())
    oprot.WriteMessageBegin("selectEngineAccountListByType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectEngineAccountListByType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectEngineAccountCountByType struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectEngineAccountCountByType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectEngineAccountCountByTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectEngineAccountCountByType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectEngineAccountCountByTypeResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectEngineAccountCountByType(ctx, args.TraceId, args.Type); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectEngineAccountCountByType: " + err2.Error())
    oprot.WriteMessageBegin("selectEngineAccountCountByType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectEngineAccountCountByType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectSlaveAllUserCount struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectSlaveAllUserCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectSlaveAllUserCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveAllUserCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectSlaveAllUserCountResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectSlaveAllUserCount(ctx, args.TraceId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveAllUserCount: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveAllUserCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveAllUserCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectSlaveRegisterCountDay struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectSlaveRegisterCountDay) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectSlaveRegisterCountDayArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveRegisterCountDay", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectSlaveRegisterCountDayResult{}
var retval []*TRegisterCountDay
  var err2 error
  if retval, err2 = p.handler.SelectSlaveRegisterCountDay(ctx, args.TraceId, args.Days); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveRegisterCountDay: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveRegisterCountDay", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveRegisterCountDay", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectSlaveInviteFriendsAwardTop struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectSlaveInviteFriendsAwardTop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectSlaveInviteFriendsAwardTopArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveInviteFriendsAwardTop", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectSlaveInviteFriendsAwardTopResult{}
var retval []*TInviteFriendsAwardTop
  var err2 error
  if retval, err2 = p.handler.SelectSlaveInviteFriendsAwardTop(ctx, args.TraceId, args.Top); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveInviteFriendsAwardTop: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveInviteFriendsAwardTop", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveInviteFriendsAwardTop", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectSlaveInviteUserRelation struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectSlaveInviteUserRelation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectSlaveInviteUserRelationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSlaveInviteUserRelation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectSlaveInviteUserRelationResult{}
var retval []*TInviteUserRelation
  var err2 error
  if retval, err2 = p.handler.SelectSlaveInviteUserRelation(ctx, args.TraceId, args.UserId, args.Level); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSlaveInviteUserRelation: " + err2.Error())
    oprot.WriteMessageBegin("selectSlaveInviteUserRelation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSlaveInviteUserRelation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserAttributeListByConditions struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserAttributeListByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserAttributeListByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserAttributeListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserAttributeListByConditionsResult{}
var retval []*TUserAttributeResult_
  var err2 error
  if retval, err2 = p.handler.SelectUserAttributeListByConditions(ctx, args.TraceId, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserAttributeListByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectUserAttributeListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserAttributeListByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserAttributeCountByConditions struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserAttributeCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserAttributeCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserAttributeCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserAttributeCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectUserAttributeCountByConditions(ctx, args.TraceId, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserAttributeCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectUserAttributeCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectUserAttributeCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorUpdateUserAttributeByUserId struct {
  handler TUserService
}

func (p *tUserServiceProcessorUpdateUserAttributeByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceUpdateUserAttributeByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateUserAttributeByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceUpdateUserAttributeByUserIdResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateUserAttributeByUserId(ctx, args.TraceId, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserAttributeByUserId: " + err2.Error())
    oprot.WriteMessageBegin("updateUserAttributeByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateUserAttributeByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserServiceProcessorSelectUserAttributeLogByUserId struct {
  handler TUserService
}

func (p *tUserServiceProcessorSelectUserAttributeLogByUserId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserServiceSelectUserAttributeLogByUserIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserAttributeLogByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserServiceSelectUserAttributeLogByUserIdResult{}
var retval []*TUserAttributeLogResult_
  var err2 error
  if retval, err2 = p.handler.SelectUserAttributeLogByUserId(ctx, args.TraceId, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserAttributeLogByUserId: " + err2.Error())
    oprot.WriteMessageBegin("selectUserAttributeLogByUserId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserAttributeLogByUserId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Params
type TUserServiceSelectUserByConditionsArgs struct {
  Params *TUserParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTUserServiceSelectUserByConditionsArgs() *TUserServiceSelectUserByConditionsArgs {
  return &TUserServiceSelectUserByConditionsArgs{}
}

var TUserServiceSelectUserByConditionsArgs_Params_DEFAULT *TUserParams
func (p *TUserServiceSelectUserByConditionsArgs) GetParams() *TUserParams {
  if !p.IsSetParams() {
    return TUserServiceSelectUserByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TUserServiceSelectUserByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TUserServiceSelectUserByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TUserParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserByConditionsResult struct {
  Success []*TUserResults `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserByConditionsResult() *TUserServiceSelectUserByConditionsResult {
  return &TUserServiceSelectUserByConditionsResult{}
}

var TUserServiceSelectUserByConditionsResult_Success_DEFAULT []*TUserResults

func (p *TUserServiceSelectUserByConditionsResult) GetSuccess() []*TUserResults {
  return p.Success
}
func (p *TUserServiceSelectUserByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TUserResults, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem36 := &TUserResults{}
    if err := _elem36.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
    }
    p.Success = append(p.Success, _elem36)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserServiceSelectUserByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TUserServiceSelectUserCountByConditionsArgs struct {
  Params *TUserParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTUserServiceSelectUserCountByConditionsArgs() *TUserServiceSelectUserCountByConditionsArgs {
  return &TUserServiceSelectUserCountByConditionsArgs{}
}

var TUserServiceSelectUserCountByConditionsArgs_Params_DEFAULT *TUserParams
func (p *TUserServiceSelectUserCountByConditionsArgs) GetParams() *TUserParams {
  if !p.IsSetParams() {
    return TUserServiceSelectUserCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TUserServiceSelectUserCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TUserServiceSelectUserCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TUserParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserCountByConditionsResult() *TUserServiceSelectUserCountByConditionsResult {
  return &TUserServiceSelectUserCountByConditionsResult{}
}

var TUserServiceSelectUserCountByConditionsResult_Success_DEFAULT int32
func (p *TUserServiceSelectUserCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TUserServiceSelectUserCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceSelectUserCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceUpdateUserStatusByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceUpdateUserStatusByUserIdArgs() *TUserServiceUpdateUserStatusByUserIdArgs {
  return &TUserServiceUpdateUserStatusByUserIdArgs{}
}


func (p *TUserServiceUpdateUserStatusByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceUpdateUserStatusByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserStatusByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceUpdateUserStatusByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceUpdateUserStatusByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceUpdateUserStatusByUserIdResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceUpdateUserStatusByUserIdResult() *TUserServiceUpdateUserStatusByUserIdResult {
  return &TUserServiceUpdateUserStatusByUserIdResult{}
}

var TUserServiceUpdateUserStatusByUserIdResult_Success_DEFAULT bool
func (p *TUserServiceUpdateUserStatusByUserIdResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TUserServiceUpdateUserStatusByUserIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceUpdateUserStatusByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceUpdateUserStatusByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserStatusByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceUpdateUserStatusByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceUpdateUserStatusByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceUpdateUserStatusByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceSelectUserBaseInfoByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceSelectUserBaseInfoByUserIdArgs() *TUserServiceSelectUserBaseInfoByUserIdArgs {
  return &TUserServiceSelectUserBaseInfoByUserIdArgs{}
}


func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserBaseInfoByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserBaseInfoByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserBaseInfoByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserBaseInfoByUserIdResult struct {
  Success *TUserInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserBaseInfoByUserIdResult() *TUserServiceSelectUserBaseInfoByUserIdResult {
  return &TUserServiceSelectUserBaseInfoByUserIdResult{}
}

var TUserServiceSelectUserBaseInfoByUserIdResult_Success_DEFAULT *TUserInfo
func (p *TUserServiceSelectUserBaseInfoByUserIdResult) GetSuccess() *TUserInfo {
  if !p.IsSetSuccess() {
    return TUserServiceSelectUserBaseInfoByUserIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TUserServiceSelectUserBaseInfoByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserBaseInfoByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserBaseInfoByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserBaseInfoByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceResetGoogleCodeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceResetGoogleCodeArgs() *TUserServiceResetGoogleCodeArgs {
  return &TUserServiceResetGoogleCodeArgs{}
}


func (p *TUserServiceResetGoogleCodeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceResetGoogleCodeArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceResetGoogleCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceResetGoogleCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceResetGoogleCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceResetGoogleCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("resetGoogleCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceResetGoogleCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceResetGoogleCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceResetGoogleCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceResetGoogleCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceResetGoogleCodeResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceResetGoogleCodeResult() *TUserServiceResetGoogleCodeResult {
  return &TUserServiceResetGoogleCodeResult{}
}

var TUserServiceResetGoogleCodeResult_Success_DEFAULT bool
func (p *TUserServiceResetGoogleCodeResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TUserServiceResetGoogleCodeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceResetGoogleCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceResetGoogleCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceResetGoogleCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceResetGoogleCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("resetGoogleCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceResetGoogleCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceResetGoogleCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceResetGoogleCodeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceSelectUserByIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceSelectUserByIdArgs() *TUserServiceSelectUserByIdArgs {
  return &TUserServiceSelectUserByIdArgs{}
}


func (p *TUserServiceSelectUserByIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectUserByIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceSelectUserByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectUserByIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceSelectUserByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserByIdResult struct {
  Success *TUser `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserByIdResult() *TUserServiceSelectUserByIdResult {
  return &TUserServiceSelectUserByIdResult{}
}

var TUserServiceSelectUserByIdResult_Success_DEFAULT *TUser
func (p *TUserServiceSelectUserByIdResult) GetSuccess() *TUser {
  if !p.IsSetSuccess() {
    return TUserServiceSelectUserByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TUserServiceSelectUserByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUser{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TUserServiceSelectUserByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserByIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceSelectUserGoogleStatusArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceSelectUserGoogleStatusArgs() *TUserServiceSelectUserGoogleStatusArgs {
  return &TUserServiceSelectUserGoogleStatusArgs{}
}


func (p *TUserServiceSelectUserGoogleStatusArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectUserGoogleStatusArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceSelectUserGoogleStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserGoogleStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectUserGoogleStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceSelectUserGoogleStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserGoogleStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserGoogleStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserGoogleStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserGoogleStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserGoogleStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserGoogleStatusResult struct {
  Success *TGoogleStatusResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserGoogleStatusResult() *TUserServiceSelectUserGoogleStatusResult {
  return &TUserServiceSelectUserGoogleStatusResult{}
}

var TUserServiceSelectUserGoogleStatusResult_Success_DEFAULT *TGoogleStatusResult_
func (p *TUserServiceSelectUserGoogleStatusResult) GetSuccess() *TGoogleStatusResult_ {
  if !p.IsSetSuccess() {
    return TUserServiceSelectUserGoogleStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *TUserServiceSelectUserGoogleStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserGoogleStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserGoogleStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TGoogleStatusResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TUserServiceSelectUserGoogleStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserGoogleStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserGoogleStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserGoogleStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserGoogleStatusResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Type
//  - StartPage
//  - PageSize
type TUserServiceSelectEngineAccountListByTypeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Type int32 `thrift:"type,2" db:"type" json:"type"`
  StartPage int32 `thrift:"startPage,3" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,4" db:"pageSize" json:"pageSize"`
}

func NewTUserServiceSelectEngineAccountListByTypeArgs() *TUserServiceSelectEngineAccountListByTypeArgs {
  return &TUserServiceSelectEngineAccountListByTypeArgs{}
}


func (p *TUserServiceSelectEngineAccountListByTypeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) GetType() int32 {
  return p.Type
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) GetStartPage() int32 {
  return p.StartPage
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) GetPageSize() int32 {
  return p.PageSize
}
func (p *TUserServiceSelectEngineAccountListByTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineAccountListByType_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startPage: ", p), err) }
  return err
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageSize: ", p), err) }
  return err
}

func (p *TUserServiceSelectEngineAccountListByTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectEngineAccountListByTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectEngineAccountListByTypeResult struct {
  Success []*TEngineAccount `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectEngineAccountListByTypeResult() *TUserServiceSelectEngineAccountListByTypeResult {
  return &TUserServiceSelectEngineAccountListByTypeResult{}
}

var TUserServiceSelectEngineAccountListByTypeResult_Success_DEFAULT []*TEngineAccount

func (p *TUserServiceSelectEngineAccountListByTypeResult) GetSuccess() []*TEngineAccount {
  return p.Success
}
func (p *TUserServiceSelectEngineAccountListByTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectEngineAccountListByTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TEngineAccount, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem37 := &TEngineAccount{}
    if err := _elem37.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
    }
    p.Success = append(p.Success, _elem37)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineAccountListByType_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectEngineAccountListByTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectEngineAccountListByTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectEngineAccountListByTypeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Type
type TUserServiceSelectEngineAccountCountByTypeArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Type int32 `thrift:"type,2" db:"type" json:"type"`
}

func NewTUserServiceSelectEngineAccountCountByTypeArgs() *TUserServiceSelectEngineAccountCountByTypeArgs {
  return &TUserServiceSelectEngineAccountCountByTypeArgs{}
}


func (p *TUserServiceSelectEngineAccountCountByTypeArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectEngineAccountCountByTypeArgs) GetType() int32 {
  return p.Type
}
func (p *TUserServiceSelectEngineAccountCountByTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectEngineAccountCountByTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectEngineAccountCountByTypeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TUserServiceSelectEngineAccountCountByTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineAccountCountByType_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectEngineAccountCountByTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectEngineAccountCountByTypeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TUserServiceSelectEngineAccountCountByTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectEngineAccountCountByTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectEngineAccountCountByTypeResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectEngineAccountCountByTypeResult() *TUserServiceSelectEngineAccountCountByTypeResult {
  return &TUserServiceSelectEngineAccountCountByTypeResult{}
}

var TUserServiceSelectEngineAccountCountByTypeResult_Success_DEFAULT int32
func (p *TUserServiceSelectEngineAccountCountByTypeResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TUserServiceSelectEngineAccountCountByTypeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceSelectEngineAccountCountByTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectEngineAccountCountByTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectEngineAccountCountByTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceSelectEngineAccountCountByTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineAccountCountByType_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectEngineAccountCountByTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectEngineAccountCountByTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectEngineAccountCountByTypeResult(%+v)", *p)
}

// Attributes:
//  - TraceId
type TUserServiceSelectSlaveAllUserCountArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
}

func NewTUserServiceSelectSlaveAllUserCountArgs() *TUserServiceSelectSlaveAllUserCountArgs {
  return &TUserServiceSelectSlaveAllUserCountArgs{}
}


func (p *TUserServiceSelectSlaveAllUserCountArgs) GetTraceId() string {
  return p.TraceId
}
func (p *TUserServiceSelectSlaveAllUserCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveAllUserCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectSlaveAllUserCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveAllUserCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectSlaveAllUserCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectSlaveAllUserCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectSlaveAllUserCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectSlaveAllUserCountResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectSlaveAllUserCountResult() *TUserServiceSelectSlaveAllUserCountResult {
  return &TUserServiceSelectSlaveAllUserCountResult{}
}

var TUserServiceSelectSlaveAllUserCountResult_Success_DEFAULT int32
func (p *TUserServiceSelectSlaveAllUserCountResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TUserServiceSelectSlaveAllUserCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceSelectSlaveAllUserCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectSlaveAllUserCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveAllUserCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceSelectSlaveAllUserCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveAllUserCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectSlaveAllUserCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectSlaveAllUserCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectSlaveAllUserCountResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Days
type TUserServiceSelectSlaveRegisterCountDayArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Days int32 `thrift:"days,2" db:"days" json:"days"`
}

func NewTUserServiceSelectSlaveRegisterCountDayArgs() *TUserServiceSelectSlaveRegisterCountDayArgs {
  return &TUserServiceSelectSlaveRegisterCountDayArgs{}
}


func (p *TUserServiceSelectSlaveRegisterCountDayArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectSlaveRegisterCountDayArgs) GetDays() int32 {
  return p.Days
}
func (p *TUserServiceSelectSlaveRegisterCountDayArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveRegisterCountDayArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectSlaveRegisterCountDayArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Days = v
}
  return nil
}

func (p *TUserServiceSelectSlaveRegisterCountDayArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveRegisterCountDay_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectSlaveRegisterCountDayArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectSlaveRegisterCountDayArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("days", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:days: ", p), err) }
  if err := oprot.WriteI32(int32(p.Days)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.days (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:days: ", p), err) }
  return err
}

func (p *TUserServiceSelectSlaveRegisterCountDayArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectSlaveRegisterCountDayArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectSlaveRegisterCountDayResult struct {
  Success []*TRegisterCountDay `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectSlaveRegisterCountDayResult() *TUserServiceSelectSlaveRegisterCountDayResult {
  return &TUserServiceSelectSlaveRegisterCountDayResult{}
}

var TUserServiceSelectSlaveRegisterCountDayResult_Success_DEFAULT []*TRegisterCountDay

func (p *TUserServiceSelectSlaveRegisterCountDayResult) GetSuccess() []*TRegisterCountDay {
  return p.Success
}
func (p *TUserServiceSelectSlaveRegisterCountDayResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectSlaveRegisterCountDayResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveRegisterCountDayResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TRegisterCountDay, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem38 := &TRegisterCountDay{}
    if err := _elem38.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
    }
    p.Success = append(p.Success, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveRegisterCountDayResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveRegisterCountDay_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectSlaveRegisterCountDayResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectSlaveRegisterCountDayResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectSlaveRegisterCountDayResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Top
type TUserServiceSelectSlaveInviteFriendsAwardTopArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Top int32 `thrift:"top,2" db:"top" json:"top"`
}

func NewTUserServiceSelectSlaveInviteFriendsAwardTopArgs() *TUserServiceSelectSlaveInviteFriendsAwardTopArgs {
  return &TUserServiceSelectSlaveInviteFriendsAwardTopArgs{}
}


func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs) GetTop() int32 {
  return p.Top
}
func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Top = v
}
  return nil
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveInviteFriendsAwardTop_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("top", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:top: ", p), err) }
  if err := oprot.WriteI32(int32(p.Top)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.top (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:top: ", p), err) }
  return err
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectSlaveInviteFriendsAwardTopArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectSlaveInviteFriendsAwardTopResult struct {
  Success []*TInviteFriendsAwardTop `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectSlaveInviteFriendsAwardTopResult() *TUserServiceSelectSlaveInviteFriendsAwardTopResult {
  return &TUserServiceSelectSlaveInviteFriendsAwardTopResult{}
}

var TUserServiceSelectSlaveInviteFriendsAwardTopResult_Success_DEFAULT []*TInviteFriendsAwardTop

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopResult) GetSuccess() []*TInviteFriendsAwardTop {
  return p.Success
}
func (p *TUserServiceSelectSlaveInviteFriendsAwardTopResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TInviteFriendsAwardTop, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem39 := &TInviteFriendsAwardTop{}
    if err := _elem39.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
    }
    p.Success = append(p.Success, _elem39)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveInviteFriendsAwardTop_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectSlaveInviteFriendsAwardTopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectSlaveInviteFriendsAwardTopResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
//  - Level
type TUserServiceSelectSlaveInviteUserRelationArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Level int32 `thrift:"level,3" db:"level" json:"level"`
}

func NewTUserServiceSelectSlaveInviteUserRelationArgs() *TUserServiceSelectSlaveInviteUserRelationArgs {
  return &TUserServiceSelectSlaveInviteUserRelationArgs{}
}


func (p *TUserServiceSelectSlaveInviteUserRelationArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs) GetUserId() int32 {
  return p.UserId
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs) GetLevel() int32 {
  return p.Level
}
func (p *TUserServiceSelectSlaveInviteUserRelationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Level = v
}
  return nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveInviteUserRelation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err) }
  return err
}

func (p *TUserServiceSelectSlaveInviteUserRelationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectSlaveInviteUserRelationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectSlaveInviteUserRelationResult struct {
  Success []*TInviteUserRelation `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectSlaveInviteUserRelationResult() *TUserServiceSelectSlaveInviteUserRelationResult {
  return &TUserServiceSelectSlaveInviteUserRelationResult{}
}

var TUserServiceSelectSlaveInviteUserRelationResult_Success_DEFAULT []*TInviteUserRelation

func (p *TUserServiceSelectSlaveInviteUserRelationResult) GetSuccess() []*TInviteUserRelation {
  return p.Success
}
func (p *TUserServiceSelectSlaveInviteUserRelationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TInviteUserRelation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem40 := &TInviteUserRelation{}
    if err := _elem40.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem40), err)
    }
    p.Success = append(p.Success, _elem40)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSlaveInviteUserRelation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectSlaveInviteUserRelationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectSlaveInviteUserRelationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectSlaveInviteUserRelationResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Params
type TUserServiceSelectUserAttributeListByConditionsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Params *TUserAttributeParam `thrift:"params,2" db:"params" json:"params"`
}

func NewTUserServiceSelectUserAttributeListByConditionsArgs() *TUserServiceSelectUserAttributeListByConditionsArgs {
  return &TUserServiceSelectUserAttributeListByConditionsArgs{}
}


func (p *TUserServiceSelectUserAttributeListByConditionsArgs) GetTraceId() string {
  return p.TraceId
}
var TUserServiceSelectUserAttributeListByConditionsArgs_Params_DEFAULT *TUserAttributeParam
func (p *TUserServiceSelectUserAttributeListByConditionsArgs) GetParams() *TUserAttributeParam {
  if !p.IsSetParams() {
    return TUserServiceSelectUserAttributeListByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TUserServiceSelectUserAttributeListByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Params = &TUserAttributeParam{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserAttributeListByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserAttributeListByConditionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:params: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserAttributeListByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserAttributeListByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserAttributeListByConditionsResult struct {
  Success []*TUserAttributeResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserAttributeListByConditionsResult() *TUserServiceSelectUserAttributeListByConditionsResult {
  return &TUserServiceSelectUserAttributeListByConditionsResult{}
}

var TUserServiceSelectUserAttributeListByConditionsResult_Success_DEFAULT []*TUserAttributeResult_

func (p *TUserServiceSelectUserAttributeListByConditionsResult) GetSuccess() []*TUserAttributeResult_ {
  return p.Success
}
func (p *TUserServiceSelectUserAttributeListByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TUserAttributeResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem41 := &TUserAttributeResult_{}
    if err := _elem41.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
    }
    p.Success = append(p.Success, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserAttributeListByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserAttributeListByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserAttributeListByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserAttributeListByConditionsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Params
type TUserServiceSelectUserAttributeCountByConditionsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Params *TUserAttributeParam `thrift:"params,2" db:"params" json:"params"`
}

func NewTUserServiceSelectUserAttributeCountByConditionsArgs() *TUserServiceSelectUserAttributeCountByConditionsArgs {
  return &TUserServiceSelectUserAttributeCountByConditionsArgs{}
}


func (p *TUserServiceSelectUserAttributeCountByConditionsArgs) GetTraceId() string {
  return p.TraceId
}
var TUserServiceSelectUserAttributeCountByConditionsArgs_Params_DEFAULT *TUserAttributeParam
func (p *TUserServiceSelectUserAttributeCountByConditionsArgs) GetParams() *TUserAttributeParam {
  if !p.IsSetParams() {
    return TUserServiceSelectUserAttributeCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TUserServiceSelectUserAttributeCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Params = &TUserAttributeParam{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserAttributeCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserAttributeCountByConditionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:params: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserAttributeCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserAttributeCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserAttributeCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserAttributeCountByConditionsResult() *TUserServiceSelectUserAttributeCountByConditionsResult {
  return &TUserServiceSelectUserAttributeCountByConditionsResult{}
}

var TUserServiceSelectUserAttributeCountByConditionsResult_Success_DEFAULT int32
func (p *TUserServiceSelectUserAttributeCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TUserServiceSelectUserAttributeCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceSelectUserAttributeCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserAttributeCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserAttributeCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserAttributeCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserAttributeCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Params
type TUserServiceUpdateUserAttributeByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  Params *TUserAttributeParam `thrift:"params,2" db:"params" json:"params"`
}

func NewTUserServiceUpdateUserAttributeByUserIdArgs() *TUserServiceUpdateUserAttributeByUserIdArgs {
  return &TUserServiceUpdateUserAttributeByUserIdArgs{}
}


func (p *TUserServiceUpdateUserAttributeByUserIdArgs) GetTraceId() string {
  return p.TraceId
}
var TUserServiceUpdateUserAttributeByUserIdArgs_Params_DEFAULT *TUserAttributeParam
func (p *TUserServiceUpdateUserAttributeByUserIdArgs) GetParams() *TUserAttributeParam {
  if !p.IsSetParams() {
    return TUserServiceUpdateUserAttributeByUserIdArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TUserServiceUpdateUserAttributeByUserIdArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Params = &TUserAttributeParam{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserAttributeByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceUpdateUserAttributeByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:params: ", p), err) }
  return err
}

func (p *TUserServiceUpdateUserAttributeByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceUpdateUserAttributeByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceUpdateUserAttributeByUserIdResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceUpdateUserAttributeByUserIdResult() *TUserServiceUpdateUserAttributeByUserIdResult {
  return &TUserServiceUpdateUserAttributeByUserIdResult{}
}

var TUserServiceUpdateUserAttributeByUserIdResult_Success_DEFAULT bool
func (p *TUserServiceUpdateUserAttributeByUserIdResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TUserServiceUpdateUserAttributeByUserIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserServiceUpdateUserAttributeByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateUserAttributeByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceUpdateUserAttributeByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceUpdateUserAttributeByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceUpdateUserAttributeByUserIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserId
type TUserServiceSelectUserAttributeLogByUserIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
}

func NewTUserServiceSelectUserAttributeLogByUserIdArgs() *TUserServiceSelectUserAttributeLogByUserIdArgs {
  return &TUserServiceSelectUserAttributeLogByUserIdArgs{}
}


func (p *TUserServiceSelectUserAttributeLogByUserIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserServiceSelectUserAttributeLogByUserIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserServiceSelectUserAttributeLogByUserIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeLogByUserIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserServiceSelectUserAttributeLogByUserIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserServiceSelectUserAttributeLogByUserIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserAttributeLogByUserId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserAttributeLogByUserIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserAttributeLogByUserIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserServiceSelectUserAttributeLogByUserIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserAttributeLogByUserIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserServiceSelectUserAttributeLogByUserIdResult struct {
  Success []*TUserAttributeLogResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserServiceSelectUserAttributeLogByUserIdResult() *TUserServiceSelectUserAttributeLogByUserIdResult {
  return &TUserServiceSelectUserAttributeLogByUserIdResult{}
}

var TUserServiceSelectUserAttributeLogByUserIdResult_Success_DEFAULT []*TUserAttributeLogResult_

func (p *TUserServiceSelectUserAttributeLogByUserIdResult) GetSuccess() []*TUserAttributeLogResult_ {
  return p.Success
}
func (p *TUserServiceSelectUserAttributeLogByUserIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserServiceSelectUserAttributeLogByUserIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeLogByUserIdResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TUserAttributeLogResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem42 := &TUserAttributeLogResult_{}
    if err := _elem42.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
    }
    p.Success = append(p.Success, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserServiceSelectUserAttributeLogByUserIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserAttributeLogByUserId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserServiceSelectUserAttributeLogByUserIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserServiceSelectUserAttributeLogByUserIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserServiceSelectUserAttributeLogByUserIdResult(%+v)", *p)
}


