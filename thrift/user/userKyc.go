// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package user

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - UserId
//  - CountryCode
//  - VerifyType
//  - IdRealName
//  - IdNumber
//  - IdPicFront
//  - IdPicBack
//  - IdPicHold
//  - PassportId
//  - PassportLastName
//  - PassportFirstName
//  - PassportSex
//  - PassportPicFront
//  - PassportPicInfo
//  - PassportPicHold
//  - Status
//  - CreatedAt
//  - UpdatedAt
//  - Empty
//  - Mark
type TUserKyc struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  CountryCode string `thrift:"countryCode,3" db:"countryCode" json:"countryCode"`
  VerifyType string `thrift:"verifyType,4" db:"verifyType" json:"verifyType"`
  IdRealName string `thrift:"idRealName,5" db:"idRealName" json:"idRealName"`
  IdNumber string `thrift:"idNumber,6" db:"idNumber" json:"idNumber"`
  IdPicFront string `thrift:"idPicFront,7" db:"idPicFront" json:"idPicFront"`
  IdPicBack string `thrift:"idPicBack,8" db:"idPicBack" json:"idPicBack"`
  IdPicHold string `thrift:"idPicHold,9" db:"idPicHold" json:"idPicHold"`
  PassportId string `thrift:"passportId,10" db:"passportId" json:"passportId"`
  PassportLastName string `thrift:"passportLastName,11" db:"passportLastName" json:"passportLastName"`
  PassportFirstName string `thrift:"passportFirstName,12" db:"passportFirstName" json:"passportFirstName"`
  PassportSex string `thrift:"passportSex,13" db:"passportSex" json:"passportSex"`
  PassportPicFront string `thrift:"passportPicFront,14" db:"passportPicFront" json:"passportPicFront"`
  PassportPicInfo string `thrift:"passportPicInfo,15" db:"passportPicInfo" json:"passportPicInfo"`
  PassportPicHold string `thrift:"passportPicHold,16" db:"passportPicHold" json:"passportPicHold"`
  Status string `thrift:"status,17" db:"status" json:"status"`
  CreatedAt string `thrift:"createdAt,18" db:"createdAt" json:"createdAt"`
  UpdatedAt string `thrift:"updatedAt,19" db:"updatedAt" json:"updatedAt"`
  Empty bool `thrift:"empty,20" db:"empty" json:"empty,omitempty"`
  Mark string `thrift:"mark,21" db:"mark" json:"mark"`
}

func NewTUserKyc() *TUserKyc {
  return &TUserKyc{}
}


func (p *TUserKyc) GetID() int32 {
  return p.ID
}

func (p *TUserKyc) GetUserId() int32 {
  return p.UserId
}

func (p *TUserKyc) GetCountryCode() string {
  return p.CountryCode
}

func (p *TUserKyc) GetVerifyType() string {
  return p.VerifyType
}

func (p *TUserKyc) GetIdRealName() string {
  return p.IdRealName
}

func (p *TUserKyc) GetIdNumber() string {
  return p.IdNumber
}

func (p *TUserKyc) GetIdPicFront() string {
  return p.IdPicFront
}

func (p *TUserKyc) GetIdPicBack() string {
  return p.IdPicBack
}

func (p *TUserKyc) GetIdPicHold() string {
  return p.IdPicHold
}

func (p *TUserKyc) GetPassportId() string {
  return p.PassportId
}

func (p *TUserKyc) GetPassportLastName() string {
  return p.PassportLastName
}

func (p *TUserKyc) GetPassportFirstName() string {
  return p.PassportFirstName
}

func (p *TUserKyc) GetPassportSex() string {
  return p.PassportSex
}

func (p *TUserKyc) GetPassportPicFront() string {
  return p.PassportPicFront
}

func (p *TUserKyc) GetPassportPicInfo() string {
  return p.PassportPicInfo
}

func (p *TUserKyc) GetPassportPicHold() string {
  return p.PassportPicHold
}

func (p *TUserKyc) GetStatus() string {
  return p.Status
}

func (p *TUserKyc) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserKyc) GetUpdatedAt() string {
  return p.UpdatedAt
}
var TUserKyc_Empty_DEFAULT bool = false

func (p *TUserKyc) GetEmpty() bool {
  return p.Empty
}

func (p *TUserKyc) GetMark() string {
  return p.Mark
}
func (p *TUserKyc) IsSetEmpty() bool {
  return p.Empty != TUserKyc_Empty_DEFAULT
}

func (p *TUserKyc) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKyc)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserKyc)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserKyc)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *TUserKyc)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VerifyType = v
}
  return nil
}

func (p *TUserKyc)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IdRealName = v
}
  return nil
}

func (p *TUserKyc)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IdNumber = v
}
  return nil
}

func (p *TUserKyc)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IdPicFront = v
}
  return nil
}

func (p *TUserKyc)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IdPicBack = v
}
  return nil
}

func (p *TUserKyc)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IdPicHold = v
}
  return nil
}

func (p *TUserKyc)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PassportId = v
}
  return nil
}

func (p *TUserKyc)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PassportLastName = v
}
  return nil
}

func (p *TUserKyc)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PassportFirstName = v
}
  return nil
}

func (p *TUserKyc)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PassportSex = v
}
  return nil
}

func (p *TUserKyc)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.PassportPicFront = v
}
  return nil
}

func (p *TUserKyc)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PassportPicInfo = v
}
  return nil
}

func (p *TUserKyc)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.PassportPicHold = v
}
  return nil
}

func (p *TUserKyc)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUserKyc)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserKyc)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.UpdatedAt = v
}
  return nil
}

func (p *TUserKyc)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TUserKyc)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TUserKyc) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserKyc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKyc) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserKyc) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TUserKyc) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:countryCode: ", p), err) }
  if err := oprot.WriteString(string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:countryCode: ", p), err) }
  return err
}

func (p *TUserKyc) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifyType", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:verifyType: ", p), err) }
  if err := oprot.WriteString(string(p.VerifyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifyType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:verifyType: ", p), err) }
  return err
}

func (p *TUserKyc) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idRealName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:idRealName: ", p), err) }
  if err := oprot.WriteString(string(p.IdRealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idRealName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:idRealName: ", p), err) }
  return err
}

func (p *TUserKyc) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idNumber", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:idNumber: ", p), err) }
  if err := oprot.WriteString(string(p.IdNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idNumber (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:idNumber: ", p), err) }
  return err
}

func (p *TUserKyc) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idPicFront", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:idPicFront: ", p), err) }
  if err := oprot.WriteString(string(p.IdPicFront)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idPicFront (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:idPicFront: ", p), err) }
  return err
}

func (p *TUserKyc) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idPicBack", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:idPicBack: ", p), err) }
  if err := oprot.WriteString(string(p.IdPicBack)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idPicBack (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:idPicBack: ", p), err) }
  return err
}

func (p *TUserKyc) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idPicHold", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:idPicHold: ", p), err) }
  if err := oprot.WriteString(string(p.IdPicHold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idPicHold (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:idPicHold: ", p), err) }
  return err
}

func (p *TUserKyc) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportId", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:passportId: ", p), err) }
  if err := oprot.WriteString(string(p.PassportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:passportId: ", p), err) }
  return err
}

func (p *TUserKyc) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportLastName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:passportLastName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportLastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportLastName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:passportLastName: ", p), err) }
  return err
}

func (p *TUserKyc) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportFirstName", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:passportFirstName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportFirstName (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:passportFirstName: ", p), err) }
  return err
}

func (p *TUserKyc) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportSex", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:passportSex: ", p), err) }
  if err := oprot.WriteString(string(p.PassportSex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportSex (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:passportSex: ", p), err) }
  return err
}

func (p *TUserKyc) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportPicFront", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:passportPicFront: ", p), err) }
  if err := oprot.WriteString(string(p.PassportPicFront)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportPicFront (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:passportPicFront: ", p), err) }
  return err
}

func (p *TUserKyc) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportPicInfo", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:passportPicInfo: ", p), err) }
  if err := oprot.WriteString(string(p.PassportPicInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportPicInfo (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:passportPicInfo: ", p), err) }
  return err
}

func (p *TUserKyc) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportPicHold", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:passportPicHold: ", p), err) }
  if err := oprot.WriteString(string(p.PassportPicHold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportPicHold (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:passportPicHold: ", p), err) }
  return err
}

func (p *TUserKyc) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:status: ", p), err) }
  return err
}

func (p *TUserKyc) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:createdAt: ", p), err) }
  return err
}

func (p *TUserKyc) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAt", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:updatedAt: ", p), err) }
  if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAt (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:updatedAt: ", p), err) }
  return err
}

func (p *TUserKyc) writeField20(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:empty: ", p), err) }
  }
  return err
}

func (p *TUserKyc) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:mark: ", p), err) }
  return err
}

func (p *TUserKyc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKyc(%+v)", *p)
}

// Attributes:
//  - ID
//  - IdRealName
//  - Email
//  - Mobile
//  - CreatedAt
//  - Status
//  - VerifyType
//  - PassportLastName
//  - PassportFirstName
//  - UserId
type TUserKycResult_ struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  IdRealName string `thrift:"idRealName,2" db:"idRealName" json:"idRealName"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Mobile string `thrift:"mobile,4" db:"mobile" json:"mobile"`
  CreatedAt string `thrift:"createdAt,5" db:"createdAt" json:"createdAt"`
  Status string `thrift:"status,6" db:"status" json:"status"`
  VerifyType string `thrift:"verifyType,7" db:"verifyType" json:"verifyType"`
  PassportLastName string `thrift:"passportLastName,8" db:"passportLastName" json:"passportLastName"`
  PassportFirstName string `thrift:"passportFirstName,9" db:"passportFirstName" json:"passportFirstName"`
  UserId int32 `thrift:"userId,10" db:"userId" json:"userId"`
}

func NewTUserKycResult_() *TUserKycResult_ {
  return &TUserKycResult_{}
}


func (p *TUserKycResult_) GetID() int32 {
  return p.ID
}

func (p *TUserKycResult_) GetIdRealName() string {
  return p.IdRealName
}

func (p *TUserKycResult_) GetEmail() string {
  return p.Email
}

func (p *TUserKycResult_) GetMobile() string {
  return p.Mobile
}

func (p *TUserKycResult_) GetCreatedAt() string {
  return p.CreatedAt
}

func (p *TUserKycResult_) GetStatus() string {
  return p.Status
}

func (p *TUserKycResult_) GetVerifyType() string {
  return p.VerifyType
}

func (p *TUserKycResult_) GetPassportLastName() string {
  return p.PassportLastName
}

func (p *TUserKycResult_) GetPassportFirstName() string {
  return p.PassportFirstName
}

func (p *TUserKycResult_) GetUserId() int32 {
  return p.UserId
}
func (p *TUserKycResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IdRealName = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VerifyType = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PassportLastName = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PassportFirstName = v
}
  return nil
}

func (p *TUserKycResult_)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserKycResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TUserKycResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idRealName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:idRealName: ", p), err) }
  if err := oprot.WriteString(string(p.IdRealName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idRealName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:idRealName: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mobile: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdAt: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifyType", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:verifyType: ", p), err) }
  if err := oprot.WriteString(string(p.VerifyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifyType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:verifyType: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportLastName", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:passportLastName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportLastName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportLastName (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:passportLastName: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("passportFirstName", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:passportFirstName: ", p), err) }
  if err := oprot.WriteString(string(p.PassportFirstName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.passportFirstName (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:passportFirstName: ", p), err) }
  return err
}

func (p *TUserKycResult_) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:userId: ", p), err) }
  return err
}

func (p *TUserKycResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycResult_(%+v)", *p)
}

// Attributes:
//  - Email
//  - Mobile
//  - Lang
type TAuditUserKycResult_ struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  Mobile string `thrift:"mobile,2" db:"mobile" json:"mobile"`
  Lang string `thrift:"lang,3" db:"lang" json:"lang"`
}

func NewTAuditUserKycResult_() *TAuditUserKycResult_ {
  return &TAuditUserKycResult_{}
}


func (p *TAuditUserKycResult_) GetEmail() string {
  return p.Email
}

func (p *TAuditUserKycResult_) GetMobile() string {
  return p.Mobile
}

func (p *TAuditUserKycResult_) GetLang() string {
  return p.Lang
}
func (p *TAuditUserKycResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAuditUserKycResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TAuditUserKycResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TAuditUserKycResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *TAuditUserKycResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAuditUserKycResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAuditUserKycResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *TAuditUserKycResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mobile: ", p), err) }
  return err
}

func (p *TAuditUserKycResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lang: ", p), err) }
  return err
}

func (p *TAuditUserKycResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAuditUserKycResult_(%+v)", *p)
}

type TUserKycService interface {
  // Parameters:
  //  - TraceId
  //  - UserName
  //  - Status
  //  - StartPage
  //  - PageSize
  SelectUserKycByConditions(ctx context.Context, traceId string, userName string, status string, startPage int32, pageSize int32) (r []*TUserKycResult_, err error)
  // Parameters:
  //  - TraceId
  //  - UserName
  //  - Status
  SelectUserKycCountByConditions(ctx context.Context, traceId string, userName string, status string) (r int32, err error)
  // Parameters:
  //  - TraceId
  //  - ID
  SelectUserKycById(ctx context.Context, traceId string, id int32) (r *TUserKyc, err error)
  // Parameters:
  //  - TraceId
  //  - ID
  //  - Status
  //  - Mark
  //  - UserId
  AuditUserKyc(ctx context.Context, traceId string, id int32, status string, mark string, userId int32) (r *TAuditUserKycResult_, err error)
}

type TUserKycServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTUserKycService instead
func NewTUserKycServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TUserKycServiceClient {
  return &TUserKycServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTUserKycService instead
func NewTUserKycServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TUserKycServiceClient {
  return &TUserKycServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTUserKycServiceClient(c thrift.TClient) *TUserKycServiceClient {
  return &TUserKycServiceClient{
    c: c,
  }
}

// Parameters:
//  - TraceId
//  - UserName
//  - Status
//  - StartPage
//  - PageSize
func (p *TUserKycServiceClient) SelectUserKycByConditions(ctx context.Context, traceId string, userName string, status string, startPage int32, pageSize int32) (r []*TUserKycResult_, err error) {
  var _args0 TUserKycServiceSelectUserKycByConditionsArgs
  _args0.TraceId = traceId
  _args0.UserName = userName
  _args0.Status = status
  _args0.StartPage = startPage
  _args0.PageSize = pageSize
  var _result1 TUserKycServiceSelectUserKycByConditionsResult
  if err = p.c.Call(ctx, "selectUserKycByConditions", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - UserName
//  - Status
func (p *TUserKycServiceClient) SelectUserKycCountByConditions(ctx context.Context, traceId string, userName string, status string) (r int32, err error) {
  var _args2 TUserKycServiceSelectUserKycCountByConditionsArgs
  _args2.TraceId = traceId
  _args2.UserName = userName
  _args2.Status = status
  var _result3 TUserKycServiceSelectUserKycCountByConditionsResult
  if err = p.c.Call(ctx, "selectUserKycCountByConditions", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - ID
func (p *TUserKycServiceClient) SelectUserKycById(ctx context.Context, traceId string, id int32) (r *TUserKyc, err error) {
  var _args4 TUserKycServiceSelectUserKycByIdArgs
  _args4.TraceId = traceId
  _args4.ID = id
  var _result5 TUserKycServiceSelectUserKycByIdResult
  if err = p.c.Call(ctx, "selectUserKycById", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - TraceId
//  - ID
//  - Status
//  - Mark
//  - UserId
func (p *TUserKycServiceClient) AuditUserKyc(ctx context.Context, traceId string, id int32, status string, mark string, userId int32) (r *TAuditUserKycResult_, err error) {
  var _args6 TUserKycServiceAuditUserKycArgs
  _args6.TraceId = traceId
  _args6.ID = id
  _args6.Status = status
  _args6.Mark = mark
  _args6.UserId = userId
  var _result7 TUserKycServiceAuditUserKycResult
  if err = p.c.Call(ctx, "auditUserKyc", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

type TUserKycServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TUserKycService
}

func (p *TUserKycServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TUserKycServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TUserKycServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTUserKycServiceProcessor(handler TUserKycService) *TUserKycServiceProcessor {

  self8 := &TUserKycServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["selectUserKycByConditions"] = &tUserKycServiceProcessorSelectUserKycByConditions{handler:handler}
  self8.processorMap["selectUserKycCountByConditions"] = &tUserKycServiceProcessorSelectUserKycCountByConditions{handler:handler}
  self8.processorMap["selectUserKycById"] = &tUserKycServiceProcessorSelectUserKycById{handler:handler}
  self8.processorMap["auditUserKyc"] = &tUserKycServiceProcessorAuditUserKyc{handler:handler}
return self8
}

func (p *TUserKycServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x9

}

type tUserKycServiceProcessorSelectUserKycByConditions struct {
  handler TUserKycService
}

func (p *tUserKycServiceProcessorSelectUserKycByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserKycServiceSelectUserKycByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserKycByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserKycServiceSelectUserKycByConditionsResult{}
var retval []*TUserKycResult_
  var err2 error
  if retval, err2 = p.handler.SelectUserKycByConditions(ctx, args.TraceId, args.UserName, args.Status, args.StartPage, args.PageSize); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserKycByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectUserKycByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserKycByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserKycServiceProcessorSelectUserKycCountByConditions struct {
  handler TUserKycService
}

func (p *tUserKycServiceProcessorSelectUserKycCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserKycServiceSelectUserKycCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserKycCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserKycServiceSelectUserKycCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectUserKycCountByConditions(ctx, args.TraceId, args.UserName, args.Status); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserKycCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectUserKycCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectUserKycCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserKycServiceProcessorSelectUserKycById struct {
  handler TUserKycService
}

func (p *tUserKycServiceProcessorSelectUserKycById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserKycServiceSelectUserKycByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectUserKycById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserKycServiceSelectUserKycByIdResult{}
var retval *TUserKyc
  var err2 error
  if retval, err2 = p.handler.SelectUserKycById(ctx, args.TraceId, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectUserKycById: " + err2.Error())
    oprot.WriteMessageBegin("selectUserKycById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectUserKycById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tUserKycServiceProcessorAuditUserKyc struct {
  handler TUserKycService
}

func (p *tUserKycServiceProcessorAuditUserKyc) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TUserKycServiceAuditUserKycArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("auditUserKyc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TUserKycServiceAuditUserKycResult{}
var retval *TAuditUserKycResult_
  var err2 error
  if retval, err2 = p.handler.AuditUserKyc(ctx, args.TraceId, args.ID, args.Status, args.Mark, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing auditUserKyc: " + err2.Error())
    oprot.WriteMessageBegin("auditUserKyc", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("auditUserKyc", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TraceId
//  - UserName
//  - Status
//  - StartPage
//  - PageSize
type TUserKycServiceSelectUserKycByConditionsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserName string `thrift:"userName,2" db:"userName" json:"userName"`
  Status string `thrift:"status,3" db:"status" json:"status"`
  StartPage int32 `thrift:"startPage,4" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,5" db:"pageSize" json:"pageSize"`
}

func NewTUserKycServiceSelectUserKycByConditionsArgs() *TUserKycServiceSelectUserKycByConditionsArgs {
  return &TUserKycServiceSelectUserKycByConditionsArgs{}
}


func (p *TUserKycServiceSelectUserKycByConditionsArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) GetUserName() string {
  return p.UserName
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) GetStatus() string {
  return p.Status
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) GetStartPage() int32 {
  return p.StartPage
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) GetPageSize() int32 {
  return p.PageSize
}
func (p *TUserKycServiceSelectUserKycByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startPage: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycServiceSelectUserKycByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserKycServiceSelectUserKycByConditionsResult struct {
  Success []*TUserKycResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserKycServiceSelectUserKycByConditionsResult() *TUserKycServiceSelectUserKycByConditionsResult {
  return &TUserKycServiceSelectUserKycByConditionsResult{}
}

var TUserKycServiceSelectUserKycByConditionsResult_Success_DEFAULT []*TUserKycResult_

func (p *TUserKycServiceSelectUserKycByConditionsResult) GetSuccess() []*TUserKycResult_ {
  return p.Success
}
func (p *TUserKycServiceSelectUserKycByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserKycServiceSelectUserKycByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TUserKycResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &TUserKycResult_{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Success = append(p.Success, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycServiceSelectUserKycByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserKycServiceSelectUserKycByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycServiceSelectUserKycByConditionsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - UserName
//  - Status
type TUserKycServiceSelectUserKycCountByConditionsArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  UserName string `thrift:"userName,2" db:"userName" json:"userName"`
  Status string `thrift:"status,3" db:"status" json:"status"`
}

func NewTUserKycServiceSelectUserKycCountByConditionsArgs() *TUserKycServiceSelectUserKycCountByConditionsArgs {
  return &TUserKycServiceSelectUserKycCountByConditionsArgs{}
}


func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) GetUserName() string {
  return p.UserName
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) GetStatus() string {
  return p.Status
}
func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycServiceSelectUserKycCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserKycServiceSelectUserKycCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserKycServiceSelectUserKycCountByConditionsResult() *TUserKycServiceSelectUserKycCountByConditionsResult {
  return &TUserKycServiceSelectUserKycCountByConditionsResult{}
}

var TUserKycServiceSelectUserKycCountByConditionsResult_Success_DEFAULT int32
func (p *TUserKycServiceSelectUserKycCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TUserKycServiceSelectUserKycCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TUserKycServiceSelectUserKycCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycServiceSelectUserKycCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserKycServiceSelectUserKycCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycServiceSelectUserKycCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - ID
type TUserKycServiceSelectUserKycByIdArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
}

func NewTUserKycServiceSelectUserKycByIdArgs() *TUserKycServiceSelectUserKycByIdArgs {
  return &TUserKycServiceSelectUserKycByIdArgs{}
}


func (p *TUserKycServiceSelectUserKycByIdArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserKycServiceSelectUserKycByIdArgs) GetID() int32 {
  return p.ID
}
func (p *TUserKycServiceSelectUserKycByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycServiceSelectUserKycByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycByIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserKycServiceSelectUserKycByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycServiceSelectUserKycByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TUserKycServiceSelectUserKycByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycServiceSelectUserKycByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserKycServiceSelectUserKycByIdResult struct {
  Success *TUserKyc `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserKycServiceSelectUserKycByIdResult() *TUserKycServiceSelectUserKycByIdResult {
  return &TUserKycServiceSelectUserKycByIdResult{}
}

var TUserKycServiceSelectUserKycByIdResult_Success_DEFAULT *TUserKyc
func (p *TUserKycServiceSelectUserKycByIdResult) GetSuccess() *TUserKyc {
  if !p.IsSetSuccess() {
    return TUserKycServiceSelectUserKycByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *TUserKycServiceSelectUserKycByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserKycServiceSelectUserKycByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycServiceSelectUserKycByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TUserKyc{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TUserKycServiceSelectUserKycByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectUserKycById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycServiceSelectUserKycByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserKycServiceSelectUserKycByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycServiceSelectUserKycByIdResult(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - ID
//  - Status
//  - Mark
//  - UserId
type TUserKycServiceAuditUserKycArgs struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
  Status string `thrift:"status,3" db:"status" json:"status"`
  Mark string `thrift:"mark,4" db:"mark" json:"mark"`
  UserId int32 `thrift:"userId,5" db:"userId" json:"userId"`
}

func NewTUserKycServiceAuditUserKycArgs() *TUserKycServiceAuditUserKycArgs {
  return &TUserKycServiceAuditUserKycArgs{}
}


func (p *TUserKycServiceAuditUserKycArgs) GetTraceId() string {
  return p.TraceId
}

func (p *TUserKycServiceAuditUserKycArgs) GetID() int32 {
  return p.ID
}

func (p *TUserKycServiceAuditUserKycArgs) GetStatus() string {
  return p.Status
}

func (p *TUserKycServiceAuditUserKycArgs) GetMark() string {
  return p.Mark
}

func (p *TUserKycServiceAuditUserKycArgs) GetUserId() int32 {
  return p.UserId
}
func (p *TUserKycServiceAuditUserKycArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycServiceAuditUserKycArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TUserKycServiceAuditUserKycArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TUserKycServiceAuditUserKycArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TUserKycServiceAuditUserKycArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mark = v
}
  return nil
}

func (p *TUserKycServiceAuditUserKycArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TUserKycServiceAuditUserKycArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("auditUserKyc_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycServiceAuditUserKycArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TUserKycServiceAuditUserKycArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TUserKycServiceAuditUserKycArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TUserKycServiceAuditUserKycArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mark", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mark: ", p), err) }
  if err := oprot.WriteString(string(p.Mark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mark (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mark: ", p), err) }
  return err
}

func (p *TUserKycServiceAuditUserKycArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:userId: ", p), err) }
  return err
}

func (p *TUserKycServiceAuditUserKycArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycServiceAuditUserKycArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TUserKycServiceAuditUserKycResult struct {
  Success *TAuditUserKycResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTUserKycServiceAuditUserKycResult() *TUserKycServiceAuditUserKycResult {
  return &TUserKycServiceAuditUserKycResult{}
}

var TUserKycServiceAuditUserKycResult_Success_DEFAULT *TAuditUserKycResult_
func (p *TUserKycServiceAuditUserKycResult) GetSuccess() *TAuditUserKycResult_ {
  if !p.IsSetSuccess() {
    return TUserKycServiceAuditUserKycResult_Success_DEFAULT
  }
return p.Success
}
func (p *TUserKycServiceAuditUserKycResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TUserKycServiceAuditUserKycResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TUserKycServiceAuditUserKycResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TAuditUserKycResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TUserKycServiceAuditUserKycResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("auditUserKyc_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TUserKycServiceAuditUserKycResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TUserKycServiceAuditUserKycResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TUserKycServiceAuditUserKycResult(%+v)", *p)
}


