// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package engine

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Timestamp
//  - ClientRequestId
//  - OrderId
//  - Account
//  - Symbol
//  - Status
//  - Created
//  - LeaveQuantity
//  - CumulatedQuantity
//  - TotalQuantity
//  - Side
//  - OrderType
//  - ExecutionOrderType
//  - Price
//  - Text
//  - SettlementQuantity
//  - StopPrice
//  - LinkedOrderId
//  - Empty
type TOrders struct {
  Timestamp string `thrift:"timestamp,1" db:"timestamp" json:"timestamp"`
  ClientRequestId string `thrift:"clientRequestId,2" db:"clientRequestId" json:"clientRequestId"`
  OrderId string `thrift:"orderId,3" db:"orderId" json:"orderId"`
  Account string `thrift:"account,4" db:"account" json:"account"`
  Symbol string `thrift:"symbol,5" db:"symbol" json:"symbol"`
  Status string `thrift:"status,6" db:"status" json:"status"`
  Created string `thrift:"created,7" db:"created" json:"created"`
  LeaveQuantity string `thrift:"leaveQuantity,8" db:"leaveQuantity" json:"leaveQuantity"`
  CumulatedQuantity string `thrift:"cumulatedQuantity,9" db:"cumulatedQuantity" json:"cumulatedQuantity"`
  TotalQuantity string `thrift:"totalQuantity,10" db:"totalQuantity" json:"totalQuantity"`
  Side string `thrift:"side,11" db:"side" json:"side"`
  OrderType string `thrift:"orderType,12" db:"orderType" json:"orderType"`
  ExecutionOrderType string `thrift:"executionOrderType,13" db:"executionOrderType" json:"executionOrderType"`
  Price string `thrift:"price,14" db:"price" json:"price"`
  Text string `thrift:"text,15" db:"text" json:"text"`
  SettlementQuantity string `thrift:"settlementQuantity,16" db:"settlementQuantity" json:"settlementQuantity"`
  StopPrice string `thrift:"stopPrice,17" db:"stopPrice" json:"stopPrice"`
  LinkedOrderId string `thrift:"linkedOrderId,18" db:"linkedOrderId" json:"linkedOrderId"`
  Empty bool `thrift:"empty,19" db:"empty" json:"empty,omitempty"`
}

func NewTOrders() *TOrders {
  return &TOrders{}
}


func (p *TOrders) GetTimestamp() string {
  return p.Timestamp
}

func (p *TOrders) GetClientRequestId() string {
  return p.ClientRequestId
}

func (p *TOrders) GetOrderId() string {
  return p.OrderId
}

func (p *TOrders) GetAccount() string {
  return p.Account
}

func (p *TOrders) GetSymbol() string {
  return p.Symbol
}

func (p *TOrders) GetStatus() string {
  return p.Status
}

func (p *TOrders) GetCreated() string {
  return p.Created
}

func (p *TOrders) GetLeaveQuantity() string {
  return p.LeaveQuantity
}

func (p *TOrders) GetCumulatedQuantity() string {
  return p.CumulatedQuantity
}

func (p *TOrders) GetTotalQuantity() string {
  return p.TotalQuantity
}

func (p *TOrders) GetSide() string {
  return p.Side
}

func (p *TOrders) GetOrderType() string {
  return p.OrderType
}

func (p *TOrders) GetExecutionOrderType() string {
  return p.ExecutionOrderType
}

func (p *TOrders) GetPrice() string {
  return p.Price
}

func (p *TOrders) GetText() string {
  return p.Text
}

func (p *TOrders) GetSettlementQuantity() string {
  return p.SettlementQuantity
}

func (p *TOrders) GetStopPrice() string {
  return p.StopPrice
}

func (p *TOrders) GetLinkedOrderId() string {
  return p.LinkedOrderId
}
var TOrders_Empty_DEFAULT bool = false

func (p *TOrders) GetEmpty() bool {
  return p.Empty
}
func (p *TOrders) IsSetEmpty() bool {
  return p.Empty != TOrders_Empty_DEFAULT
}

func (p *TOrders) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrders)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *TOrders)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClientRequestId = v
}
  return nil
}

func (p *TOrders)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *TOrders)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *TOrders)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TOrders)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TOrders)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Created = v
}
  return nil
}

func (p *TOrders)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.LeaveQuantity = v
}
  return nil
}

func (p *TOrders)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CumulatedQuantity = v
}
  return nil
}

func (p *TOrders)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TotalQuantity = v
}
  return nil
}

func (p *TOrders)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Side = v
}
  return nil
}

func (p *TOrders)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.OrderType = v
}
  return nil
}

func (p *TOrders)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.ExecutionOrderType = v
}
  return nil
}

func (p *TOrders)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *TOrders)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TOrders)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.SettlementQuantity = v
}
  return nil
}

func (p *TOrders)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.StopPrice = v
}
  return nil
}

func (p *TOrders)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.LinkedOrderId = v
}
  return nil
}

func (p *TOrders)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TOrders) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TOrders"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrders) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err) }
  return err
}

func (p *TOrders) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientRequestId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientRequestId: ", p), err) }
  if err := oprot.WriteString(string(p.ClientRequestId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientRequestId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientRequestId: ", p), err) }
  return err
}

func (p *TOrders) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orderId: ", p), err) }
  if err := oprot.WriteString(string(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orderId: ", p), err) }
  return err
}

func (p *TOrders) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:account: ", p), err) }
  return err
}

func (p *TOrders) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:symbol: ", p), err) }
  return err
}

func (p *TOrders) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *TOrders) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:created: ", p), err) }
  if err := oprot.WriteString(string(p.Created)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:created: ", p), err) }
  return err
}

func (p *TOrders) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leaveQuantity", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:leaveQuantity: ", p), err) }
  if err := oprot.WriteString(string(p.LeaveQuantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaveQuantity (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:leaveQuantity: ", p), err) }
  return err
}

func (p *TOrders) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cumulatedQuantity", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:cumulatedQuantity: ", p), err) }
  if err := oprot.WriteString(string(p.CumulatedQuantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cumulatedQuantity (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:cumulatedQuantity: ", p), err) }
  return err
}

func (p *TOrders) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalQuantity", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:totalQuantity: ", p), err) }
  if err := oprot.WriteString(string(p.TotalQuantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalQuantity (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:totalQuantity: ", p), err) }
  return err
}

func (p *TOrders) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("side", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:side: ", p), err) }
  if err := oprot.WriteString(string(p.Side)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.side (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:side: ", p), err) }
  return err
}

func (p *TOrders) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderType", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:orderType: ", p), err) }
  if err := oprot.WriteString(string(p.OrderType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:orderType: ", p), err) }
  return err
}

func (p *TOrders) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("executionOrderType", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:executionOrderType: ", p), err) }
  if err := oprot.WriteString(string(p.ExecutionOrderType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.executionOrderType (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:executionOrderType: ", p), err) }
  return err
}

func (p *TOrders) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:price: ", p), err) }
  if err := oprot.WriteString(string(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:price: ", p), err) }
  return err
}

func (p *TOrders) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:text: ", p), err) }
  return err
}

func (p *TOrders) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settlementQuantity", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:settlementQuantity: ", p), err) }
  if err := oprot.WriteString(string(p.SettlementQuantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settlementQuantity (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:settlementQuantity: ", p), err) }
  return err
}

func (p *TOrders) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stopPrice", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:stopPrice: ", p), err) }
  if err := oprot.WriteString(string(p.StopPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stopPrice (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:stopPrice: ", p), err) }
  return err
}

func (p *TOrders) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("linkedOrderId", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:linkedOrderId: ", p), err) }
  if err := oprot.WriteString(string(p.LinkedOrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.linkedOrderId (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:linkedOrderId: ", p), err) }
  return err
}

func (p *TOrders) writeField19(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:empty: ", p), err) }
  }
  return err
}

func (p *TOrders) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrders(%+v)", *p)
}

// Attributes:
//  - UserId
//  - Email
//  - StartTime
//  - EndTime
//  - Side
//  - Symbol
//  - Status
//  - Account
//  - StartPage
//  - PageSize
//  - TraceId
//  - Mobile
type TOrdersParams struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  Email string `thrift:"email,2" db:"email" json:"email"`
  StartTime string `thrift:"startTime,3" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,4" db:"endTime" json:"endTime"`
  Side string `thrift:"side,5" db:"side" json:"side"`
  Symbol string `thrift:"symbol,6" db:"symbol" json:"symbol"`
  Status string `thrift:"status,7" db:"status" json:"status"`
  Account string `thrift:"account,8" db:"account" json:"account"`
  StartPage int32 `thrift:"startPage,9" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,10" db:"pageSize" json:"pageSize"`
  TraceId string `thrift:"traceId,11" db:"traceId" json:"traceId"`
  Mobile string `thrift:"mobile,12" db:"mobile" json:"mobile"`
}

func NewTOrdersParams() *TOrdersParams {
  return &TOrdersParams{}
}


func (p *TOrdersParams) GetUserId() int32 {
  return p.UserId
}

func (p *TOrdersParams) GetEmail() string {
  return p.Email
}

func (p *TOrdersParams) GetStartTime() string {
  return p.StartTime
}

func (p *TOrdersParams) GetEndTime() string {
  return p.EndTime
}

func (p *TOrdersParams) GetSide() string {
  return p.Side
}

func (p *TOrdersParams) GetSymbol() string {
  return p.Symbol
}

func (p *TOrdersParams) GetStatus() string {
  return p.Status
}

func (p *TOrdersParams) GetAccount() string {
  return p.Account
}

func (p *TOrdersParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TOrdersParams) GetPageSize() int32 {
  return p.PageSize
}

func (p *TOrdersParams) GetTraceId() string {
  return p.TraceId
}

func (p *TOrdersParams) GetMobile() string {
  return p.Mobile
}
func (p *TOrdersParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TOrdersParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TOrdersParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TOrdersParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TOrdersParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Side = v
}
  return nil
}

func (p *TOrdersParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TOrdersParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TOrdersParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *TOrdersParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TOrdersParams)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TOrdersParams)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TOrdersParams)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TOrdersParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TOrdersParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("side", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:side: ", p), err) }
  if err := oprot.WriteString(string(p.Side)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.side (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:side: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:symbol: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:account: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startPage: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pageSize: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:traceId: ", p), err) }
  return err
}

func (p *TOrdersParams) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:mobile: ", p), err) }
  return err
}

func (p *TOrdersParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersParams(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Created
//  - UserId
//  - Email
//  - Symbol
//  - Side
//  - Price
//  - TotalQuantity
//  - CumulatedQuantity
//  - AvgPrice
//  - TradeFee
//  - Status
//  - Empty
//  - OrderType
//  - Account
//  - Mobile
type TOrdersResults struct {
  OrderId string `thrift:"orderId,1" db:"orderId" json:"orderId"`
  Created string `thrift:"created,2" db:"created" json:"created"`
  UserId int32 `thrift:"userId,3" db:"userId" json:"userId"`
  Email string `thrift:"email,4" db:"email" json:"email"`
  Symbol string `thrift:"symbol,5" db:"symbol" json:"symbol"`
  Side string `thrift:"side,6" db:"side" json:"side"`
  Price string `thrift:"price,7" db:"price" json:"price"`
  TotalQuantity string `thrift:"totalQuantity,8" db:"totalQuantity" json:"totalQuantity"`
  CumulatedQuantity string `thrift:"cumulatedQuantity,9" db:"cumulatedQuantity" json:"cumulatedQuantity"`
  AvgPrice string `thrift:"avgPrice,10" db:"avgPrice" json:"avgPrice"`
  TradeFee string `thrift:"tradeFee,11" db:"tradeFee" json:"tradeFee"`
  Status string `thrift:"status,12" db:"status" json:"status"`
  Empty bool `thrift:"empty,13" db:"empty" json:"empty,omitempty"`
  OrderType string `thrift:"orderType,14" db:"orderType" json:"orderType"`
  Account string `thrift:"account,15" db:"account" json:"account"`
  Mobile string `thrift:"mobile,16" db:"mobile" json:"mobile"`
}

func NewTOrdersResults() *TOrdersResults {
  return &TOrdersResults{}
}


func (p *TOrdersResults) GetOrderId() string {
  return p.OrderId
}

func (p *TOrdersResults) GetCreated() string {
  return p.Created
}

func (p *TOrdersResults) GetUserId() int32 {
  return p.UserId
}

func (p *TOrdersResults) GetEmail() string {
  return p.Email
}

func (p *TOrdersResults) GetSymbol() string {
  return p.Symbol
}

func (p *TOrdersResults) GetSide() string {
  return p.Side
}

func (p *TOrdersResults) GetPrice() string {
  return p.Price
}

func (p *TOrdersResults) GetTotalQuantity() string {
  return p.TotalQuantity
}

func (p *TOrdersResults) GetCumulatedQuantity() string {
  return p.CumulatedQuantity
}

func (p *TOrdersResults) GetAvgPrice() string {
  return p.AvgPrice
}

func (p *TOrdersResults) GetTradeFee() string {
  return p.TradeFee
}

func (p *TOrdersResults) GetStatus() string {
  return p.Status
}
var TOrdersResults_Empty_DEFAULT bool = false

func (p *TOrdersResults) GetEmpty() bool {
  return p.Empty
}

func (p *TOrdersResults) GetOrderType() string {
  return p.OrderType
}

func (p *TOrdersResults) GetAccount() string {
  return p.Account
}

func (p *TOrdersResults) GetMobile() string {
  return p.Mobile
}
func (p *TOrdersResults) IsSetEmpty() bool {
  return p.Empty != TOrdersResults_Empty_DEFAULT
}

func (p *TOrdersResults) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersResults)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *TOrdersResults)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Created = v
}
  return nil
}

func (p *TOrdersResults)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TOrdersResults)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TOrdersResults)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Symbol = v
}
  return nil
}

func (p *TOrdersResults)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Side = v
}
  return nil
}

func (p *TOrdersResults)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *TOrdersResults)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.TotalQuantity = v
}
  return nil
}

func (p *TOrdersResults)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CumulatedQuantity = v
}
  return nil
}

func (p *TOrdersResults)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.AvgPrice = v
}
  return nil
}

func (p *TOrdersResults)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.TradeFee = v
}
  return nil
}

func (p *TOrdersResults)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TOrdersResults)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TOrdersResults)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.OrderType = v
}
  return nil
}

func (p *TOrdersResults)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *TOrdersResults)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *TOrdersResults) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TOrdersResults"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersResults) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err) }
  if err := oprot.WriteString(string(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("created", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:created: ", p), err) }
  if err := oprot.WriteString(string(p.Created)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.created (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:created: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userId: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("symbol", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:symbol: ", p), err) }
  if err := oprot.WriteString(string(p.Symbol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.symbol (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:symbol: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("side", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:side: ", p), err) }
  if err := oprot.WriteString(string(p.Side)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.side (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:side: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:price: ", p), err) }
  if err := oprot.WriteString(string(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:price: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalQuantity", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:totalQuantity: ", p), err) }
  if err := oprot.WriteString(string(p.TotalQuantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalQuantity (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:totalQuantity: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cumulatedQuantity", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:cumulatedQuantity: ", p), err) }
  if err := oprot.WriteString(string(p.CumulatedQuantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cumulatedQuantity (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:cumulatedQuantity: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avgPrice", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:avgPrice: ", p), err) }
  if err := oprot.WriteString(string(p.AvgPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avgPrice (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:avgPrice: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeFee", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:tradeFee: ", p), err) }
  if err := oprot.WriteString(string(p.TradeFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeFee (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:tradeFee: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:status: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:empty: ", p), err) }
  }
  return err
}

func (p *TOrdersResults) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderType", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:orderType: ", p), err) }
  if err := oprot.WriteString(string(p.OrderType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderType (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:orderType: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:account: ", p), err) }
  return err
}

func (p *TOrdersResults) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:mobile: ", p), err) }
  return err
}

func (p *TOrdersResults) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersResults(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - OrderId
//  - StartPage
//  - PageSize
type TOrdersDetailParams struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  OrderId string `thrift:"orderId,2" db:"orderId" json:"orderId"`
  StartPage int32 `thrift:"startPage,3" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,4" db:"pageSize" json:"pageSize"`
}

func NewTOrdersDetailParams() *TOrdersDetailParams {
  return &TOrdersDetailParams{}
}


func (p *TOrdersDetailParams) GetTraceId() string {
  return p.TraceId
}

func (p *TOrdersDetailParams) GetOrderId() string {
  return p.OrderId
}

func (p *TOrdersDetailParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TOrdersDetailParams) GetPageSize() int32 {
  return p.PageSize
}
func (p *TOrdersDetailParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersDetailParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TOrdersDetailParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *TOrdersDetailParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TOrdersDetailParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TOrdersDetailParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TOrdersDetailParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersDetailParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TOrdersDetailParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err) }
  if err := oprot.WriteString(string(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err) }
  return err
}

func (p *TOrdersDetailParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startPage: ", p), err) }
  return err
}

func (p *TOrdersDetailParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageSize: ", p), err) }
  return err
}

func (p *TOrdersDetailParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersDetailParams(%+v)", *p)
}

// Attributes:
//  - Timestamp
//  - Price
//  - TotalQuantity
//  - BusinessPrice
//  - TradeFee
//  - Empty
type TOrdersDetailResult_ struct {
  Timestamp string `thrift:"timestamp,1" db:"timestamp" json:"timestamp"`
  Price string `thrift:"price,2" db:"price" json:"price"`
  TotalQuantity string `thrift:"totalQuantity,3" db:"totalQuantity" json:"totalQuantity"`
  BusinessPrice string `thrift:"businessPrice,4" db:"businessPrice" json:"businessPrice"`
  TradeFee string `thrift:"tradeFee,5" db:"tradeFee" json:"tradeFee"`
  Empty bool `thrift:"empty,6" db:"empty" json:"empty,omitempty"`
}

func NewTOrdersDetailResult_() *TOrdersDetailResult_ {
  return &TOrdersDetailResult_{}
}


func (p *TOrdersDetailResult_) GetTimestamp() string {
  return p.Timestamp
}

func (p *TOrdersDetailResult_) GetPrice() string {
  return p.Price
}

func (p *TOrdersDetailResult_) GetTotalQuantity() string {
  return p.TotalQuantity
}

func (p *TOrdersDetailResult_) GetBusinessPrice() string {
  return p.BusinessPrice
}

func (p *TOrdersDetailResult_) GetTradeFee() string {
  return p.TradeFee
}
var TOrdersDetailResult__Empty_DEFAULT bool = false

func (p *TOrdersDetailResult_) GetEmpty() bool {
  return p.Empty
}
func (p *TOrdersDetailResult_) IsSetEmpty() bool {
  return p.Empty != TOrdersDetailResult__Empty_DEFAULT
}

func (p *TOrdersDetailResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersDetailResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *TOrdersDetailResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *TOrdersDetailResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalQuantity = v
}
  return nil
}

func (p *TOrdersDetailResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BusinessPrice = v
}
  return nil
}

func (p *TOrdersDetailResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TradeFee = v
}
  return nil
}

func (p *TOrdersDetailResult_)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TOrdersDetailResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TOrdersDetailResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersDetailResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err) }
  return err
}

func (p *TOrdersDetailResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:price: ", p), err) }
  if err := oprot.WriteString(string(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:price: ", p), err) }
  return err
}

func (p *TOrdersDetailResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalQuantity", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalQuantity: ", p), err) }
  if err := oprot.WriteString(string(p.TotalQuantity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalQuantity (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalQuantity: ", p), err) }
  return err
}

func (p *TOrdersDetailResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("businessPrice", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:businessPrice: ", p), err) }
  if err := oprot.WriteString(string(p.BusinessPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.businessPrice (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:businessPrice: ", p), err) }
  return err
}

func (p *TOrdersDetailResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tradeFee", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tradeFee: ", p), err) }
  if err := oprot.WriteString(string(p.TradeFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tradeFee (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tradeFee: ", p), err) }
  return err
}

func (p *TOrdersDetailResult_) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:empty: ", p), err) }
  }
  return err
}

func (p *TOrdersDetailResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersDetailResult_(%+v)", *p)
}

// Attributes:
//  - Name
//  - Empty
type TSymbolsResult_ struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Empty bool `thrift:"empty,2" db:"empty" json:"empty,omitempty"`
}

func NewTSymbolsResult_() *TSymbolsResult_ {
  return &TSymbolsResult_{}
}


func (p *TSymbolsResult_) GetName() string {
  return p.Name
}
var TSymbolsResult__Empty_DEFAULT bool = false

func (p *TSymbolsResult_) GetEmpty() bool {
  return p.Empty
}
func (p *TSymbolsResult_) IsSetEmpty() bool {
  return p.Empty != TSymbolsResult__Empty_DEFAULT
}

func (p *TSymbolsResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSymbolsResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TSymbolsResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Empty = v
}
  return nil
}

func (p *TSymbolsResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TSymbolsResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSymbolsResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TSymbolsResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEmpty() {
    if err := oprot.WriteFieldBegin("empty", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:empty: ", p), err) }
    if err := oprot.WriteBool(bool(p.Empty)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.empty (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:empty: ", p), err) }
  }
  return err
}

func (p *TSymbolsResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSymbolsResult_(%+v)", *p)
}

type TOrdersService interface {
  // Parameters:
  //  - Params
  SelectEngineOrdersListByConditions(ctx context.Context, params *TOrdersParams) (r []*TOrdersResults, err error)
  // Parameters:
  //  - Params
  SelectEngineOrdersCountByConditions(ctx context.Context, params *TOrdersParams) (r int32, err error)
  // Parameters:
  //  - Params
  SelectEngineOrdersDetailListByOrderId(ctx context.Context, params *TOrdersDetailParams) (r []*TOrdersDetailResult_, err error)
  // Parameters:
  //  - Params
  SelectEngineOrdersDetailCountByOrderId(ctx context.Context, params *TOrdersDetailParams) (r int32, err error)
  SelectSymbolsList(ctx context.Context) (r []*TSymbolsResult_, err error)
}

type TOrdersServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTOrdersService instead
func NewTOrdersServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TOrdersServiceClient {
  return &TOrdersServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTOrdersService instead
func NewTOrdersServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TOrdersServiceClient {
  return &TOrdersServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTOrdersServiceClient(c thrift.TClient) *TOrdersServiceClient {
  return &TOrdersServiceClient{
    c: c,
  }
}

// Parameters:
//  - Params
func (p *TOrdersServiceClient) SelectEngineOrdersListByConditions(ctx context.Context, params *TOrdersParams) (r []*TOrdersResults, err error) {
  var _args0 TOrdersServiceSelectEngineOrdersListByConditionsArgs
  _args0.Params = params
  var _result1 TOrdersServiceSelectEngineOrdersListByConditionsResult
  if err = p.c.Call(ctx, "selectEngineOrdersListByConditions", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TOrdersServiceClient) SelectEngineOrdersCountByConditions(ctx context.Context, params *TOrdersParams) (r int32, err error) {
  var _args2 TOrdersServiceSelectEngineOrdersCountByConditionsArgs
  _args2.Params = params
  var _result3 TOrdersServiceSelectEngineOrdersCountByConditionsResult
  if err = p.c.Call(ctx, "selectEngineOrdersCountByConditions", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TOrdersServiceClient) SelectEngineOrdersDetailListByOrderId(ctx context.Context, params *TOrdersDetailParams) (r []*TOrdersDetailResult_, err error) {
  var _args4 TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs
  _args4.Params = params
  var _result5 TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult
  if err = p.c.Call(ctx, "selectEngineOrdersDetailListByOrderId", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TOrdersServiceClient) SelectEngineOrdersDetailCountByOrderId(ctx context.Context, params *TOrdersDetailParams) (r int32, err error) {
  var _args6 TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs
  _args6.Params = params
  var _result7 TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult
  if err = p.c.Call(ctx, "selectEngineOrdersDetailCountByOrderId", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

func (p *TOrdersServiceClient) SelectSymbolsList(ctx context.Context) (r []*TSymbolsResult_, err error) {
  var _args8 TOrdersServiceSelectSymbolsListArgs
  var _result9 TOrdersServiceSelectSymbolsListResult
  if err = p.c.Call(ctx, "selectSymbolsList", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

type TOrdersServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TOrdersService
}

func (p *TOrdersServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TOrdersServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TOrdersServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTOrdersServiceProcessor(handler TOrdersService) *TOrdersServiceProcessor {

  self10 := &TOrdersServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["selectEngineOrdersListByConditions"] = &tOrdersServiceProcessorSelectEngineOrdersListByConditions{handler:handler}
  self10.processorMap["selectEngineOrdersCountByConditions"] = &tOrdersServiceProcessorSelectEngineOrdersCountByConditions{handler:handler}
  self10.processorMap["selectEngineOrdersDetailListByOrderId"] = &tOrdersServiceProcessorSelectEngineOrdersDetailListByOrderId{handler:handler}
  self10.processorMap["selectEngineOrdersDetailCountByOrderId"] = &tOrdersServiceProcessorSelectEngineOrdersDetailCountByOrderId{handler:handler}
  self10.processorMap["selectSymbolsList"] = &tOrdersServiceProcessorSelectSymbolsList{handler:handler}
return self10
}

func (p *TOrdersServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x11

}

type tOrdersServiceProcessorSelectEngineOrdersListByConditions struct {
  handler TOrdersService
}

func (p *tOrdersServiceProcessorSelectEngineOrdersListByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TOrdersServiceSelectEngineOrdersListByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectEngineOrdersListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TOrdersServiceSelectEngineOrdersListByConditionsResult{}
var retval []*TOrdersResults
  var err2 error
  if retval, err2 = p.handler.SelectEngineOrdersListByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectEngineOrdersListByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectEngineOrdersListByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectEngineOrdersListByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tOrdersServiceProcessorSelectEngineOrdersCountByConditions struct {
  handler TOrdersService
}

func (p *tOrdersServiceProcessorSelectEngineOrdersCountByConditions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TOrdersServiceSelectEngineOrdersCountByConditionsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectEngineOrdersCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TOrdersServiceSelectEngineOrdersCountByConditionsResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectEngineOrdersCountByConditions(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectEngineOrdersCountByConditions: " + err2.Error())
    oprot.WriteMessageBegin("selectEngineOrdersCountByConditions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectEngineOrdersCountByConditions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tOrdersServiceProcessorSelectEngineOrdersDetailListByOrderId struct {
  handler TOrdersService
}

func (p *tOrdersServiceProcessorSelectEngineOrdersDetailListByOrderId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectEngineOrdersDetailListByOrderId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult{}
var retval []*TOrdersDetailResult_
  var err2 error
  if retval, err2 = p.handler.SelectEngineOrdersDetailListByOrderId(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectEngineOrdersDetailListByOrderId: " + err2.Error())
    oprot.WriteMessageBegin("selectEngineOrdersDetailListByOrderId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectEngineOrdersDetailListByOrderId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tOrdersServiceProcessorSelectEngineOrdersDetailCountByOrderId struct {
  handler TOrdersService
}

func (p *tOrdersServiceProcessorSelectEngineOrdersDetailCountByOrderId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectEngineOrdersDetailCountByOrderId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectEngineOrdersDetailCountByOrderId(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectEngineOrdersDetailCountByOrderId: " + err2.Error())
    oprot.WriteMessageBegin("selectEngineOrdersDetailCountByOrderId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectEngineOrdersDetailCountByOrderId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tOrdersServiceProcessorSelectSymbolsList struct {
  handler TOrdersService
}

func (p *tOrdersServiceProcessorSelectSymbolsList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TOrdersServiceSelectSymbolsListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectSymbolsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TOrdersServiceSelectSymbolsListResult{}
var retval []*TSymbolsResult_
  var err2 error
  if retval, err2 = p.handler.SelectSymbolsList(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectSymbolsList: " + err2.Error())
    oprot.WriteMessageBegin("selectSymbolsList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectSymbolsList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Params
type TOrdersServiceSelectEngineOrdersListByConditionsArgs struct {
  Params *TOrdersParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTOrdersServiceSelectEngineOrdersListByConditionsArgs() *TOrdersServiceSelectEngineOrdersListByConditionsArgs {
  return &TOrdersServiceSelectEngineOrdersListByConditionsArgs{}
}

var TOrdersServiceSelectEngineOrdersListByConditionsArgs_Params_DEFAULT *TOrdersParams
func (p *TOrdersServiceSelectEngineOrdersListByConditionsArgs) GetParams() *TOrdersParams {
  if !p.IsSetParams() {
    return TOrdersServiceSelectEngineOrdersListByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TOrdersServiceSelectEngineOrdersListByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TOrdersParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineOrdersListByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectEngineOrdersListByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TOrdersServiceSelectEngineOrdersListByConditionsResult struct {
  Success []*TOrdersResults `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTOrdersServiceSelectEngineOrdersListByConditionsResult() *TOrdersServiceSelectEngineOrdersListByConditionsResult {
  return &TOrdersServiceSelectEngineOrdersListByConditionsResult{}
}

var TOrdersServiceSelectEngineOrdersListByConditionsResult_Success_DEFAULT []*TOrdersResults

func (p *TOrdersServiceSelectEngineOrdersListByConditionsResult) GetSuccess() []*TOrdersResults {
  return p.Success
}
func (p *TOrdersServiceSelectEngineOrdersListByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TOrdersResults, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &TOrdersResults{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.Success = append(p.Success, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineOrdersListByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TOrdersServiceSelectEngineOrdersListByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectEngineOrdersListByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TOrdersServiceSelectEngineOrdersCountByConditionsArgs struct {
  Params *TOrdersParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTOrdersServiceSelectEngineOrdersCountByConditionsArgs() *TOrdersServiceSelectEngineOrdersCountByConditionsArgs {
  return &TOrdersServiceSelectEngineOrdersCountByConditionsArgs{}
}

var TOrdersServiceSelectEngineOrdersCountByConditionsArgs_Params_DEFAULT *TOrdersParams
func (p *TOrdersServiceSelectEngineOrdersCountByConditionsArgs) GetParams() *TOrdersParams {
  if !p.IsSetParams() {
    return TOrdersServiceSelectEngineOrdersCountByConditionsArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TOrdersServiceSelectEngineOrdersCountByConditionsArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TOrdersParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineOrdersCountByConditions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectEngineOrdersCountByConditionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TOrdersServiceSelectEngineOrdersCountByConditionsResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTOrdersServiceSelectEngineOrdersCountByConditionsResult() *TOrdersServiceSelectEngineOrdersCountByConditionsResult {
  return &TOrdersServiceSelectEngineOrdersCountByConditionsResult{}
}

var TOrdersServiceSelectEngineOrdersCountByConditionsResult_Success_DEFAULT int32
func (p *TOrdersServiceSelectEngineOrdersCountByConditionsResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TOrdersServiceSelectEngineOrdersCountByConditionsResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TOrdersServiceSelectEngineOrdersCountByConditionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineOrdersCountByConditions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TOrdersServiceSelectEngineOrdersCountByConditionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectEngineOrdersCountByConditionsResult(%+v)", *p)
}

// Attributes:
//  - Params
type TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs struct {
  Params *TOrdersDetailParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs() *TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs {
  return &TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs{}
}

var TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs_Params_DEFAULT *TOrdersDetailParams
func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs) GetParams() *TOrdersDetailParams {
  if !p.IsSetParams() {
    return TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TOrdersDetailParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineOrdersDetailListByOrderId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectEngineOrdersDetailListByOrderIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult struct {
  Success []*TOrdersDetailResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTOrdersServiceSelectEngineOrdersDetailListByOrderIdResult() *TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult {
  return &TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult{}
}

var TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult_Success_DEFAULT []*TOrdersDetailResult_

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult) GetSuccess() []*TOrdersDetailResult_ {
  return p.Success
}
func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TOrdersDetailResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &TOrdersDetailResult_{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.Success = append(p.Success, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineOrdersDetailListByOrderId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectEngineOrdersDetailListByOrderIdResult(%+v)", *p)
}

// Attributes:
//  - Params
type TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs struct {
  Params *TOrdersDetailParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs() *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs {
  return &TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs{}
}

var TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs_Params_DEFAULT *TOrdersDetailParams
func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs) GetParams() *TOrdersDetailParams {
  if !p.IsSetParams() {
    return TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TOrdersDetailParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineOrdersDetailCountByOrderId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectEngineOrdersDetailCountByOrderIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult() *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult {
  return &TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult{}
}

var TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult_Success_DEFAULT int32
func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineOrdersDetailCountByOrderId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectEngineOrdersDetailCountByOrderIdResult(%+v)", *p)
}

type TOrdersServiceSelectSymbolsListArgs struct {
}

func NewTOrdersServiceSelectSymbolsListArgs() *TOrdersServiceSelectSymbolsListArgs {
  return &TOrdersServiceSelectSymbolsListArgs{}
}

func (p *TOrdersServiceSelectSymbolsListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectSymbolsListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSymbolsList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectSymbolsListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectSymbolsListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TOrdersServiceSelectSymbolsListResult struct {
  Success []*TSymbolsResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTOrdersServiceSelectSymbolsListResult() *TOrdersServiceSelectSymbolsListResult {
  return &TOrdersServiceSelectSymbolsListResult{}
}

var TOrdersServiceSelectSymbolsListResult_Success_DEFAULT []*TSymbolsResult_

func (p *TOrdersServiceSelectSymbolsListResult) GetSuccess() []*TSymbolsResult_ {
  return p.Success
}
func (p *TOrdersServiceSelectSymbolsListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TOrdersServiceSelectSymbolsListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TOrdersServiceSelectSymbolsListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSymbolsResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &TSymbolsResult_{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TOrdersServiceSelectSymbolsListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectSymbolsList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TOrdersServiceSelectSymbolsListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TOrdersServiceSelectSymbolsListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TOrdersServiceSelectSymbolsListResult(%+v)", *p)
}


