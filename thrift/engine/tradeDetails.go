// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package engine

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - BuyerId
//  - BuyerEmail
//  - SellerId
//  - SellerEmail
//  - StartTime
//  - EndTime
//  - CurrencyPair
//  - StartPage
//  - PageSize
type TTradeDetailsParams struct {
  BuyerId int32 `thrift:"buyerId,1" db:"buyerId" json:"buyerId"`
  BuyerEmail string `thrift:"buyerEmail,2" db:"buyerEmail" json:"buyerEmail"`
  SellerId int32 `thrift:"sellerId,3" db:"sellerId" json:"sellerId"`
  SellerEmail string `thrift:"sellerEmail,4" db:"sellerEmail" json:"sellerEmail"`
  StartTime string `thrift:"startTime,5" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,6" db:"endTime" json:"endTime"`
  CurrencyPair string `thrift:"currencyPair,7" db:"currencyPair" json:"currencyPair"`
  StartPage int32 `thrift:"startPage,8" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,9" db:"pageSize" json:"pageSize"`
}

func NewTTradeDetailsParams() *TTradeDetailsParams {
  return &TTradeDetailsParams{}
}


func (p *TTradeDetailsParams) GetBuyerId() int32 {
  return p.BuyerId
}

func (p *TTradeDetailsParams) GetBuyerEmail() string {
  return p.BuyerEmail
}

func (p *TTradeDetailsParams) GetSellerId() int32 {
  return p.SellerId
}

func (p *TTradeDetailsParams) GetSellerEmail() string {
  return p.SellerEmail
}

func (p *TTradeDetailsParams) GetStartTime() string {
  return p.StartTime
}

func (p *TTradeDetailsParams) GetEndTime() string {
  return p.EndTime
}

func (p *TTradeDetailsParams) GetCurrencyPair() string {
  return p.CurrencyPair
}

func (p *TTradeDetailsParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TTradeDetailsParams) GetPageSize() int32 {
  return p.PageSize
}
func (p *TTradeDetailsParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeDetailsParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BuyerId = v
}
  return nil
}

func (p *TTradeDetailsParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BuyerEmail = v
}
  return nil
}

func (p *TTradeDetailsParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SellerId = v
}
  return nil
}

func (p *TTradeDetailsParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SellerEmail = v
}
  return nil
}

func (p *TTradeDetailsParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TTradeDetailsParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TTradeDetailsParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CurrencyPair = v
}
  return nil
}

func (p *TTradeDetailsParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TTradeDetailsParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TTradeDetailsParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTradeDetailsParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeDetailsParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buyerId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buyerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.BuyerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buyerId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buyerId: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buyerEmail", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:buyerEmail: ", p), err) }
  if err := oprot.WriteString(string(p.BuyerEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buyerEmail (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:buyerEmail: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sellerId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sellerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SellerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sellerId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sellerId: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sellerEmail", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sellerEmail: ", p), err) }
  if err := oprot.WriteString(string(p.SellerEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sellerEmail (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sellerEmail: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:startTime: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:endTime: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyPair", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:currencyPair: ", p), err) }
  if err := oprot.WriteString(string(p.CurrencyPair)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyPair (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:currencyPair: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:startPage: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:pageSize: ", p), err) }
  return err
}

func (p *TTradeDetailsParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeDetailsParams(%+v)", *p)
}

// Attributes:
//  - ID
//  - Timestamp
//  - BuyerId
//  - BuyerEmail
//  - SellerId
//  - SellerEmail
//  - CurrencyPair
//  - Price
//  - Size
//  - BuyerFee
//  - SellerFee
//  - BuyerOrderId
//  - SellerOrderId
type TTradeDetail struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Timestamp string `thrift:"timestamp,2" db:"timestamp" json:"timestamp"`
  BuyerId int32 `thrift:"buyerId,3" db:"buyerId" json:"buyerId"`
  BuyerEmail string `thrift:"buyerEmail,4" db:"buyerEmail" json:"buyerEmail"`
  SellerId int32 `thrift:"sellerId,5" db:"sellerId" json:"sellerId"`
  SellerEmail string `thrift:"sellerEmail,6" db:"sellerEmail" json:"sellerEmail"`
  CurrencyPair string `thrift:"currencyPair,7" db:"currencyPair" json:"currencyPair"`
  Price string `thrift:"price,8" db:"price" json:"price"`
  Size string `thrift:"size,9" db:"size" json:"size"`
  BuyerFee string `thrift:"buyerFee,10" db:"buyerFee" json:"buyerFee"`
  SellerFee string `thrift:"sellerFee,11" db:"sellerFee" json:"sellerFee"`
  BuyerOrderId string `thrift:"buyerOrderId,12" db:"buyerOrderId" json:"buyerOrderId"`
  SellerOrderId string `thrift:"sellerOrderId,13" db:"sellerOrderId" json:"sellerOrderId"`
}

func NewTTradeDetail() *TTradeDetail {
  return &TTradeDetail{}
}


func (p *TTradeDetail) GetID() int32 {
  return p.ID
}

func (p *TTradeDetail) GetTimestamp() string {
  return p.Timestamp
}

func (p *TTradeDetail) GetBuyerId() int32 {
  return p.BuyerId
}

func (p *TTradeDetail) GetBuyerEmail() string {
  return p.BuyerEmail
}

func (p *TTradeDetail) GetSellerId() int32 {
  return p.SellerId
}

func (p *TTradeDetail) GetSellerEmail() string {
  return p.SellerEmail
}

func (p *TTradeDetail) GetCurrencyPair() string {
  return p.CurrencyPair
}

func (p *TTradeDetail) GetPrice() string {
  return p.Price
}

func (p *TTradeDetail) GetSize() string {
  return p.Size
}

func (p *TTradeDetail) GetBuyerFee() string {
  return p.BuyerFee
}

func (p *TTradeDetail) GetSellerFee() string {
  return p.SellerFee
}

func (p *TTradeDetail) GetBuyerOrderId() string {
  return p.BuyerOrderId
}

func (p *TTradeDetail) GetSellerOrderId() string {
  return p.SellerOrderId
}
func (p *TTradeDetail) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeDetail)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TTradeDetail)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *TTradeDetail)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BuyerId = v
}
  return nil
}

func (p *TTradeDetail)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BuyerEmail = v
}
  return nil
}

func (p *TTradeDetail)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SellerId = v
}
  return nil
}

func (p *TTradeDetail)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SellerEmail = v
}
  return nil
}

func (p *TTradeDetail)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CurrencyPair = v
}
  return nil
}

func (p *TTradeDetail)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Price = v
}
  return nil
}

func (p *TTradeDetail)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *TTradeDetail)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.BuyerFee = v
}
  return nil
}

func (p *TTradeDetail)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.SellerFee = v
}
  return nil
}

func (p *TTradeDetail)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.BuyerOrderId = v
}
  return nil
}

func (p *TTradeDetail)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.SellerOrderId = v
}
  return nil
}

func (p *TTradeDetail) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTradeDetail"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeDetail) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buyerId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:buyerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.BuyerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buyerId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:buyerId: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buyerEmail", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:buyerEmail: ", p), err) }
  if err := oprot.WriteString(string(p.BuyerEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buyerEmail (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:buyerEmail: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sellerId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sellerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SellerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sellerId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sellerId: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sellerEmail", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sellerEmail: ", p), err) }
  if err := oprot.WriteString(string(p.SellerEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sellerEmail (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sellerEmail: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currencyPair", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:currencyPair: ", p), err) }
  if err := oprot.WriteString(string(p.CurrencyPair)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currencyPair (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:currencyPair: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:price: ", p), err) }
  if err := oprot.WriteString(string(p.Price)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.price (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:price: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:size: ", p), err) }
  if err := oprot.WriteString(string(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:size: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buyerFee", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:buyerFee: ", p), err) }
  if err := oprot.WriteString(string(p.BuyerFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buyerFee (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:buyerFee: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sellerFee", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sellerFee: ", p), err) }
  if err := oprot.WriteString(string(p.SellerFee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sellerFee (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sellerFee: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buyerOrderId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:buyerOrderId: ", p), err) }
  if err := oprot.WriteString(string(p.BuyerOrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buyerOrderId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:buyerOrderId: ", p), err) }
  return err
}

func (p *TTradeDetail) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sellerOrderId", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:sellerOrderId: ", p), err) }
  if err := oprot.WriteString(string(p.SellerOrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sellerOrderId (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:sellerOrderId: ", p), err) }
  return err
}

func (p *TTradeDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeDetail(%+v)", *p)
}

type TTradeService interface {
  // Parameters:
  //  - Params
  SelectTradeDetailsBy(ctx context.Context, params *TTradeDetailsParams) (r []*TTradeDetail, err error)
  // Parameters:
  //  - Params
  SelectTradeDetailsCountBy(ctx context.Context, params *TTradeDetailsParams) (r int32, err error)
}

type TTradeServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTTradeService instead
func NewTTradeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TTradeServiceClient {
  return &TTradeServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTTradeService instead
func NewTTradeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TTradeServiceClient {
  return &TTradeServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTTradeServiceClient(c thrift.TClient) *TTradeServiceClient {
  return &TTradeServiceClient{
    c: c,
  }
}

// Parameters:
//  - Params
func (p *TTradeServiceClient) SelectTradeDetailsBy(ctx context.Context, params *TTradeDetailsParams) (r []*TTradeDetail, err error) {
  var _args0 TTradeServiceSelectTradeDetailsByArgs
  _args0.Params = params
  var _result1 TTradeServiceSelectTradeDetailsByResult
  if err = p.c.Call(ctx, "selectTradeDetailsBy", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TTradeServiceClient) SelectTradeDetailsCountBy(ctx context.Context, params *TTradeDetailsParams) (r int32, err error) {
  var _args2 TTradeServiceSelectTradeDetailsCountByArgs
  _args2.Params = params
  var _result3 TTradeServiceSelectTradeDetailsCountByResult
  if err = p.c.Call(ctx, "selectTradeDetailsCountBy", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type TTradeServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TTradeService
}

func (p *TTradeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TTradeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TTradeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTTradeServiceProcessor(handler TTradeService) *TTradeServiceProcessor {

  self4 := &TTradeServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["selectTradeDetailsBy"] = &tTradeServiceProcessorSelectTradeDetailsBy{handler:handler}
  self4.processorMap["selectTradeDetailsCountBy"] = &tTradeServiceProcessorSelectTradeDetailsCountBy{handler:handler}
return self4
}

func (p *TTradeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type tTradeServiceProcessorSelectTradeDetailsBy struct {
  handler TTradeService
}

func (p *tTradeServiceProcessorSelectTradeDetailsBy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTradeServiceSelectTradeDetailsByArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectTradeDetailsBy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTradeServiceSelectTradeDetailsByResult{}
var retval []*TTradeDetail
  var err2 error
  if retval, err2 = p.handler.SelectTradeDetailsBy(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectTradeDetailsBy: " + err2.Error())
    oprot.WriteMessageBegin("selectTradeDetailsBy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectTradeDetailsBy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tTradeServiceProcessorSelectTradeDetailsCountBy struct {
  handler TTradeService
}

func (p *tTradeServiceProcessorSelectTradeDetailsCountBy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TTradeServiceSelectTradeDetailsCountByArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectTradeDetailsCountBy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TTradeServiceSelectTradeDetailsCountByResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectTradeDetailsCountBy(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectTradeDetailsCountBy: " + err2.Error())
    oprot.WriteMessageBegin("selectTradeDetailsCountBy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectTradeDetailsCountBy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Params
type TTradeServiceSelectTradeDetailsByArgs struct {
  Params *TTradeDetailsParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTTradeServiceSelectTradeDetailsByArgs() *TTradeServiceSelectTradeDetailsByArgs {
  return &TTradeServiceSelectTradeDetailsByArgs{}
}

var TTradeServiceSelectTradeDetailsByArgs_Params_DEFAULT *TTradeDetailsParams
func (p *TTradeServiceSelectTradeDetailsByArgs) GetParams() *TTradeDetailsParams {
  if !p.IsSetParams() {
    return TTradeServiceSelectTradeDetailsByArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TTradeServiceSelectTradeDetailsByArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TTradeServiceSelectTradeDetailsByArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsByArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeDetailsParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsByArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeDetailsBy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsByArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TTradeServiceSelectTradeDetailsByArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeServiceSelectTradeDetailsByArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TTradeServiceSelectTradeDetailsByResult struct {
  Success []*TTradeDetail `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTTradeServiceSelectTradeDetailsByResult() *TTradeServiceSelectTradeDetailsByResult {
  return &TTradeServiceSelectTradeDetailsByResult{}
}

var TTradeServiceSelectTradeDetailsByResult_Success_DEFAULT []*TTradeDetail

func (p *TTradeServiceSelectTradeDetailsByResult) GetSuccess() []*TTradeDetail {
  return p.Success
}
func (p *TTradeServiceSelectTradeDetailsByResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TTradeServiceSelectTradeDetailsByResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsByResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TTradeDetail, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TTradeDetail{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Success = append(p.Success, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsByResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeDetailsBy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsByResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TTradeServiceSelectTradeDetailsByResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeServiceSelectTradeDetailsByResult(%+v)", *p)
}

// Attributes:
//  - Params
type TTradeServiceSelectTradeDetailsCountByArgs struct {
  Params *TTradeDetailsParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTTradeServiceSelectTradeDetailsCountByArgs() *TTradeServiceSelectTradeDetailsCountByArgs {
  return &TTradeServiceSelectTradeDetailsCountByArgs{}
}

var TTradeServiceSelectTradeDetailsCountByArgs_Params_DEFAULT *TTradeDetailsParams
func (p *TTradeServiceSelectTradeDetailsCountByArgs) GetParams() *TTradeDetailsParams {
  if !p.IsSetParams() {
    return TTradeServiceSelectTradeDetailsCountByArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TTradeServiceSelectTradeDetailsCountByArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TTradeServiceSelectTradeDetailsCountByArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsCountByArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TTradeDetailsParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsCountByArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeDetailsCountBy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsCountByArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TTradeServiceSelectTradeDetailsCountByArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeServiceSelectTradeDetailsCountByArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TTradeServiceSelectTradeDetailsCountByResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTTradeServiceSelectTradeDetailsCountByResult() *TTradeServiceSelectTradeDetailsCountByResult {
  return &TTradeServiceSelectTradeDetailsCountByResult{}
}

var TTradeServiceSelectTradeDetailsCountByResult_Success_DEFAULT int32
func (p *TTradeServiceSelectTradeDetailsCountByResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TTradeServiceSelectTradeDetailsCountByResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TTradeServiceSelectTradeDetailsCountByResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TTradeServiceSelectTradeDetailsCountByResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsCountByResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TTradeServiceSelectTradeDetailsCountByResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectTradeDetailsCountBy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTradeServiceSelectTradeDetailsCountByResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TTradeServiceSelectTradeDetailsCountByResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTradeServiceSelectTradeDetailsCountByResult(%+v)", *p)
}


