// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package engine

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - ID
//  - UserId
//  - Email
//  - Type
//  - Currency
//  - Amount
//  - TId
//  - CreatedAt
type TEngineAccountCheckingItem struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Email string `thrift:"email,3" db:"email" json:"email"`
  Type string `thrift:"type,4" db:"type" json:"type"`
  Currency string `thrift:"currency,5" db:"currency" json:"currency"`
  Amount string `thrift:"amount,6" db:"amount" json:"amount"`
  TId string `thrift:"tId,7" db:"tId" json:"tId"`
  CreatedAt string `thrift:"createdAt,8" db:"createdAt" json:"createdAt"`
}

func NewTEngineAccountCheckingItem() *TEngineAccountCheckingItem {
  return &TEngineAccountCheckingItem{}
}


func (p *TEngineAccountCheckingItem) GetID() int32 {
  return p.ID
}

func (p *TEngineAccountCheckingItem) GetUserId() int32 {
  return p.UserId
}

func (p *TEngineAccountCheckingItem) GetEmail() string {
  return p.Email
}

func (p *TEngineAccountCheckingItem) GetType() string {
  return p.Type
}

func (p *TEngineAccountCheckingItem) GetCurrency() string {
  return p.Currency
}

func (p *TEngineAccountCheckingItem) GetAmount() string {
  return p.Amount
}

func (p *TEngineAccountCheckingItem) GetTId() string {
  return p.TId
}

func (p *TEngineAccountCheckingItem) GetCreatedAt() string {
  return p.CreatedAt
}
func (p *TEngineAccountCheckingItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEngineAccountCheckingItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TEngineAccountCheckingItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TEngineAccountCheckingItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TEngineAccountCheckingItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TEngineAccountCheckingItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TEngineAccountCheckingItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TEngineAccountCheckingItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TId = v
}
  return nil
}

func (p *TEngineAccountCheckingItem)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CreatedAt = v
}
  return nil
}

func (p *TEngineAccountCheckingItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEngineAccountCheckingItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEngineAccountCheckingItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingItem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currency: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingItem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:amount: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tId", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tId: ", p), err) }
  if err := oprot.WriteString(string(p.TId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tId: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingItem) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdAt", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createdAt: ", p), err) }
  if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdAt (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createdAt: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEngineAccountCheckingItem(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - StartTime
//  - EndTime
//  - UserId
//  - Email
//  - Currency
//  - StartPage
//  - PageSize
//  - Type
type TEngineAccountCheckingParams struct {
  TraceId string `thrift:"traceId,1" db:"traceId" json:"traceId"`
  StartTime string `thrift:"startTime,2" db:"startTime" json:"startTime"`
  EndTime string `thrift:"endTime,3" db:"endTime" json:"endTime"`
  UserId int32 `thrift:"userId,4" db:"userId" json:"userId"`
  Email string `thrift:"email,5" db:"email" json:"email"`
  Currency string `thrift:"currency,6" db:"currency" json:"currency"`
  StartPage int32 `thrift:"startPage,7" db:"startPage" json:"startPage"`
  PageSize int32 `thrift:"pageSize,8" db:"pageSize" json:"pageSize"`
  Type string `thrift:"type,9" db:"type" json:"type"`
}

func NewTEngineAccountCheckingParams() *TEngineAccountCheckingParams {
  return &TEngineAccountCheckingParams{}
}


func (p *TEngineAccountCheckingParams) GetTraceId() string {
  return p.TraceId
}

func (p *TEngineAccountCheckingParams) GetStartTime() string {
  return p.StartTime
}

func (p *TEngineAccountCheckingParams) GetEndTime() string {
  return p.EndTime
}

func (p *TEngineAccountCheckingParams) GetUserId() int32 {
  return p.UserId
}

func (p *TEngineAccountCheckingParams) GetEmail() string {
  return p.Email
}

func (p *TEngineAccountCheckingParams) GetCurrency() string {
  return p.Currency
}

func (p *TEngineAccountCheckingParams) GetStartPage() int32 {
  return p.StartPage
}

func (p *TEngineAccountCheckingParams) GetPageSize() int32 {
  return p.PageSize
}

func (p *TEngineAccountCheckingParams) GetType() string {
  return p.Type
}
func (p *TEngineAccountCheckingParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.StartPage = v
}
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PageSize = v
}
  return nil
}

func (p *TEngineAccountCheckingParams)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TEngineAccountCheckingParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TEngineAccountCheckingParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEngineAccountCheckingParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTime: ", p), err) }
  if err := oprot.WriteString(string(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTime: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endTime: ", p), err) }
  if err := oprot.WriteString(string(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endTime: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:userId: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:email: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:currency: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startPage", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:startPage: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartPage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startPage (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:startPage: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:pageSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pageSize (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:pageSize: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:type: ", p), err) }
  return err
}

func (p *TEngineAccountCheckingParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEngineAccountCheckingParams(%+v)", *p)
}

type TAccountTransfersService interface {
  // Parameters:
  //  - Params
  SelectEngineAccountCountBy(ctx context.Context, params *TEngineAccountCheckingParams) (r int32, err error)
  // Parameters:
  //  - Params
  SelectEngineAccountDataBy(ctx context.Context, params *TEngineAccountCheckingParams) (r []*TEngineAccountCheckingItem, err error)
}

type TAccountTransfersServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewTAccountTransfersService instead
func NewTAccountTransfersServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TAccountTransfersServiceClient {
  return &TAccountTransfersServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewTAccountTransfersService instead
func NewTAccountTransfersServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TAccountTransfersServiceClient {
  return &TAccountTransfersServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTAccountTransfersServiceClient(c thrift.TClient) *TAccountTransfersServiceClient {
  return &TAccountTransfersServiceClient{
    c: c,
  }
}

// Parameters:
//  - Params
func (p *TAccountTransfersServiceClient) SelectEngineAccountCountBy(ctx context.Context, params *TEngineAccountCheckingParams) (r int32, err error) {
  var _args0 TAccountTransfersServiceSelectEngineAccountCountByArgs
  _args0.Params = params
  var _result1 TAccountTransfersServiceSelectEngineAccountCountByResult
  if err = p.c.Call(ctx, "selectEngineAccountCountBy", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *TAccountTransfersServiceClient) SelectEngineAccountDataBy(ctx context.Context, params *TEngineAccountCheckingParams) (r []*TEngineAccountCheckingItem, err error) {
  var _args2 TAccountTransfersServiceSelectEngineAccountDataByArgs
  _args2.Params = params
  var _result3 TAccountTransfersServiceSelectEngineAccountDataByResult
  if err = p.c.Call(ctx, "selectEngineAccountDataBy", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type TAccountTransfersServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TAccountTransfersService
}

func (p *TAccountTransfersServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TAccountTransfersServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TAccountTransfersServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTAccountTransfersServiceProcessor(handler TAccountTransfersService) *TAccountTransfersServiceProcessor {

  self4 := &TAccountTransfersServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["selectEngineAccountCountBy"] = &tAccountTransfersServiceProcessorSelectEngineAccountCountBy{handler:handler}
  self4.processorMap["selectEngineAccountDataBy"] = &tAccountTransfersServiceProcessorSelectEngineAccountDataBy{handler:handler}
return self4
}

func (p *TAccountTransfersServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type tAccountTransfersServiceProcessorSelectEngineAccountCountBy struct {
  handler TAccountTransfersService
}

func (p *tAccountTransfersServiceProcessorSelectEngineAccountCountBy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountTransfersServiceSelectEngineAccountCountByArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectEngineAccountCountBy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountTransfersServiceSelectEngineAccountCountByResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.SelectEngineAccountCountBy(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectEngineAccountCountBy: " + err2.Error())
    oprot.WriteMessageBegin("selectEngineAccountCountBy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("selectEngineAccountCountBy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tAccountTransfersServiceProcessorSelectEngineAccountDataBy struct {
  handler TAccountTransfersService
}

func (p *tAccountTransfersServiceProcessorSelectEngineAccountDataBy) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TAccountTransfersServiceSelectEngineAccountDataByArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("selectEngineAccountDataBy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TAccountTransfersServiceSelectEngineAccountDataByResult{}
var retval []*TEngineAccountCheckingItem
  var err2 error
  if retval, err2 = p.handler.SelectEngineAccountDataBy(ctx, args.Params); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing selectEngineAccountDataBy: " + err2.Error())
    oprot.WriteMessageBegin("selectEngineAccountDataBy", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("selectEngineAccountDataBy", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Params
type TAccountTransfersServiceSelectEngineAccountCountByArgs struct {
  Params *TEngineAccountCheckingParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTAccountTransfersServiceSelectEngineAccountCountByArgs() *TAccountTransfersServiceSelectEngineAccountCountByArgs {
  return &TAccountTransfersServiceSelectEngineAccountCountByArgs{}
}

var TAccountTransfersServiceSelectEngineAccountCountByArgs_Params_DEFAULT *TEngineAccountCheckingParams
func (p *TAccountTransfersServiceSelectEngineAccountCountByArgs) GetParams() *TEngineAccountCheckingParams {
  if !p.IsSetParams() {
    return TAccountTransfersServiceSelectEngineAccountCountByArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TAccountTransfersServiceSelectEngineAccountCountByArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TEngineAccountCheckingParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineAccountCountBy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountTransfersServiceSelectEngineAccountCountByArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountTransfersServiceSelectEngineAccountCountByResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountTransfersServiceSelectEngineAccountCountByResult() *TAccountTransfersServiceSelectEngineAccountCountByResult {
  return &TAccountTransfersServiceSelectEngineAccountCountByResult{}
}

var TAccountTransfersServiceSelectEngineAccountCountByResult_Success_DEFAULT int32
func (p *TAccountTransfersServiceSelectEngineAccountCountByResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TAccountTransfersServiceSelectEngineAccountCountByResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TAccountTransfersServiceSelectEngineAccountCountByResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineAccountCountBy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountTransfersServiceSelectEngineAccountCountByResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountTransfersServiceSelectEngineAccountCountByResult(%+v)", *p)
}

// Attributes:
//  - Params
type TAccountTransfersServiceSelectEngineAccountDataByArgs struct {
  Params *TEngineAccountCheckingParams `thrift:"params,1" db:"params" json:"params"`
}

func NewTAccountTransfersServiceSelectEngineAccountDataByArgs() *TAccountTransfersServiceSelectEngineAccountDataByArgs {
  return &TAccountTransfersServiceSelectEngineAccountDataByArgs{}
}

var TAccountTransfersServiceSelectEngineAccountDataByArgs_Params_DEFAULT *TEngineAccountCheckingParams
func (p *TAccountTransfersServiceSelectEngineAccountDataByArgs) GetParams() *TEngineAccountCheckingParams {
  if !p.IsSetParams() {
    return TAccountTransfersServiceSelectEngineAccountDataByArgs_Params_DEFAULT
  }
return p.Params
}
func (p *TAccountTransfersServiceSelectEngineAccountDataByArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TEngineAccountCheckingParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineAccountDataBy_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountTransfersServiceSelectEngineAccountDataByArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TAccountTransfersServiceSelectEngineAccountDataByResult struct {
  Success []*TEngineAccountCheckingItem `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTAccountTransfersServiceSelectEngineAccountDataByResult() *TAccountTransfersServiceSelectEngineAccountDataByResult {
  return &TAccountTransfersServiceSelectEngineAccountDataByResult{}
}

var TAccountTransfersServiceSelectEngineAccountDataByResult_Success_DEFAULT []*TEngineAccountCheckingItem

func (p *TAccountTransfersServiceSelectEngineAccountDataByResult) GetSuccess() []*TEngineAccountCheckingItem {
  return p.Success
}
func (p *TAccountTransfersServiceSelectEngineAccountDataByResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TEngineAccountCheckingItem, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TEngineAccountCheckingItem{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Success = append(p.Success, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("selectEngineAccountDataBy_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TAccountTransfersServiceSelectEngineAccountDataByResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAccountTransfersServiceSelectEngineAccountDataByResult(%+v)", *p)
}


